Search.setIndex({"docnames": ["_autosummary/spyrit.core", "_autosummary/spyrit.core.meas", "_autosummary/spyrit.core.meas.DynamicHadamSplit", "_autosummary/spyrit.core.meas.DynamicHadamSplit.forward", "_autosummary/spyrit.core.meas.DynamicHadamSplit.forward_H", "_autosummary/spyrit.core.meas.DynamicHadamSplit.get_H", "_autosummary/spyrit.core.meas.DynamicHadamSplit.get_P", "_autosummary/spyrit.core.meas.DynamicHadamSplit.get_Perm", "_autosummary/spyrit.core.meas.DynamicLinear", "_autosummary/spyrit.core.meas.DynamicLinear.forward", "_autosummary/spyrit.core.meas.DynamicLinear.get_H", "_autosummary/spyrit.core.meas.DynamicLinearSplit", "_autosummary/spyrit.core.meas.DynamicLinearSplit.forward", "_autosummary/spyrit.core.meas.DynamicLinearSplit.forward_H", "_autosummary/spyrit.core.meas.DynamicLinearSplit.get_H", "_autosummary/spyrit.core.meas.DynamicLinearSplit.get_P", "_autosummary/spyrit.core.meas.HadamSplit", "_autosummary/spyrit.core.meas.HadamSplit.adjoint", "_autosummary/spyrit.core.meas.HadamSplit.forward", "_autosummary/spyrit.core.meas.HadamSplit.forward_H", "_autosummary/spyrit.core.meas.HadamSplit.get_H", "_autosummary/spyrit.core.meas.HadamSplit.get_H_T", "_autosummary/spyrit.core.meas.HadamSplit.get_H_pinv", "_autosummary/spyrit.core.meas.HadamSplit.get_P", "_autosummary/spyrit.core.meas.HadamSplit.get_Perm", "_autosummary/spyrit.core.meas.HadamSplit.inverse", "_autosummary/spyrit.core.meas.HadamSplit.pinv", "_autosummary/spyrit.core.meas.HadamSplit.set_H_pinv", "_autosummary/spyrit.core.meas.Linear", "_autosummary/spyrit.core.meas.Linear.adjoint", "_autosummary/spyrit.core.meas.Linear.forward", "_autosummary/spyrit.core.meas.Linear.get_H", "_autosummary/spyrit.core.meas.Linear.get_H_T", "_autosummary/spyrit.core.meas.Linear.get_H_pinv", "_autosummary/spyrit.core.meas.Linear.pinv", "_autosummary/spyrit.core.meas.Linear.set_H_pinv", "_autosummary/spyrit.core.meas.LinearSplit", "_autosummary/spyrit.core.meas.LinearSplit.adjoint", "_autosummary/spyrit.core.meas.LinearSplit.forward", "_autosummary/spyrit.core.meas.LinearSplit.forward_H", "_autosummary/spyrit.core.meas.LinearSplit.get_H", "_autosummary/spyrit.core.meas.LinearSplit.get_H_T", "_autosummary/spyrit.core.meas.LinearSplit.get_H_pinv", "_autosummary/spyrit.core.meas.LinearSplit.get_P", "_autosummary/spyrit.core.meas.LinearSplit.pinv", "_autosummary/spyrit.core.meas.LinearSplit.set_H_pinv", "_autosummary/spyrit.core.nnet", "_autosummary/spyrit.core.nnet.ConvNet", "_autosummary/spyrit.core.nnet.ConvNet.forward", "_autosummary/spyrit.core.nnet.ConvNetBN", "_autosummary/spyrit.core.nnet.ConvNetBN.forward", "_autosummary/spyrit.core.nnet.DConvNet", "_autosummary/spyrit.core.nnet.DConvNet.forward", "_autosummary/spyrit.core.nnet.Identity", "_autosummary/spyrit.core.nnet.Identity.forward", "_autosummary/spyrit.core.nnet.List_denoi", "_autosummary/spyrit.core.nnet.List_denoi.forward", "_autosummary/spyrit.core.nnet.Unet", "_autosummary/spyrit.core.nnet.Unet.bottle_neck", "_autosummary/spyrit.core.nnet.Unet.concat", "_autosummary/spyrit.core.nnet.Unet.contract", "_autosummary/spyrit.core.nnet.Unet.expans", "_autosummary/spyrit.core.nnet.Unet.final_block", "_autosummary/spyrit.core.nnet.Unet.forward", "_autosummary/spyrit.core.noise", "_autosummary/spyrit.core.noise.NoNoise", "_autosummary/spyrit.core.noise.NoNoise.forward", "_autosummary/spyrit.core.noise.Poisson", "_autosummary/spyrit.core.noise.Poisson.forward", "_autosummary/spyrit.core.noise.PoissonApproxGauss", "_autosummary/spyrit.core.noise.PoissonApproxGauss.forward", "_autosummary/spyrit.core.noise.PoissonApproxGaussSameNoise", "_autosummary/spyrit.core.noise.PoissonApproxGaussSameNoise.forward", "_autosummary/spyrit.core.prep", "_autosummary/spyrit.core.prep.DirectPoisson", "_autosummary/spyrit.core.prep.DirectPoisson.denormalize_expe", "_autosummary/spyrit.core.prep.DirectPoisson.forward", "_autosummary/spyrit.core.prep.DirectPoisson.sigma", "_autosummary/spyrit.core.prep.SplitPoisson", "_autosummary/spyrit.core.prep.SplitPoisson.denormalize_expe", "_autosummary/spyrit.core.prep.SplitPoisson.forward", "_autosummary/spyrit.core.prep.SplitPoisson.forward_expe", "_autosummary/spyrit.core.prep.SplitPoisson.set_expe", "_autosummary/spyrit.core.prep.SplitPoisson.sigma", "_autosummary/spyrit.core.prep.SplitPoisson.sigma_expe", "_autosummary/spyrit.core.prep.SplitPoisson.sigma_from_image", "_autosummary/spyrit.core.recon", "_autosummary/spyrit.core.recon.DCDRUNet", "_autosummary/spyrit.core.recon.DCDRUNet.acquire", "_autosummary/spyrit.core.recon.DCDRUNet.concat_noise_map", "_autosummary/spyrit.core.recon.DCDRUNet.forward", "_autosummary/spyrit.core.recon.DCDRUNet.reconstruct", "_autosummary/spyrit.core.recon.DCDRUNet.reconstruct_expe", "_autosummary/spyrit.core.recon.DCDRUNet.set_noise_level", "_autosummary/spyrit.core.recon.DCNet", "_autosummary/spyrit.core.recon.DCNet.acquire", "_autosummary/spyrit.core.recon.DCNet.forward", "_autosummary/spyrit.core.recon.DCNet.reconstruct", "_autosummary/spyrit.core.recon.DCNet.reconstruct_expe", "_autosummary/spyrit.core.recon.Denoise_layer", "_autosummary/spyrit.core.recon.Denoise_layer.forward", "_autosummary/spyrit.core.recon.Denoise_layer.reset_parameters", "_autosummary/spyrit.core.recon.Denoise_layer.tikho", "_autosummary/spyrit.core.recon.PinvNet", "_autosummary/spyrit.core.recon.PinvNet.acquire", "_autosummary/spyrit.core.recon.PinvNet.forward", "_autosummary/spyrit.core.recon.PinvNet.meas2img", "_autosummary/spyrit.core.recon.PinvNet.reconstruct", "_autosummary/spyrit.core.recon.PinvNet.reconstruct_expe", "_autosummary/spyrit.core.recon.PinvNet.reconstruct_pinv", "_autosummary/spyrit.core.recon.PositiveMonoIncreaseParameters", "_autosummary/spyrit.core.recon.PositiveMonoIncreaseParameters.forward", "_autosummary/spyrit.core.recon.PositiveParameters", "_autosummary/spyrit.core.recon.PositiveParameters.forward", "_autosummary/spyrit.core.recon.PseudoInverse", "_autosummary/spyrit.core.recon.PseudoInverse.forward", "_autosummary/spyrit.core.recon.TikhonovMeasurementPriorDiag", "_autosummary/spyrit.core.recon.TikhonovMeasurementPriorDiag.forward", "_autosummary/spyrit.core.recon.UPGD", "_autosummary/spyrit.core.recon.UPGD.acquire", "_autosummary/spyrit.core.recon.UPGD.forward", "_autosummary/spyrit.core.recon.UPGD.meas2img", "_autosummary/spyrit.core.recon.UPGD.reconstruct", "_autosummary/spyrit.core.recon.UPGD.reconstruct_expe", "_autosummary/spyrit.core.recon.UPGD.reconstruct_pinv", "_autosummary/spyrit.core.time", "_autosummary/spyrit.core.time.AffineDeformationField", "_autosummary/spyrit.core.time.AffineDeformationField.forward", "_autosummary/spyrit.core.time.AffineDeformationField.get_inv_mat_frames", "_autosummary/spyrit.core.time.AffineDeformationField.save_inv_grid_frames", "_autosummary/spyrit.core.time.AffineDeformationField.warp", "_autosummary/spyrit.core.time.DeformationField", "_autosummary/spyrit.core.time.DeformationField.forward", "_autosummary/spyrit.core.time.DeformationField.warp", "_autosummary/spyrit.core.time.format_params", "_autosummary/spyrit.core.train", "_autosummary/spyrit.core.train.Train_par", "_autosummary/spyrit.core.train.Train_par.get_loss", "_autosummary/spyrit.core.train.Train_par.plot", "_autosummary/spyrit.core.train.Train_par.plot_log", "_autosummary/spyrit.core.train.Train_par.set_loss", "_autosummary/spyrit.core.train.Train_par.title", "_autosummary/spyrit.core.train.Weight_Decay_Loss", "_autosummary/spyrit.core.train.Weight_Decay_Loss.forward", "_autosummary/spyrit.core.train.attr_removal", "_autosummary/spyrit.core.train.attr_transformation", "_autosummary/spyrit.core.train.boxplot", "_autosummary/spyrit.core.train.boxplotconsist", "_autosummary/spyrit.core.train.checkpoint", "_autosummary/spyrit.core.train.compare_model", "_autosummary/spyrit.core.train.count_memory", "_autosummary/spyrit.core.train.count_param", "_autosummary/spyrit.core.train.count_trainable_param", "_autosummary/spyrit.core.train.images_norm", "_autosummary/spyrit.core.train.imshow", "_autosummary/spyrit.core.train.load_net", "_autosummary/spyrit.core.train.multiplot", "_autosummary/spyrit.core.train.read_param", "_autosummary/spyrit.core.train.remove_model_attributes", "_autosummary/spyrit.core.train.rename_model_attributes", "_autosummary/spyrit.core.train.save_net", "_autosummary/spyrit.core.train.tb_profiler", "_autosummary/spyrit.core.train.tb_writer_add_image", "_autosummary/spyrit.core.train.tb_writer_add_scalar", "_autosummary/spyrit.core.train.tb_writer_init", "_autosummary/spyrit.core.train.train_model", "_autosummary/spyrit.core.train.train_model_supervised", "_autosummary/spyrit.core.train.visualize_conv_layers", "_autosummary/spyrit.core.train.visualize_model", "_autosummary/spyrit.misc", "_autosummary/spyrit.misc.data_visualisation", "_autosummary/spyrit.misc.data_visualisation.plot_im2D", "_autosummary/spyrit.misc.data_visualisation.show_image_and_infos", "_autosummary/spyrit.misc.data_visualisation.show_images_infos", "_autosummary/spyrit.misc.data_visualisation.simple_plot_2D", "_autosummary/spyrit.misc.disp", "_autosummary/spyrit.misc.disp.Multi_plots", "_autosummary/spyrit.misc.disp.add_colorbar", "_autosummary/spyrit.misc.disp.compare_video_frames", "_autosummary/spyrit.misc.disp.display_rgb_vid", "_autosummary/spyrit.misc.disp.display_vid", "_autosummary/spyrit.misc.disp.fitPlots", "_autosummary/spyrit.misc.disp.histogram", "_autosummary/spyrit.misc.disp.imagecomp", "_autosummary/spyrit.misc.disp.imagepanel", "_autosummary/spyrit.misc.disp.imagesc", "_autosummary/spyrit.misc.disp.noaxis", "_autosummary/spyrit.misc.disp.plot", "_autosummary/spyrit.misc.disp.pre_process_video", "_autosummary/spyrit.misc.disp.print_mean_std", "_autosummary/spyrit.misc.disp.string_mean_std", "_autosummary/spyrit.misc.disp.torch2numpy", "_autosummary/spyrit.misc.disp.uint8", "_autosummary/spyrit.misc.disp.vid2batch", "_autosummary/spyrit.misc.examples", "_autosummary/spyrit.misc.examples.circle", "_autosummary/spyrit.misc.examples.permutation_matrix", "_autosummary/spyrit.misc.examples.translation_matrix", "_autosummary/spyrit.misc.load_data", "_autosummary/spyrit.misc.load_data.Files_names", "_autosummary/spyrit.misc.load_data.load_data_Comp_1D_new", "_autosummary/spyrit.misc.load_data.load_data_Comp_1D_old", "_autosummary/spyrit.misc.load_data.load_data_recon_3D", "_autosummary/spyrit.misc.matrix_tools", "_autosummary/spyrit.misc.matrix_tools.Permutation_Matrix", "_autosummary/spyrit.misc.matrix_tools.Sum_coll", "_autosummary/spyrit.misc.matrix_tools.clean_out", "_autosummary/spyrit.misc.matrix_tools.compression_1D", "_autosummary/spyrit.misc.matrix_tools.data_conv_hadamard", "_autosummary/spyrit.misc.matrix_tools.expend_vect", "_autosummary/spyrit.misc.matrix_tools.normalize_by_median_mat_2D", "_autosummary/spyrit.misc.matrix_tools.normalize_mat_2D", "_autosummary/spyrit.misc.matrix_tools.reject_outliers", "_autosummary/spyrit.misc.matrix_tools.remove_offset_mat_2D", "_autosummary/spyrit.misc.matrix_tools.resize", "_autosummary/spyrit.misc.matrix_tools.smooth", "_autosummary/spyrit.misc.matrix_tools.stack_depth_matrice", "_autosummary/spyrit.misc.metrics", "_autosummary/spyrit.misc.metrics.batch_psnr", "_autosummary/spyrit.misc.metrics.batch_psnr_vid", "_autosummary/spyrit.misc.metrics.batch_ssim", "_autosummary/spyrit.misc.metrics.batch_ssim_vid", "_autosummary/spyrit.misc.metrics.compare_nets_unsupervised", "_autosummary/spyrit.misc.metrics.compare_video_nets_supervised", "_autosummary/spyrit.misc.metrics.dataset_meas", "_autosummary/spyrit.misc.metrics.dataset_psnr", "_autosummary/spyrit.misc.metrics.dataset_psnr_ssim", "_autosummary/spyrit.misc.metrics.dataset_psnr_ssim_fcl", "_autosummary/spyrit.misc.metrics.dataset_ssim", "_autosummary/spyrit.misc.metrics.print_mean_std", "_autosummary/spyrit.misc.metrics.psnr", "_autosummary/spyrit.misc.metrics.psnr_", "_autosummary/spyrit.misc.metrics.ssim", "_autosummary/spyrit.misc.pattern_choice", "_autosummary/spyrit.misc.pattern_choice.Basis_patterns", "_autosummary/spyrit.misc.pattern_choice.Basis_patterns.add_desired_pattern", "_autosummary/spyrit.misc.pattern_choice.Basis_patterns.add_desired_patterns", "_autosummary/spyrit.misc.pattern_choice.Basis_patterns.get_all_desired_pattern", "_autosummary/spyrit.misc.pattern_choice.Basis_patterns.get_desired_pattern", "_autosummary/spyrit.misc.pattern_choice.Basis_patterns.get_measurement_matrix", "_autosummary/spyrit.misc.pattern_choice.Basis_patterns.save_measurement_matrix", "_autosummary/spyrit.misc.pattern_choice.Basis_patterns.set_desired_pattern", "_autosummary/spyrit.misc.pattern_choice.Basis_patterns.set_measurement_matrix", "_autosummary/spyrit.misc.pattern_choice.Custom_patterns", "_autosummary/spyrit.misc.pattern_choice.Custom_patterns.add_desired_pattern", "_autosummary/spyrit.misc.pattern_choice.Custom_patterns.add_desired_patterns", "_autosummary/spyrit.misc.pattern_choice.Custom_patterns.get_all_desired_pattern", "_autosummary/spyrit.misc.pattern_choice.Custom_patterns.get_desired_pattern", "_autosummary/spyrit.misc.pattern_choice.Custom_patterns.get_measurement_matrix", "_autosummary/spyrit.misc.pattern_choice.Custom_patterns.save_measurement_matrix", "_autosummary/spyrit.misc.pattern_choice.Custom_patterns.set_desired_pattern", "_autosummary/spyrit.misc.pattern_choice.Custom_patterns.set_measurement_matrix", "_autosummary/spyrit.misc.pattern_choice.Daubechies", "_autosummary/spyrit.misc.pattern_choice.Daubechies_opt", "_autosummary/spyrit.misc.pattern_choice.Fourier", "_autosummary/spyrit.misc.pattern_choice.Fourier_opt", "_autosummary/spyrit.misc.pattern_choice.Haar", "_autosummary/spyrit.misc.pattern_choice.Haar_opt", "_autosummary/spyrit.misc.pattern_choice.Hadamard", "_autosummary/spyrit.misc.pattern_choice.Hadamard_opt", "_autosummary/spyrit.misc.pattern_choice.Optimized_patterns", "_autosummary/spyrit.misc.pattern_choice.Optimized_patterns.add_desired_pattern", "_autosummary/spyrit.misc.pattern_choice.Optimized_patterns.add_desired_patterns", "_autosummary/spyrit.misc.pattern_choice.Optimized_patterns.get_all_desired_pattern", "_autosummary/spyrit.misc.pattern_choice.Optimized_patterns.get_desired_pattern", "_autosummary/spyrit.misc.pattern_choice.Optimized_patterns.get_measurement_matrix", "_autosummary/spyrit.misc.pattern_choice.Optimized_patterns.save_measurement_matrix", "_autosummary/spyrit.misc.pattern_choice.Optimized_patterns.set_desired_pattern", "_autosummary/spyrit.misc.pattern_choice.Optimized_patterns.set_measurement_matrix", "_autosummary/spyrit.misc.pattern_choice.Patterns", "_autosummary/spyrit.misc.pattern_choice.Patterns.add_desired_patterns", "_autosummary/spyrit.misc.pattern_choice.Patterns.get_all_desired_pattern", "_autosummary/spyrit.misc.pattern_choice.Patterns.get_desired_pattern", "_autosummary/spyrit.misc.pattern_choice.Patterns.get_measurement_matrix", "_autosummary/spyrit.misc.pattern_choice.Patterns.save_measurement_matrix", "_autosummary/spyrit.misc.pattern_choice.Patterns.set_desired_pattern", "_autosummary/spyrit.misc.pattern_choice.Patterns.set_measurement_matrix", "_autosummary/spyrit.misc.pattern_choice.matrix2conv", "_autosummary/spyrit.misc.pattern_choice.shift", "_autosummary/spyrit.misc.pattern_choice.split", "_autosummary/spyrit.misc.sampling", "_autosummary/spyrit.misc.sampling.Permutation_Matrix", "_autosummary/spyrit.misc.sampling.img2mask", "_autosummary/spyrit.misc.sampling.img2meas", "_autosummary/spyrit.misc.sampling.meas2img", "_autosummary/spyrit.misc.sampling.meas2img2", "_autosummary/spyrit.misc.sampling.reorder", "_autosummary/spyrit.misc.statistics", "_autosummary/spyrit.misc.statistics.CenterCrop", "_autosummary/spyrit.misc.statistics.Cov2Var", "_autosummary/spyrit.misc.statistics.cov_walsh", "_autosummary/spyrit.misc.statistics.data_loaders_ImageNet", "_autosummary/spyrit.misc.statistics.data_loaders_stl10", "_autosummary/spyrit.misc.statistics.img2mask", "_autosummary/spyrit.misc.statistics.mea_abs_model", "_autosummary/spyrit.misc.statistics.mean_walsh", "_autosummary/spyrit.misc.statistics.optim_had", "_autosummary/spyrit.misc.statistics.stat_fwalsh_S", "_autosummary/spyrit.misc.statistics.stat_fwalsh_S_stl10", "_autosummary/spyrit.misc.statistics.stat_mean_coef_from_model", "_autosummary/spyrit.misc.statistics.stat_model", "_autosummary/spyrit.misc.statistics.stat_walsh", "_autosummary/spyrit.misc.statistics.stat_walsh_ImageNet", "_autosummary/spyrit.misc.statistics.stat_walsh_stl10", "_autosummary/spyrit.misc.statistics.transform_gray_norm", "_autosummary/spyrit.misc.walsh_hadamard", "_autosummary/spyrit.misc.walsh_hadamard.b2_to_b10", "_autosummary/spyrit.misc.walsh_hadamard.bit_reverse_traverse", "_autosummary/spyrit.misc.walsh_hadamard.bit_reversed_list", "_autosummary/spyrit.misc.walsh_hadamard.bit_reversed_matrix", "_autosummary/spyrit.misc.walsh_hadamard.fwalsh2_S", "_autosummary/spyrit.misc.walsh_hadamard.fwalsh2_S_torch", "_autosummary/spyrit.misc.walsh_hadamard.fwalsh_G", "_autosummary/spyrit.misc.walsh_hadamard.fwalsh_G_torch", "_autosummary/spyrit.misc.walsh_hadamard.fwalsh_S", "_autosummary/spyrit.misc.walsh_hadamard.fwalsh_S_torch", "_autosummary/spyrit.misc.walsh_hadamard.fwht", "_autosummary/spyrit.misc.walsh_hadamard.fwht_torch", "_autosummary/spyrit.misc.walsh_hadamard.get_bit_reversed_list", "_autosummary/spyrit.misc.walsh_hadamard.gray_code_list", "_autosummary/spyrit.misc.walsh_hadamard.gray_code_permutation", "_autosummary/spyrit.misc.walsh_hadamard.ifwalsh2_S", "_autosummary/spyrit.misc.walsh_hadamard.ifwalsh_S", "_autosummary/spyrit.misc.walsh_hadamard.iwalsh2", "_autosummary/spyrit.misc.walsh_hadamard.iwalsh2_S", "_autosummary/spyrit.misc.walsh_hadamard.iwalsh_S", "_autosummary/spyrit.misc.walsh_hadamard.iwalsh_S_matrix", "_autosummary/spyrit.misc.walsh_hadamard.perm_matrix_from_ind", "_autosummary/spyrit.misc.walsh_hadamard.sequency_perm", "_autosummary/spyrit.misc.walsh_hadamard.sequency_perm_ind", "_autosummary/spyrit.misc.walsh_hadamard.sequency_perm_matrix", "_autosummary/spyrit.misc.walsh_hadamard.sequency_perm_torch", "_autosummary/spyrit.misc.walsh_hadamard.walsh2", "_autosummary/spyrit.misc.walsh_hadamard.walsh2_S", "_autosummary/spyrit.misc.walsh_hadamard.walsh2_S_fold", "_autosummary/spyrit.misc.walsh_hadamard.walsh2_S_fold_torch", "_autosummary/spyrit.misc.walsh_hadamard.walsh2_S_matrix", "_autosummary/spyrit.misc.walsh_hadamard.walsh2_S_unfold", "_autosummary/spyrit.misc.walsh_hadamard.walsh2_S_unfold_torch", "_autosummary/spyrit.misc.walsh_hadamard.walsh2_matrix", "_autosummary/spyrit.misc.walsh_hadamard.walsh2_torch", "_autosummary/spyrit.misc.walsh_hadamard.walsh_G", "_autosummary/spyrit.misc.walsh_hadamard.walsh_G_matrix", "_autosummary/spyrit.misc.walsh_hadamard.walsh_S", "_autosummary/spyrit.misc.walsh_hadamard.walsh_S_matrix", "_autosummary/spyrit.misc.walsh_hadamard.walsh_matrix", "_autosummary/spyrit.misc.walsh_hadamard.walsh_torch", "gallery/index", "gallery/sg_execution_times", "gallery/tuto_01_acquisition_operators", "gallery/tuto_02_pseudoinverse_linear", "gallery/tuto_03_pseudoinverse_cnn_linear", "gallery/tuto_04_train_pseudoinverse_cnn_linear", "gallery/tuto_05_acquisition_split_measurements", "gallery/tuto_06_dcnet_split_measurements", "gallery/tuto_bonus_advanced_methods_colab", "index", "sg_execution_times"], "filenames": ["_autosummary/spyrit.core.rst", "_autosummary/spyrit.core.meas.rst", "_autosummary/spyrit.core.meas.DynamicHadamSplit.rst", "_autosummary/spyrit.core.meas.DynamicHadamSplit.forward.rst", "_autosummary/spyrit.core.meas.DynamicHadamSplit.forward_H.rst", "_autosummary/spyrit.core.meas.DynamicHadamSplit.get_H.rst", "_autosummary/spyrit.core.meas.DynamicHadamSplit.get_P.rst", "_autosummary/spyrit.core.meas.DynamicHadamSplit.get_Perm.rst", "_autosummary/spyrit.core.meas.DynamicLinear.rst", "_autosummary/spyrit.core.meas.DynamicLinear.forward.rst", "_autosummary/spyrit.core.meas.DynamicLinear.get_H.rst", "_autosummary/spyrit.core.meas.DynamicLinearSplit.rst", "_autosummary/spyrit.core.meas.DynamicLinearSplit.forward.rst", "_autosummary/spyrit.core.meas.DynamicLinearSplit.forward_H.rst", "_autosummary/spyrit.core.meas.DynamicLinearSplit.get_H.rst", "_autosummary/spyrit.core.meas.DynamicLinearSplit.get_P.rst", "_autosummary/spyrit.core.meas.HadamSplit.rst", "_autosummary/spyrit.core.meas.HadamSplit.adjoint.rst", "_autosummary/spyrit.core.meas.HadamSplit.forward.rst", "_autosummary/spyrit.core.meas.HadamSplit.forward_H.rst", "_autosummary/spyrit.core.meas.HadamSplit.get_H.rst", "_autosummary/spyrit.core.meas.HadamSplit.get_H_T.rst", "_autosummary/spyrit.core.meas.HadamSplit.get_H_pinv.rst", "_autosummary/spyrit.core.meas.HadamSplit.get_P.rst", "_autosummary/spyrit.core.meas.HadamSplit.get_Perm.rst", "_autosummary/spyrit.core.meas.HadamSplit.inverse.rst", "_autosummary/spyrit.core.meas.HadamSplit.pinv.rst", "_autosummary/spyrit.core.meas.HadamSplit.set_H_pinv.rst", "_autosummary/spyrit.core.meas.Linear.rst", "_autosummary/spyrit.core.meas.Linear.adjoint.rst", "_autosummary/spyrit.core.meas.Linear.forward.rst", "_autosummary/spyrit.core.meas.Linear.get_H.rst", "_autosummary/spyrit.core.meas.Linear.get_H_T.rst", "_autosummary/spyrit.core.meas.Linear.get_H_pinv.rst", "_autosummary/spyrit.core.meas.Linear.pinv.rst", "_autosummary/spyrit.core.meas.Linear.set_H_pinv.rst", "_autosummary/spyrit.core.meas.LinearSplit.rst", "_autosummary/spyrit.core.meas.LinearSplit.adjoint.rst", "_autosummary/spyrit.core.meas.LinearSplit.forward.rst", "_autosummary/spyrit.core.meas.LinearSplit.forward_H.rst", "_autosummary/spyrit.core.meas.LinearSplit.get_H.rst", "_autosummary/spyrit.core.meas.LinearSplit.get_H_T.rst", "_autosummary/spyrit.core.meas.LinearSplit.get_H_pinv.rst", "_autosummary/spyrit.core.meas.LinearSplit.get_P.rst", "_autosummary/spyrit.core.meas.LinearSplit.pinv.rst", "_autosummary/spyrit.core.meas.LinearSplit.set_H_pinv.rst", "_autosummary/spyrit.core.nnet.rst", "_autosummary/spyrit.core.nnet.ConvNet.rst", "_autosummary/spyrit.core.nnet.ConvNet.forward.rst", "_autosummary/spyrit.core.nnet.ConvNetBN.rst", "_autosummary/spyrit.core.nnet.ConvNetBN.forward.rst", "_autosummary/spyrit.core.nnet.DConvNet.rst", "_autosummary/spyrit.core.nnet.DConvNet.forward.rst", "_autosummary/spyrit.core.nnet.Identity.rst", "_autosummary/spyrit.core.nnet.Identity.forward.rst", "_autosummary/spyrit.core.nnet.List_denoi.rst", "_autosummary/spyrit.core.nnet.List_denoi.forward.rst", "_autosummary/spyrit.core.nnet.Unet.rst", "_autosummary/spyrit.core.nnet.Unet.bottle_neck.rst", "_autosummary/spyrit.core.nnet.Unet.concat.rst", "_autosummary/spyrit.core.nnet.Unet.contract.rst", "_autosummary/spyrit.core.nnet.Unet.expans.rst", "_autosummary/spyrit.core.nnet.Unet.final_block.rst", "_autosummary/spyrit.core.nnet.Unet.forward.rst", "_autosummary/spyrit.core.noise.rst", "_autosummary/spyrit.core.noise.NoNoise.rst", "_autosummary/spyrit.core.noise.NoNoise.forward.rst", "_autosummary/spyrit.core.noise.Poisson.rst", "_autosummary/spyrit.core.noise.Poisson.forward.rst", "_autosummary/spyrit.core.noise.PoissonApproxGauss.rst", "_autosummary/spyrit.core.noise.PoissonApproxGauss.forward.rst", "_autosummary/spyrit.core.noise.PoissonApproxGaussSameNoise.rst", "_autosummary/spyrit.core.noise.PoissonApproxGaussSameNoise.forward.rst", "_autosummary/spyrit.core.prep.rst", "_autosummary/spyrit.core.prep.DirectPoisson.rst", "_autosummary/spyrit.core.prep.DirectPoisson.denormalize_expe.rst", "_autosummary/spyrit.core.prep.DirectPoisson.forward.rst", "_autosummary/spyrit.core.prep.DirectPoisson.sigma.rst", "_autosummary/spyrit.core.prep.SplitPoisson.rst", "_autosummary/spyrit.core.prep.SplitPoisson.denormalize_expe.rst", "_autosummary/spyrit.core.prep.SplitPoisson.forward.rst", "_autosummary/spyrit.core.prep.SplitPoisson.forward_expe.rst", "_autosummary/spyrit.core.prep.SplitPoisson.set_expe.rst", "_autosummary/spyrit.core.prep.SplitPoisson.sigma.rst", "_autosummary/spyrit.core.prep.SplitPoisson.sigma_expe.rst", "_autosummary/spyrit.core.prep.SplitPoisson.sigma_from_image.rst", "_autosummary/spyrit.core.recon.rst", "_autosummary/spyrit.core.recon.DCDRUNet.rst", "_autosummary/spyrit.core.recon.DCDRUNet.acquire.rst", "_autosummary/spyrit.core.recon.DCDRUNet.concat_noise_map.rst", "_autosummary/spyrit.core.recon.DCDRUNet.forward.rst", "_autosummary/spyrit.core.recon.DCDRUNet.reconstruct.rst", "_autosummary/spyrit.core.recon.DCDRUNet.reconstruct_expe.rst", "_autosummary/spyrit.core.recon.DCDRUNet.set_noise_level.rst", "_autosummary/spyrit.core.recon.DCNet.rst", "_autosummary/spyrit.core.recon.DCNet.acquire.rst", "_autosummary/spyrit.core.recon.DCNet.forward.rst", "_autosummary/spyrit.core.recon.DCNet.reconstruct.rst", "_autosummary/spyrit.core.recon.DCNet.reconstruct_expe.rst", "_autosummary/spyrit.core.recon.Denoise_layer.rst", "_autosummary/spyrit.core.recon.Denoise_layer.forward.rst", "_autosummary/spyrit.core.recon.Denoise_layer.reset_parameters.rst", "_autosummary/spyrit.core.recon.Denoise_layer.tikho.rst", "_autosummary/spyrit.core.recon.PinvNet.rst", "_autosummary/spyrit.core.recon.PinvNet.acquire.rst", "_autosummary/spyrit.core.recon.PinvNet.forward.rst", "_autosummary/spyrit.core.recon.PinvNet.meas2img.rst", "_autosummary/spyrit.core.recon.PinvNet.reconstruct.rst", "_autosummary/spyrit.core.recon.PinvNet.reconstruct_expe.rst", "_autosummary/spyrit.core.recon.PinvNet.reconstruct_pinv.rst", "_autosummary/spyrit.core.recon.PositiveMonoIncreaseParameters.rst", "_autosummary/spyrit.core.recon.PositiveMonoIncreaseParameters.forward.rst", "_autosummary/spyrit.core.recon.PositiveParameters.rst", "_autosummary/spyrit.core.recon.PositiveParameters.forward.rst", "_autosummary/spyrit.core.recon.PseudoInverse.rst", "_autosummary/spyrit.core.recon.PseudoInverse.forward.rst", "_autosummary/spyrit.core.recon.TikhonovMeasurementPriorDiag.rst", "_autosummary/spyrit.core.recon.TikhonovMeasurementPriorDiag.forward.rst", "_autosummary/spyrit.core.recon.UPGD.rst", "_autosummary/spyrit.core.recon.UPGD.acquire.rst", "_autosummary/spyrit.core.recon.UPGD.forward.rst", "_autosummary/spyrit.core.recon.UPGD.meas2img.rst", "_autosummary/spyrit.core.recon.UPGD.reconstruct.rst", "_autosummary/spyrit.core.recon.UPGD.reconstruct_expe.rst", "_autosummary/spyrit.core.recon.UPGD.reconstruct_pinv.rst", "_autosummary/spyrit.core.time.rst", "_autosummary/spyrit.core.time.AffineDeformationField.rst", "_autosummary/spyrit.core.time.AffineDeformationField.forward.rst", "_autosummary/spyrit.core.time.AffineDeformationField.get_inv_mat_frames.rst", "_autosummary/spyrit.core.time.AffineDeformationField.save_inv_grid_frames.rst", "_autosummary/spyrit.core.time.AffineDeformationField.warp.rst", "_autosummary/spyrit.core.time.DeformationField.rst", "_autosummary/spyrit.core.time.DeformationField.forward.rst", "_autosummary/spyrit.core.time.DeformationField.warp.rst", "_autosummary/spyrit.core.time.format_params.rst", "_autosummary/spyrit.core.train.rst", "_autosummary/spyrit.core.train.Train_par.rst", "_autosummary/spyrit.core.train.Train_par.get_loss.rst", "_autosummary/spyrit.core.train.Train_par.plot.rst", "_autosummary/spyrit.core.train.Train_par.plot_log.rst", "_autosummary/spyrit.core.train.Train_par.set_loss.rst", "_autosummary/spyrit.core.train.Train_par.title.rst", "_autosummary/spyrit.core.train.Weight_Decay_Loss.rst", "_autosummary/spyrit.core.train.Weight_Decay_Loss.forward.rst", "_autosummary/spyrit.core.train.attr_removal.rst", "_autosummary/spyrit.core.train.attr_transformation.rst", "_autosummary/spyrit.core.train.boxplot.rst", "_autosummary/spyrit.core.train.boxplotconsist.rst", "_autosummary/spyrit.core.train.checkpoint.rst", "_autosummary/spyrit.core.train.compare_model.rst", "_autosummary/spyrit.core.train.count_memory.rst", "_autosummary/spyrit.core.train.count_param.rst", "_autosummary/spyrit.core.train.count_trainable_param.rst", "_autosummary/spyrit.core.train.images_norm.rst", "_autosummary/spyrit.core.train.imshow.rst", "_autosummary/spyrit.core.train.load_net.rst", "_autosummary/spyrit.core.train.multiplot.rst", "_autosummary/spyrit.core.train.read_param.rst", "_autosummary/spyrit.core.train.remove_model_attributes.rst", "_autosummary/spyrit.core.train.rename_model_attributes.rst", "_autosummary/spyrit.core.train.save_net.rst", "_autosummary/spyrit.core.train.tb_profiler.rst", "_autosummary/spyrit.core.train.tb_writer_add_image.rst", "_autosummary/spyrit.core.train.tb_writer_add_scalar.rst", "_autosummary/spyrit.core.train.tb_writer_init.rst", "_autosummary/spyrit.core.train.train_model.rst", "_autosummary/spyrit.core.train.train_model_supervised.rst", "_autosummary/spyrit.core.train.visualize_conv_layers.rst", "_autosummary/spyrit.core.train.visualize_model.rst", "_autosummary/spyrit.misc.rst", "_autosummary/spyrit.misc.data_visualisation.rst", "_autosummary/spyrit.misc.data_visualisation.plot_im2D.rst", "_autosummary/spyrit.misc.data_visualisation.show_image_and_infos.rst", "_autosummary/spyrit.misc.data_visualisation.show_images_infos.rst", "_autosummary/spyrit.misc.data_visualisation.simple_plot_2D.rst", "_autosummary/spyrit.misc.disp.rst", "_autosummary/spyrit.misc.disp.Multi_plots.rst", "_autosummary/spyrit.misc.disp.add_colorbar.rst", "_autosummary/spyrit.misc.disp.compare_video_frames.rst", "_autosummary/spyrit.misc.disp.display_rgb_vid.rst", "_autosummary/spyrit.misc.disp.display_vid.rst", "_autosummary/spyrit.misc.disp.fitPlots.rst", "_autosummary/spyrit.misc.disp.histogram.rst", "_autosummary/spyrit.misc.disp.imagecomp.rst", "_autosummary/spyrit.misc.disp.imagepanel.rst", "_autosummary/spyrit.misc.disp.imagesc.rst", "_autosummary/spyrit.misc.disp.noaxis.rst", "_autosummary/spyrit.misc.disp.plot.rst", "_autosummary/spyrit.misc.disp.pre_process_video.rst", "_autosummary/spyrit.misc.disp.print_mean_std.rst", "_autosummary/spyrit.misc.disp.string_mean_std.rst", "_autosummary/spyrit.misc.disp.torch2numpy.rst", "_autosummary/spyrit.misc.disp.uint8.rst", "_autosummary/spyrit.misc.disp.vid2batch.rst", "_autosummary/spyrit.misc.examples.rst", "_autosummary/spyrit.misc.examples.circle.rst", "_autosummary/spyrit.misc.examples.permutation_matrix.rst", "_autosummary/spyrit.misc.examples.translation_matrix.rst", "_autosummary/spyrit.misc.load_data.rst", "_autosummary/spyrit.misc.load_data.Files_names.rst", "_autosummary/spyrit.misc.load_data.load_data_Comp_1D_new.rst", "_autosummary/spyrit.misc.load_data.load_data_Comp_1D_old.rst", "_autosummary/spyrit.misc.load_data.load_data_recon_3D.rst", "_autosummary/spyrit.misc.matrix_tools.rst", "_autosummary/spyrit.misc.matrix_tools.Permutation_Matrix.rst", "_autosummary/spyrit.misc.matrix_tools.Sum_coll.rst", "_autosummary/spyrit.misc.matrix_tools.clean_out.rst", "_autosummary/spyrit.misc.matrix_tools.compression_1D.rst", "_autosummary/spyrit.misc.matrix_tools.data_conv_hadamard.rst", "_autosummary/spyrit.misc.matrix_tools.expend_vect.rst", "_autosummary/spyrit.misc.matrix_tools.normalize_by_median_mat_2D.rst", "_autosummary/spyrit.misc.matrix_tools.normalize_mat_2D.rst", "_autosummary/spyrit.misc.matrix_tools.reject_outliers.rst", "_autosummary/spyrit.misc.matrix_tools.remove_offset_mat_2D.rst", "_autosummary/spyrit.misc.matrix_tools.resize.rst", "_autosummary/spyrit.misc.matrix_tools.smooth.rst", "_autosummary/spyrit.misc.matrix_tools.stack_depth_matrice.rst", "_autosummary/spyrit.misc.metrics.rst", "_autosummary/spyrit.misc.metrics.batch_psnr.rst", "_autosummary/spyrit.misc.metrics.batch_psnr_vid.rst", "_autosummary/spyrit.misc.metrics.batch_ssim.rst", "_autosummary/spyrit.misc.metrics.batch_ssim_vid.rst", "_autosummary/spyrit.misc.metrics.compare_nets_unsupervised.rst", "_autosummary/spyrit.misc.metrics.compare_video_nets_supervised.rst", "_autosummary/spyrit.misc.metrics.dataset_meas.rst", "_autosummary/spyrit.misc.metrics.dataset_psnr.rst", "_autosummary/spyrit.misc.metrics.dataset_psnr_ssim.rst", "_autosummary/spyrit.misc.metrics.dataset_psnr_ssim_fcl.rst", "_autosummary/spyrit.misc.metrics.dataset_ssim.rst", "_autosummary/spyrit.misc.metrics.print_mean_std.rst", "_autosummary/spyrit.misc.metrics.psnr.rst", "_autosummary/spyrit.misc.metrics.psnr_.rst", "_autosummary/spyrit.misc.metrics.ssim.rst", "_autosummary/spyrit.misc.pattern_choice.rst", "_autosummary/spyrit.misc.pattern_choice.Basis_patterns.rst", "_autosummary/spyrit.misc.pattern_choice.Basis_patterns.add_desired_pattern.rst", "_autosummary/spyrit.misc.pattern_choice.Basis_patterns.add_desired_patterns.rst", "_autosummary/spyrit.misc.pattern_choice.Basis_patterns.get_all_desired_pattern.rst", "_autosummary/spyrit.misc.pattern_choice.Basis_patterns.get_desired_pattern.rst", "_autosummary/spyrit.misc.pattern_choice.Basis_patterns.get_measurement_matrix.rst", "_autosummary/spyrit.misc.pattern_choice.Basis_patterns.save_measurement_matrix.rst", "_autosummary/spyrit.misc.pattern_choice.Basis_patterns.set_desired_pattern.rst", "_autosummary/spyrit.misc.pattern_choice.Basis_patterns.set_measurement_matrix.rst", "_autosummary/spyrit.misc.pattern_choice.Custom_patterns.rst", "_autosummary/spyrit.misc.pattern_choice.Custom_patterns.add_desired_pattern.rst", "_autosummary/spyrit.misc.pattern_choice.Custom_patterns.add_desired_patterns.rst", "_autosummary/spyrit.misc.pattern_choice.Custom_patterns.get_all_desired_pattern.rst", "_autosummary/spyrit.misc.pattern_choice.Custom_patterns.get_desired_pattern.rst", "_autosummary/spyrit.misc.pattern_choice.Custom_patterns.get_measurement_matrix.rst", "_autosummary/spyrit.misc.pattern_choice.Custom_patterns.save_measurement_matrix.rst", "_autosummary/spyrit.misc.pattern_choice.Custom_patterns.set_desired_pattern.rst", "_autosummary/spyrit.misc.pattern_choice.Custom_patterns.set_measurement_matrix.rst", "_autosummary/spyrit.misc.pattern_choice.Daubechies.rst", "_autosummary/spyrit.misc.pattern_choice.Daubechies_opt.rst", "_autosummary/spyrit.misc.pattern_choice.Fourier.rst", "_autosummary/spyrit.misc.pattern_choice.Fourier_opt.rst", "_autosummary/spyrit.misc.pattern_choice.Haar.rst", "_autosummary/spyrit.misc.pattern_choice.Haar_opt.rst", "_autosummary/spyrit.misc.pattern_choice.Hadamard.rst", "_autosummary/spyrit.misc.pattern_choice.Hadamard_opt.rst", "_autosummary/spyrit.misc.pattern_choice.Optimized_patterns.rst", "_autosummary/spyrit.misc.pattern_choice.Optimized_patterns.add_desired_pattern.rst", "_autosummary/spyrit.misc.pattern_choice.Optimized_patterns.add_desired_patterns.rst", "_autosummary/spyrit.misc.pattern_choice.Optimized_patterns.get_all_desired_pattern.rst", "_autosummary/spyrit.misc.pattern_choice.Optimized_patterns.get_desired_pattern.rst", "_autosummary/spyrit.misc.pattern_choice.Optimized_patterns.get_measurement_matrix.rst", "_autosummary/spyrit.misc.pattern_choice.Optimized_patterns.save_measurement_matrix.rst", "_autosummary/spyrit.misc.pattern_choice.Optimized_patterns.set_desired_pattern.rst", "_autosummary/spyrit.misc.pattern_choice.Optimized_patterns.set_measurement_matrix.rst", "_autosummary/spyrit.misc.pattern_choice.Patterns.rst", "_autosummary/spyrit.misc.pattern_choice.Patterns.add_desired_patterns.rst", "_autosummary/spyrit.misc.pattern_choice.Patterns.get_all_desired_pattern.rst", "_autosummary/spyrit.misc.pattern_choice.Patterns.get_desired_pattern.rst", "_autosummary/spyrit.misc.pattern_choice.Patterns.get_measurement_matrix.rst", "_autosummary/spyrit.misc.pattern_choice.Patterns.save_measurement_matrix.rst", "_autosummary/spyrit.misc.pattern_choice.Patterns.set_desired_pattern.rst", "_autosummary/spyrit.misc.pattern_choice.Patterns.set_measurement_matrix.rst", "_autosummary/spyrit.misc.pattern_choice.matrix2conv.rst", "_autosummary/spyrit.misc.pattern_choice.shift.rst", "_autosummary/spyrit.misc.pattern_choice.split.rst", "_autosummary/spyrit.misc.sampling.rst", "_autosummary/spyrit.misc.sampling.Permutation_Matrix.rst", "_autosummary/spyrit.misc.sampling.img2mask.rst", "_autosummary/spyrit.misc.sampling.img2meas.rst", "_autosummary/spyrit.misc.sampling.meas2img.rst", "_autosummary/spyrit.misc.sampling.meas2img2.rst", "_autosummary/spyrit.misc.sampling.reorder.rst", "_autosummary/spyrit.misc.statistics.rst", "_autosummary/spyrit.misc.statistics.CenterCrop.rst", "_autosummary/spyrit.misc.statistics.Cov2Var.rst", "_autosummary/spyrit.misc.statistics.cov_walsh.rst", "_autosummary/spyrit.misc.statistics.data_loaders_ImageNet.rst", "_autosummary/spyrit.misc.statistics.data_loaders_stl10.rst", "_autosummary/spyrit.misc.statistics.img2mask.rst", "_autosummary/spyrit.misc.statistics.mea_abs_model.rst", "_autosummary/spyrit.misc.statistics.mean_walsh.rst", "_autosummary/spyrit.misc.statistics.optim_had.rst", "_autosummary/spyrit.misc.statistics.stat_fwalsh_S.rst", "_autosummary/spyrit.misc.statistics.stat_fwalsh_S_stl10.rst", "_autosummary/spyrit.misc.statistics.stat_mean_coef_from_model.rst", "_autosummary/spyrit.misc.statistics.stat_model.rst", "_autosummary/spyrit.misc.statistics.stat_walsh.rst", "_autosummary/spyrit.misc.statistics.stat_walsh_ImageNet.rst", "_autosummary/spyrit.misc.statistics.stat_walsh_stl10.rst", "_autosummary/spyrit.misc.statistics.transform_gray_norm.rst", "_autosummary/spyrit.misc.walsh_hadamard.rst", "_autosummary/spyrit.misc.walsh_hadamard.b2_to_b10.rst", "_autosummary/spyrit.misc.walsh_hadamard.bit_reverse_traverse.rst", "_autosummary/spyrit.misc.walsh_hadamard.bit_reversed_list.rst", "_autosummary/spyrit.misc.walsh_hadamard.bit_reversed_matrix.rst", "_autosummary/spyrit.misc.walsh_hadamard.fwalsh2_S.rst", "_autosummary/spyrit.misc.walsh_hadamard.fwalsh2_S_torch.rst", "_autosummary/spyrit.misc.walsh_hadamard.fwalsh_G.rst", "_autosummary/spyrit.misc.walsh_hadamard.fwalsh_G_torch.rst", "_autosummary/spyrit.misc.walsh_hadamard.fwalsh_S.rst", "_autosummary/spyrit.misc.walsh_hadamard.fwalsh_S_torch.rst", "_autosummary/spyrit.misc.walsh_hadamard.fwht.rst", "_autosummary/spyrit.misc.walsh_hadamard.fwht_torch.rst", "_autosummary/spyrit.misc.walsh_hadamard.get_bit_reversed_list.rst", "_autosummary/spyrit.misc.walsh_hadamard.gray_code_list.rst", "_autosummary/spyrit.misc.walsh_hadamard.gray_code_permutation.rst", "_autosummary/spyrit.misc.walsh_hadamard.ifwalsh2_S.rst", "_autosummary/spyrit.misc.walsh_hadamard.ifwalsh_S.rst", "_autosummary/spyrit.misc.walsh_hadamard.iwalsh2.rst", "_autosummary/spyrit.misc.walsh_hadamard.iwalsh2_S.rst", "_autosummary/spyrit.misc.walsh_hadamard.iwalsh_S.rst", "_autosummary/spyrit.misc.walsh_hadamard.iwalsh_S_matrix.rst", "_autosummary/spyrit.misc.walsh_hadamard.perm_matrix_from_ind.rst", "_autosummary/spyrit.misc.walsh_hadamard.sequency_perm.rst", "_autosummary/spyrit.misc.walsh_hadamard.sequency_perm_ind.rst", "_autosummary/spyrit.misc.walsh_hadamard.sequency_perm_matrix.rst", "_autosummary/spyrit.misc.walsh_hadamard.sequency_perm_torch.rst", "_autosummary/spyrit.misc.walsh_hadamard.walsh2.rst", "_autosummary/spyrit.misc.walsh_hadamard.walsh2_S.rst", "_autosummary/spyrit.misc.walsh_hadamard.walsh2_S_fold.rst", "_autosummary/spyrit.misc.walsh_hadamard.walsh2_S_fold_torch.rst", "_autosummary/spyrit.misc.walsh_hadamard.walsh2_S_matrix.rst", "_autosummary/spyrit.misc.walsh_hadamard.walsh2_S_unfold.rst", "_autosummary/spyrit.misc.walsh_hadamard.walsh2_S_unfold_torch.rst", "_autosummary/spyrit.misc.walsh_hadamard.walsh2_matrix.rst", "_autosummary/spyrit.misc.walsh_hadamard.walsh2_torch.rst", "_autosummary/spyrit.misc.walsh_hadamard.walsh_G.rst", "_autosummary/spyrit.misc.walsh_hadamard.walsh_G_matrix.rst", "_autosummary/spyrit.misc.walsh_hadamard.walsh_S.rst", "_autosummary/spyrit.misc.walsh_hadamard.walsh_S_matrix.rst", "_autosummary/spyrit.misc.walsh_hadamard.walsh_matrix.rst", "_autosummary/spyrit.misc.walsh_hadamard.walsh_torch.rst", "gallery/index.rst", "gallery/sg_execution_times.rst", "gallery/tuto_01_acquisition_operators.rst", "gallery/tuto_02_pseudoinverse_linear.rst", "gallery/tuto_03_pseudoinverse_cnn_linear.rst", "gallery/tuto_04_train_pseudoinverse_cnn_linear.rst", "gallery/tuto_05_acquisition_split_measurements.rst", "gallery/tuto_06_dcnet_split_measurements.rst", "gallery/tuto_bonus_advanced_methods_colab.rst", "index.rst", "sg_execution_times.rst"], "titles": ["spyrit.core", "spyrit.core.meas", "spyrit.core.meas.DynamicHadamSplit", "spyrit.core.meas.DynamicHadamSplit.forward", "spyrit.core.meas.DynamicHadamSplit.forward_H", "spyrit.core.meas.DynamicHadamSplit.get_H", "spyrit.core.meas.DynamicHadamSplit.get_P", "spyrit.core.meas.DynamicHadamSplit.get_Perm", "spyrit.core.meas.DynamicLinear", "spyrit.core.meas.DynamicLinear.forward", "spyrit.core.meas.DynamicLinear.get_H", "spyrit.core.meas.DynamicLinearSplit", "spyrit.core.meas.DynamicLinearSplit.forward", "spyrit.core.meas.DynamicLinearSplit.forward_H", "spyrit.core.meas.DynamicLinearSplit.get_H", "spyrit.core.meas.DynamicLinearSplit.get_P", "spyrit.core.meas.HadamSplit", "spyrit.core.meas.HadamSplit.adjoint", "spyrit.core.meas.HadamSplit.forward", "spyrit.core.meas.HadamSplit.forward_H", "spyrit.core.meas.HadamSplit.get_H", "spyrit.core.meas.HadamSplit.get_H_T", "spyrit.core.meas.HadamSplit.get_H_pinv", "spyrit.core.meas.HadamSplit.get_P", "spyrit.core.meas.HadamSplit.get_Perm", "spyrit.core.meas.HadamSplit.inverse", "spyrit.core.meas.HadamSplit.pinv", "spyrit.core.meas.HadamSplit.set_H_pinv", "spyrit.core.meas.Linear", "spyrit.core.meas.Linear.adjoint", "spyrit.core.meas.Linear.forward", "spyrit.core.meas.Linear.get_H", "spyrit.core.meas.Linear.get_H_T", "spyrit.core.meas.Linear.get_H_pinv", "spyrit.core.meas.Linear.pinv", "spyrit.core.meas.Linear.set_H_pinv", "spyrit.core.meas.LinearSplit", "spyrit.core.meas.LinearSplit.adjoint", "spyrit.core.meas.LinearSplit.forward", "spyrit.core.meas.LinearSplit.forward_H", "spyrit.core.meas.LinearSplit.get_H", "spyrit.core.meas.LinearSplit.get_H_T", "spyrit.core.meas.LinearSplit.get_H_pinv", "spyrit.core.meas.LinearSplit.get_P", "spyrit.core.meas.LinearSplit.pinv", "spyrit.core.meas.LinearSplit.set_H_pinv", "spyrit.core.nnet", "spyrit.core.nnet.ConvNet", "spyrit.core.nnet.ConvNet.forward", "spyrit.core.nnet.ConvNetBN", "spyrit.core.nnet.ConvNetBN.forward", "spyrit.core.nnet.DConvNet", "spyrit.core.nnet.DConvNet.forward", "spyrit.core.nnet.Identity", "spyrit.core.nnet.Identity.forward", "spyrit.core.nnet.List_denoi", "spyrit.core.nnet.List_denoi.forward", "spyrit.core.nnet.Unet", "spyrit.core.nnet.Unet.bottle_neck", "spyrit.core.nnet.Unet.concat", "spyrit.core.nnet.Unet.contract", "spyrit.core.nnet.Unet.expans", "spyrit.core.nnet.Unet.final_block", "spyrit.core.nnet.Unet.forward", "spyrit.core.noise", "spyrit.core.noise.NoNoise", "spyrit.core.noise.NoNoise.forward", "spyrit.core.noise.Poisson", "spyrit.core.noise.Poisson.forward", "spyrit.core.noise.PoissonApproxGauss", "spyrit.core.noise.PoissonApproxGauss.forward", "spyrit.core.noise.PoissonApproxGaussSameNoise", "spyrit.core.noise.PoissonApproxGaussSameNoise.forward", "spyrit.core.prep", "spyrit.core.prep.DirectPoisson", "spyrit.core.prep.DirectPoisson.denormalize_expe", "spyrit.core.prep.DirectPoisson.forward", "spyrit.core.prep.DirectPoisson.sigma", "spyrit.core.prep.SplitPoisson", "spyrit.core.prep.SplitPoisson.denormalize_expe", "spyrit.core.prep.SplitPoisson.forward", "spyrit.core.prep.SplitPoisson.forward_expe", "spyrit.core.prep.SplitPoisson.set_expe", "spyrit.core.prep.SplitPoisson.sigma", "spyrit.core.prep.SplitPoisson.sigma_expe", "spyrit.core.prep.SplitPoisson.sigma_from_image", "spyrit.core.recon", "spyrit.core.recon.DCDRUNet", "spyrit.core.recon.DCDRUNet.acquire", "spyrit.core.recon.DCDRUNet.concat_noise_map", "spyrit.core.recon.DCDRUNet.forward", "spyrit.core.recon.DCDRUNet.reconstruct", "spyrit.core.recon.DCDRUNet.reconstruct_expe", "spyrit.core.recon.DCDRUNet.set_noise_level", "spyrit.core.recon.DCNet", "spyrit.core.recon.DCNet.acquire", "spyrit.core.recon.DCNet.forward", "spyrit.core.recon.DCNet.reconstruct", "spyrit.core.recon.DCNet.reconstruct_expe", "spyrit.core.recon.Denoise_layer", "spyrit.core.recon.Denoise_layer.forward", "spyrit.core.recon.Denoise_layer.reset_parameters", "spyrit.core.recon.Denoise_layer.tikho", "spyrit.core.recon.PinvNet", "spyrit.core.recon.PinvNet.acquire", "spyrit.core.recon.PinvNet.forward", "spyrit.core.recon.PinvNet.meas2img", "spyrit.core.recon.PinvNet.reconstruct", "spyrit.core.recon.PinvNet.reconstruct_expe", "spyrit.core.recon.PinvNet.reconstruct_pinv", "spyrit.core.recon.PositiveMonoIncreaseParameters", "spyrit.core.recon.PositiveMonoIncreaseParameters.forward", "spyrit.core.recon.PositiveParameters", "spyrit.core.recon.PositiveParameters.forward", "spyrit.core.recon.PseudoInverse", "spyrit.core.recon.PseudoInverse.forward", "spyrit.core.recon.TikhonovMeasurementPriorDiag", "spyrit.core.recon.TikhonovMeasurementPriorDiag.forward", "spyrit.core.recon.UPGD", "spyrit.core.recon.UPGD.acquire", "spyrit.core.recon.UPGD.forward", "spyrit.core.recon.UPGD.meas2img", "spyrit.core.recon.UPGD.reconstruct", "spyrit.core.recon.UPGD.reconstruct_expe", "spyrit.core.recon.UPGD.reconstruct_pinv", "spyrit.core.time", "spyrit.core.time.AffineDeformationField", "spyrit.core.time.AffineDeformationField.forward", "spyrit.core.time.AffineDeformationField.get_inv_mat_frames", "spyrit.core.time.AffineDeformationField.save_inv_grid_frames", "spyrit.core.time.AffineDeformationField.warp", "spyrit.core.time.DeformationField", "spyrit.core.time.DeformationField.forward", "spyrit.core.time.DeformationField.warp", "spyrit.core.time.format_params", "spyrit.core.train", "spyrit.core.train.Train_par", "spyrit.core.train.Train_par.get_loss", "spyrit.core.train.Train_par.plot", "spyrit.core.train.Train_par.plot_log", "spyrit.core.train.Train_par.set_loss", "spyrit.core.train.Train_par.title", "spyrit.core.train.Weight_Decay_Loss", "spyrit.core.train.Weight_Decay_Loss.forward", "spyrit.core.train.attr_removal", "spyrit.core.train.attr_transformation", "spyrit.core.train.boxplot", "spyrit.core.train.boxplotconsist", "spyrit.core.train.checkpoint", "spyrit.core.train.compare_model", "spyrit.core.train.count_memory", "spyrit.core.train.count_param", "spyrit.core.train.count_trainable_param", "spyrit.core.train.images_norm", "spyrit.core.train.imshow", "spyrit.core.train.load_net", "spyrit.core.train.multiplot", "spyrit.core.train.read_param", "spyrit.core.train.remove_model_attributes", "spyrit.core.train.rename_model_attributes", "spyrit.core.train.save_net", "spyrit.core.train.tb_profiler", "spyrit.core.train.tb_writer_add_image", "spyrit.core.train.tb_writer_add_scalar", "spyrit.core.train.tb_writer_init", "spyrit.core.train.train_model", "spyrit.core.train.train_model_supervised", "spyrit.core.train.visualize_conv_layers", "spyrit.core.train.visualize_model", "spyrit.misc", "spyrit.misc.data_visualisation", "spyrit.misc.data_visualisation.plot_im2D", "spyrit.misc.data_visualisation.show_image_and_infos", "spyrit.misc.data_visualisation.show_images_infos", "spyrit.misc.data_visualisation.simple_plot_2D", "spyrit.misc.disp", "spyrit.misc.disp.Multi_plots", "spyrit.misc.disp.add_colorbar", "spyrit.misc.disp.compare_video_frames", "spyrit.misc.disp.display_rgb_vid", "spyrit.misc.disp.display_vid", "spyrit.misc.disp.fitPlots", "spyrit.misc.disp.histogram", "spyrit.misc.disp.imagecomp", "spyrit.misc.disp.imagepanel", "spyrit.misc.disp.imagesc", "spyrit.misc.disp.noaxis", "spyrit.misc.disp.plot", "spyrit.misc.disp.pre_process_video", "spyrit.misc.disp.print_mean_std", "spyrit.misc.disp.string_mean_std", "spyrit.misc.disp.torch2numpy", "spyrit.misc.disp.uint8", "spyrit.misc.disp.vid2batch", "spyrit.misc.examples", "spyrit.misc.examples.circle", "spyrit.misc.examples.permutation_matrix", "spyrit.misc.examples.translation_matrix", "spyrit.misc.load_data", "spyrit.misc.load_data.Files_names", "spyrit.misc.load_data.load_data_Comp_1D_new", "spyrit.misc.load_data.load_data_Comp_1D_old", "spyrit.misc.load_data.load_data_recon_3D", "spyrit.misc.matrix_tools", "spyrit.misc.matrix_tools.Permutation_Matrix", "spyrit.misc.matrix_tools.Sum_coll", "spyrit.misc.matrix_tools.clean_out", "spyrit.misc.matrix_tools.compression_1D", "spyrit.misc.matrix_tools.data_conv_hadamard", "spyrit.misc.matrix_tools.expend_vect", "spyrit.misc.matrix_tools.normalize_by_median_mat_2D", "spyrit.misc.matrix_tools.normalize_mat_2D", "spyrit.misc.matrix_tools.reject_outliers", "spyrit.misc.matrix_tools.remove_offset_mat_2D", "spyrit.misc.matrix_tools.resize", "spyrit.misc.matrix_tools.smooth", "spyrit.misc.matrix_tools.stack_depth_matrice", "spyrit.misc.metrics", "spyrit.misc.metrics.batch_psnr", "spyrit.misc.metrics.batch_psnr_vid", "spyrit.misc.metrics.batch_ssim", "spyrit.misc.metrics.batch_ssim_vid", "spyrit.misc.metrics.compare_nets_unsupervised", "spyrit.misc.metrics.compare_video_nets_supervised", "spyrit.misc.metrics.dataset_meas", "spyrit.misc.metrics.dataset_psnr", "spyrit.misc.metrics.dataset_psnr_ssim", "spyrit.misc.metrics.dataset_psnr_ssim_fcl", "spyrit.misc.metrics.dataset_ssim", "spyrit.misc.metrics.print_mean_std", "spyrit.misc.metrics.psnr", "spyrit.misc.metrics.psnr_", "spyrit.misc.metrics.ssim", "spyrit.misc.pattern_choice", "spyrit.misc.pattern_choice.Basis_patterns", "spyrit.misc.pattern_choice.Basis_patterns.add_desired_pattern", "spyrit.misc.pattern_choice.Basis_patterns.add_desired_patterns", "spyrit.misc.pattern_choice.Basis_patterns.get_all_desired_pattern", "spyrit.misc.pattern_choice.Basis_patterns.get_desired_pattern", "spyrit.misc.pattern_choice.Basis_patterns.get_measurement_matrix", "spyrit.misc.pattern_choice.Basis_patterns.save_measurement_matrix", "spyrit.misc.pattern_choice.Basis_patterns.set_desired_pattern", "spyrit.misc.pattern_choice.Basis_patterns.set_measurement_matrix", "spyrit.misc.pattern_choice.Custom_patterns", "spyrit.misc.pattern_choice.Custom_patterns.add_desired_pattern", "spyrit.misc.pattern_choice.Custom_patterns.add_desired_patterns", "spyrit.misc.pattern_choice.Custom_patterns.get_all_desired_pattern", "spyrit.misc.pattern_choice.Custom_patterns.get_desired_pattern", "spyrit.misc.pattern_choice.Custom_patterns.get_measurement_matrix", "spyrit.misc.pattern_choice.Custom_patterns.save_measurement_matrix", "spyrit.misc.pattern_choice.Custom_patterns.set_desired_pattern", "spyrit.misc.pattern_choice.Custom_patterns.set_measurement_matrix", "spyrit.misc.pattern_choice.Daubechies", "spyrit.misc.pattern_choice.Daubechies_opt", "spyrit.misc.pattern_choice.Fourier", "spyrit.misc.pattern_choice.Fourier_opt", "spyrit.misc.pattern_choice.Haar", "spyrit.misc.pattern_choice.Haar_opt", "spyrit.misc.pattern_choice.Hadamard", "spyrit.misc.pattern_choice.Hadamard_opt", "spyrit.misc.pattern_choice.Optimized_patterns", "spyrit.misc.pattern_choice.Optimized_patterns.add_desired_pattern", "spyrit.misc.pattern_choice.Optimized_patterns.add_desired_patterns", "spyrit.misc.pattern_choice.Optimized_patterns.get_all_desired_pattern", "spyrit.misc.pattern_choice.Optimized_patterns.get_desired_pattern", "spyrit.misc.pattern_choice.Optimized_patterns.get_measurement_matrix", "spyrit.misc.pattern_choice.Optimized_patterns.save_measurement_matrix", "spyrit.misc.pattern_choice.Optimized_patterns.set_desired_pattern", "spyrit.misc.pattern_choice.Optimized_patterns.set_measurement_matrix", "spyrit.misc.pattern_choice.Patterns", "spyrit.misc.pattern_choice.Patterns.add_desired_patterns", "spyrit.misc.pattern_choice.Patterns.get_all_desired_pattern", "spyrit.misc.pattern_choice.Patterns.get_desired_pattern", "spyrit.misc.pattern_choice.Patterns.get_measurement_matrix", "spyrit.misc.pattern_choice.Patterns.save_measurement_matrix", "spyrit.misc.pattern_choice.Patterns.set_desired_pattern", "spyrit.misc.pattern_choice.Patterns.set_measurement_matrix", "spyrit.misc.pattern_choice.matrix2conv", "spyrit.misc.pattern_choice.shift", "spyrit.misc.pattern_choice.split", "spyrit.misc.sampling", "spyrit.misc.sampling.Permutation_Matrix", "spyrit.misc.sampling.img2mask", "spyrit.misc.sampling.img2meas", "spyrit.misc.sampling.meas2img", "spyrit.misc.sampling.meas2img2", "spyrit.misc.sampling.reorder", "spyrit.misc.statistics", "spyrit.misc.statistics.CenterCrop", "spyrit.misc.statistics.Cov2Var", "spyrit.misc.statistics.cov_walsh", "spyrit.misc.statistics.data_loaders_ImageNet", "spyrit.misc.statistics.data_loaders_stl10", "spyrit.misc.statistics.img2mask", "spyrit.misc.statistics.mea_abs_model", "spyrit.misc.statistics.mean_walsh", "spyrit.misc.statistics.optim_had", "spyrit.misc.statistics.stat_fwalsh_S", "spyrit.misc.statistics.stat_fwalsh_S_stl10", "spyrit.misc.statistics.stat_mean_coef_from_model", "spyrit.misc.statistics.stat_model", "spyrit.misc.statistics.stat_walsh", "spyrit.misc.statistics.stat_walsh_ImageNet", "spyrit.misc.statistics.stat_walsh_stl10", "spyrit.misc.statistics.transform_gray_norm", "spyrit.misc.walsh_hadamard", "spyrit.misc.walsh_hadamard.b2_to_b10", "spyrit.misc.walsh_hadamard.bit_reverse_traverse", "spyrit.misc.walsh_hadamard.bit_reversed_list", "spyrit.misc.walsh_hadamard.bit_reversed_matrix", "spyrit.misc.walsh_hadamard.fwalsh2_S", "spyrit.misc.walsh_hadamard.fwalsh2_S_torch", "spyrit.misc.walsh_hadamard.fwalsh_G", "spyrit.misc.walsh_hadamard.fwalsh_G_torch", "spyrit.misc.walsh_hadamard.fwalsh_S", "spyrit.misc.walsh_hadamard.fwalsh_S_torch", "spyrit.misc.walsh_hadamard.fwht", "spyrit.misc.walsh_hadamard.fwht_torch", "spyrit.misc.walsh_hadamard.get_bit_reversed_list", "spyrit.misc.walsh_hadamard.gray_code_list", "spyrit.misc.walsh_hadamard.gray_code_permutation", "spyrit.misc.walsh_hadamard.ifwalsh2_S", "spyrit.misc.walsh_hadamard.ifwalsh_S", "spyrit.misc.walsh_hadamard.iwalsh2", "spyrit.misc.walsh_hadamard.iwalsh2_S", "spyrit.misc.walsh_hadamard.iwalsh_S", "spyrit.misc.walsh_hadamard.iwalsh_S_matrix", "spyrit.misc.walsh_hadamard.perm_matrix_from_ind", "spyrit.misc.walsh_hadamard.sequency_perm", "spyrit.misc.walsh_hadamard.sequency_perm_ind", "spyrit.misc.walsh_hadamard.sequency_perm_matrix", "spyrit.misc.walsh_hadamard.sequency_perm_torch", "spyrit.misc.walsh_hadamard.walsh2", "spyrit.misc.walsh_hadamard.walsh2_S", "spyrit.misc.walsh_hadamard.walsh2_S_fold", "spyrit.misc.walsh_hadamard.walsh2_S_fold_torch", "spyrit.misc.walsh_hadamard.walsh2_S_matrix", "spyrit.misc.walsh_hadamard.walsh2_S_unfold", "spyrit.misc.walsh_hadamard.walsh2_S_unfold_torch", "spyrit.misc.walsh_hadamard.walsh2_matrix", "spyrit.misc.walsh_hadamard.walsh2_torch", "spyrit.misc.walsh_hadamard.walsh_G", "spyrit.misc.walsh_hadamard.walsh_G_matrix", "spyrit.misc.walsh_hadamard.walsh_S", "spyrit.misc.walsh_hadamard.walsh_S_matrix", "spyrit.misc.walsh_hadamard.walsh_matrix", "spyrit.misc.walsh_hadamard.walsh_torch", "Tutorials", "Computation times", "01. Acquisition operators", "02. Pseudoinverse solution from linear measurements", "03. Pseudoinverse solution + CNN denoising", "04. Train pseudoinverse solution + CNN denoising", "05. Acquisition operators (advanced) - Split measurements and subsampling", "06. DCNet solution for split measurements", "Bonus. Advanced methods - Colab", "SPyRiT\u2019s documentation", "Computation times"], "terms": {"modul": [0, 8, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 63, 65, 74, 78, 94, 99, 103, 111, 112, 113, 114, 116, 127, 131, 132, 142, 143, 158, 159, 169, 305, 349, 350, 353, 354, 356], "class": [1, 2, 3, 4, 8, 9, 11, 12, 13, 16, 28, 36, 46, 47, 49, 51, 53, 55, 57, 64, 65, 67, 69, 71, 73, 74, 78, 86, 87, 94, 99, 103, 110, 112, 114, 115, 116, 118, 125, 126, 129, 130, 131, 135, 136, 142, 233, 234, 243, 260, 269, 287, 288, 349, 350, 351, 352, 353, 354, 356], "m": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 66, 68, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 87, 88, 90, 91, 94, 95, 96, 97, 99, 101, 103, 104, 105, 106, 107, 109, 115, 116, 117, 119, 120, 121, 124, 206, 212, 253, 255, 257, 259, 260, 267, 282, 283, 284, 285, 293, 328, 337, 346, 349, 350, 351, 352, 353, 354, 356], "int": [2, 8, 11, 16, 28, 36, 75, 79, 99, 116, 128, 130, 133, 134, 282, 288, 304, 306, 326, 329, 330, 336, 339, 342, 344, 345, 352, 353], "h": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 81, 83, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 103, 104, 105, 106, 107, 108, 109, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 207, 208, 316, 323, 326, 332, 339, 340, 342, 344, 346, 349, 350, 351, 352, 353, 354], "ord": [2, 16, 25, 87, 88, 90, 91, 94, 95, 96, 97, 103, 104, 105, 106, 107, 109, 117, 119, 120, 121, 124, 293, 353, 354], "ndarrai": [2, 11, 16, 28, 36, 231, 281, 282, 283, 284, 285, 286, 310, 312, 314, 316, 317, 321, 322, 323, 324, 325, 326, 328, 330, 332, 333, 334, 336, 337, 339, 341, 342, 343, 344, 345], "sourc": [2, 7, 8, 9, 10, 11, 12, 13, 15, 16, 25, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 122, 126, 128, 129, 130, 131, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 241, 243, 244, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355], "base": [2, 8, 11, 16, 28, 36, 47, 49, 51, 53, 55, 57, 65, 67, 69, 71, 74, 78, 87, 94, 99, 103, 110, 112, 114, 116, 118, 126, 131, 136, 142, 234, 243, 260, 269, 288, 306, 349, 352, 353, 355, 356], "dynamiclinearsplit": [2, 3, 36], "simul": [2, 3, 4, 8, 9, 11, 12, 13, 16, 28, 36, 65, 66, 67, 68, 69, 70, 71, 72, 81, 88, 95, 104, 119, 347, 349, 350, 351, 352, 353, 354, 356], "measur": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 65, 66, 67, 68, 69, 70, 71, 72, 74, 76, 77, 78, 80, 81, 83, 84, 85, 88, 91, 92, 95, 97, 98, 99, 102, 104, 106, 107, 108, 109, 114, 115, 116, 117, 119, 121, 122, 123, 124, 282, 283, 284, 285, 286, 347, 348, 355, 357], "move": [2, 8, 11], "object": [2, 8, 11, 136, 149, 167, 168, 176, 178, 180, 183, 184, 185, 288], "us": [2, 3, 4, 8, 9, 11, 12, 13, 16, 18, 19, 28, 36, 38, 39, 65, 66, 67, 69, 71, 74, 78, 92, 98, 115, 125, 128, 129, 130, 131, 133, 134, 286, 305, 311, 312, 313, 314, 315, 317, 347, 349, 350, 351, 352, 353, 354, 356], "posit": [2, 3, 4, 11, 12, 13, 16, 18, 36, 38, 74, 78, 126, 131, 177, 347, 349, 350, 351, 352, 353], "neg": [2, 3, 4, 11, 12, 13, 16, 36, 347], "compon": [2, 4, 11, 13, 16, 36, 350, 351, 352, 353], "hadamard": [2, 16, 25, 83, 84, 296, 305, 316, 317, 323, 332, 339, 340, 342, 344, 345, 346, 350, 351, 352, 353, 354], "matrix": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 25, 27, 28, 31, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 45, 114, 116, 117, 126, 128, 129, 204, 277, 281, 282, 283, 284, 285, 286, 289, 293, 312, 314, 316, 323, 324, 326, 328, 329, 330, 331, 332, 334, 335, 336, 339, 340, 342, 344, 345, 346, 350, 351, 352, 353, 354, 356], "comput": [2, 3, 4, 8, 9, 11, 12, 13, 16, 18, 19, 26, 27, 28, 34, 35, 36, 38, 39, 44, 45, 48, 50, 52, 54, 56, 63, 65, 69, 71, 74, 75, 76, 78, 79, 80, 81, 92, 98, 111, 113, 114, 115, 117, 126, 127, 129, 130, 132, 134, 143, 230, 231, 232, 296, 314, 316, 317, 346, 349, 350, 351, 352, 353, 356], "linear": [2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 26, 27, 36, 37, 38, 39, 40, 41, 42, 44, 45, 65, 66, 67, 68, 69, 70, 71, 72, 74, 76, 114, 116, 347, 348, 349, 351, 352, 353, 354, 356, 357], "from": [2, 8, 11, 16, 18, 19, 27, 28, 35, 36, 38, 39, 45, 65, 67, 68, 69, 70, 71, 72, 75, 79, 81, 82, 89, 99, 101, 106, 114, 116, 121, 126, 129, 130, 131, 159, 168, 204, 281, 282, 283, 284, 285, 289, 293, 302, 303, 316, 329, 330, 337, 338, 347, 348, 349, 351, 352, 353, 354, 356, 357], "incom": [2, 8, 11, 16, 17, 18, 19, 28, 29, 30, 36, 37, 38, 39, 65, 67, 69, 71, 99, 100, 102, 353], "imag": [2, 3, 4, 8, 9, 11, 12, 13, 16, 18, 19, 21, 25, 26, 27, 28, 30, 32, 34, 35, 36, 38, 39, 41, 44, 45, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 103, 104, 105, 106, 108, 114, 116, 117, 119, 120, 121, 123, 125, 126, 129, 130, 131, 133, 134, 153, 162, 168, 185, 230, 231, 232, 283, 284, 285, 286, 288, 291, 292, 296, 298, 302, 304, 311, 321, 323, 324, 332, 337, 338, 340, 347], "y": [2, 3, 4, 8, 9, 11, 12, 13, 16, 17, 18, 19, 25, 26, 28, 29, 30, 34, 36, 37, 38, 39, 44, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 79, 99, 100, 102, 106, 114, 115, 116, 117, 121, 129, 130, 131, 133, 143, 187, 215, 312, 313, 314, 316, 317, 321, 322, 324, 325, 335, 346, 349, 350, 351, 352, 353, 354, 356], "px": [2, 3, 11, 12, 16, 18, 36, 38, 85], "where": [2, 3, 4, 6, 8, 9, 11, 12, 13, 15, 16, 18, 19, 21, 23, 27, 28, 30, 32, 35, 36, 38, 39, 41, 43, 45, 74, 75, 76, 77, 78, 79, 80, 81, 84, 99, 101, 102, 114, 116, 117, 129, 130, 131, 133, 134, 204, 281, 282, 283, 284, 285, 286, 316, 317, 334, 335, 349, 350, 351, 352, 353, 356], "p": [2, 3, 6, 11, 12, 15, 16, 18, 23, 36, 38, 43, 67, 69, 71, 281, 349, 353, 356], "i": [2, 3, 4, 6, 8, 9, 11, 12, 13, 15, 16, 17, 18, 19, 21, 23, 25, 26, 27, 28, 29, 30, 32, 34, 35, 36, 37, 38, 39, 41, 43, 44, 45, 65, 67, 69, 71, 74, 75, 76, 77, 78, 79, 81, 83, 84, 85, 87, 92, 98, 99, 100, 102, 108, 114, 116, 117, 122, 123, 125, 126, 128, 129, 130, 131, 133, 134, 158, 159, 179, 180, 285, 286, 290, 295, 301, 303, 305, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 332, 334, 335, 337, 346, 347, 349, 350, 351, 352, 353, 354, 356], "oper": [2, 3, 4, 8, 9, 11, 12, 13, 16, 28, 36, 65, 66, 67, 68, 69, 70, 71, 72, 74, 78, 80, 81, 85, 87, 94, 103, 115, 117, 347, 348, 356, 357], "entri": [2, 16, 353], "x": [2, 3, 4, 8, 9, 11, 12, 13, 16, 17, 18, 19, 25, 26, 28, 29, 30, 34, 36, 37, 38, 39, 44, 48, 50, 52, 54, 56, 63, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 129, 130, 131, 133, 143, 187, 189, 190, 229, 298, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 328, 331, 332, 333, 334, 335, 337, 338, 341, 343, 346, 349, 350, 351, 352, 353, 354, 356], "batch": [2, 3, 4, 8, 9, 11, 12, 13, 16, 17, 18, 19, 25, 26, 28, 29, 30, 34, 36, 37, 38, 39, 44, 66, 68, 70, 71, 72, 75, 76, 77, 79, 80, 81, 83, 84, 85, 103, 115, 117, 128, 129, 130, 133, 286, 346], "vector": [2, 3, 4, 8, 9, 11, 12, 13, 16, 17, 18, 19, 26, 28, 29, 30, 34, 36, 37, 38, 39, 44, 68, 70, 72, 74, 76, 77, 78, 80, 81, 88, 91, 92, 95, 97, 98, 99, 104, 106, 107, 108, 109, 114, 115, 116, 117, 119, 121, 122, 123, 124, 128, 283, 284, 285, 286, 312, 314, 316, 334, 346, 349, 350, 351, 353, 354, 356], "repres": [2, 8, 11, 16, 28, 36, 76, 126, 349, 353, 356], "motion": [2, 3, 4, 8, 9, 11, 12, 13], "pictur": [2, 3, 4, 8, 9, 11, 12, 13], "The": [2, 3, 4, 8, 9, 11, 12, 13, 16, 27, 28, 35, 36, 45, 65, 67, 69, 71, 77, 81, 83, 85, 92, 98, 99, 100, 101, 102, 108, 116, 122, 123, 125, 126, 128, 129, 130, 131, 133, 134, 158, 159, 291, 292, 323, 332, 350, 351, 352, 354, 355, 356], "reli": [2, 16, 353], "shape": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 66, 68, 70, 72, 75, 76, 77, 79, 80, 81, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 126, 128, 129, 130, 131, 133, 176, 179, 180, 204, 284, 285, 298, 311, 313, 315, 317, 335, 338, 346, 349, 350, 351, 352, 353, 354], "n": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 66, 68, 70, 72, 85, 100, 102, 115, 116, 117, 128, 129, 130, 131, 181, 204, 208, 281, 282, 283, 284, 285, 298, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 324, 325, 326, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 353, 356], "number": [2, 3, 4, 8, 9, 11, 12, 13, 16, 18, 19, 21, 25, 27, 28, 30, 32, 35, 36, 38, 39, 41, 45, 76, 80, 81, 82, 99, 102, 103, 116, 128, 129, 130, 131, 133, 134, 282, 286, 306, 311, 312, 313, 314, 315, 316, 317, 346, 349, 350, 351, 352, 353, 354], "pixel": [2, 3, 4, 8, 9, 11, 12, 13, 16, 18, 19, 21, 25, 27, 28, 30, 32, 35, 36, 38, 39, 41, 45, 125, 126, 129, 130, 131, 133, 321, 324, 334, 335, 337, 350, 352, 353, 354], "le": [2, 16, 284, 285, 353], "obtain": [2, 3, 11, 12, 16, 18, 36, 38, 74, 78, 347, 353, 354], "select": [2, 16, 349, 350, 351, 352, 353, 354], "re": [2, 16, 356], "order": [2, 16, 128, 288, 293, 305, 311, 312, 313, 314, 315, 316, 317, 322, 323, 326, 328, 329, 330, 331, 332, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 351, 352, 353, 354], "subsampl": [2, 16, 286, 293, 347, 348, 350, 351, 354, 357], "row": [2, 16, 328, 350, 353, 354], "full": [2, 16, 90, 96, 105, 120, 349, 350, 351, 352, 353, 354, 355, 356], "f": [2, 16, 68, 70, 72, 116, 117, 177, 311, 312, 313, 314, 315, 316, 317, 321, 322, 324, 325, 346, 349, 350, 351, 352, 353, 354, 356], "2": [2, 3, 4, 9, 12, 13, 16, 25, 28, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 117, 119, 120, 121, 124, 126, 128, 129, 130, 131, 134, 161, 177, 206, 212, 231, 252, 253, 269, 281, 283, 284, 285, 286, 298, 306, 310, 311, 312, 313, 314, 315, 316, 317, 321, 324, 326, 331, 333, 334, 335, 337, 338, 340, 346, 347, 349, 350, 351, 352, 353, 354], "must": [2, 3, 4, 8, 9, 11, 12, 13, 16, 130, 133, 336, 339, 352], "power": [2, 16, 298, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 326, 329, 330, 332, 333, 334, 335, 336, 339, 341, 342, 343, 344, 345], "split": [2, 3, 11, 12, 16, 18, 36, 38, 78, 80, 81, 84, 118, 234, 243, 260, 269, 347, 348, 355, 357], "begin": [2, 3, 11, 12, 16, 18, 36, 38, 117, 353], "bmatrix": [2, 3, 11, 12, 16, 18, 36, 38, 117, 353], "h_": [2, 3, 11, 12, 16, 18, 25, 36, 38, 78, 353], "end": [2, 3, 11, 12, 16, 18, 36, 38, 117, 130, 134, 347, 349, 350, 351, 352, 353, 354, 355], "max": [2, 3, 11, 12, 16, 18, 36, 38, 68, 70, 72, 81, 353], "0": [2, 3, 11, 12, 16, 18, 36, 38, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 79, 80, 81, 82, 83, 85, 87, 88, 90, 91, 93, 94, 95, 96, 97, 103, 104, 105, 106, 107, 109, 117, 119, 120, 121, 124, 126, 128, 129, 130, 131, 133, 134, 136, 138, 139, 156, 159, 165, 166, 177, 254, 255, 256, 257, 258, 259, 282, 291, 292, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 324, 331, 333, 337, 338, 346, 348, 349, 350, 351, 352, 353, 354, 357], "arg": [2, 3, 4, 8, 9, 11, 12, 13, 16, 17, 18, 19, 25, 26, 27, 28, 29, 30, 34, 35, 36, 37, 38, 39, 44, 45, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 115, 116, 117, 119, 120, 121, 122, 123, 124, 126, 128, 129, 130, 131, 133, 134, 204, 231, 281, 282, 283, 284, 285, 286, 288, 291, 292, 298, 302, 303, 304, 306, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346], "height": [2, 8, 11, 16, 28, 36, 75, 79, 103], "assum": [2, 8, 11, 16, 28, 36, 65, 67, 69, 71, 74, 78, 99, 117], "squar": [2, 8, 11, 16, 28, 36, 126, 131, 286, 288, 323, 352], "so": [2, 16, 352], "np": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 21, 22, 23, 28, 31, 32, 33, 40, 41, 42, 43, 65, 67, 68, 69, 70, 71, 72, 74, 76, 78, 80, 81, 85, 87, 88, 90, 91, 94, 95, 96, 97, 103, 104, 105, 106, 107, 109, 114, 115, 116, 117, 119, 120, 121, 124, 126, 128, 129, 130, 134, 231, 281, 282, 283, 284, 285, 286, 310, 312, 313, 314, 316, 317, 321, 322, 323, 324, 325, 326, 328, 330, 332, 333, 334, 336, 337, 339, 341, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354], "permut": [2, 16, 204, 281, 286, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 328, 329, 330, 331, 333, 350, 353], "g": [2, 16, 25, 69, 71, 115, 286, 312, 313, 341, 342, 352, 356], "t": [2, 16, 17, 29, 37, 126, 128, 129, 130, 311, 312, 313, 314, 315, 316, 317, 324, 325, 346, 353, 354, 356], "see": [2, 16, 28, 36, 65, 67, 69, 71, 74, 78, 87, 94, 100, 102, 103, 117, 305, 346, 349, 350, 351, 352, 353, 356], "sampl": [2, 16, 71, 126, 131, 164, 204, 349, 350, 351, 352, 353, 354], "submodul": [2, 16, 65, 67, 69, 71, 349, 353, 356], "attribut": [2, 5, 6, 8, 10, 11, 14, 15, 16, 20, 23, 28, 31, 36, 40, 43, 87, 94, 99, 101, 103, 116, 125, 126, 129, 130, 131, 133, 158, 159], "torch": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 66, 68, 70, 72, 75, 76, 77, 79, 80, 81, 83, 84, 85, 87, 88, 90, 91, 94, 95, 96, 97, 99, 100, 102, 103, 104, 105, 106, 107, 109, 114, 115, 117, 119, 120, 121, 124, 126, 128, 129, 130, 131, 133, 164, 298, 311, 313, 315, 317, 331, 335, 338, 340, 346, 349, 350, 351, 352, 353, 354], "nn": [2, 8, 11, 16, 36, 116, 130, 131, 133, 158, 159, 350, 351, 352, 353, 354, 356], "paramet": [2, 8, 11, 16, 27, 28, 35, 36, 45, 82, 122, 126, 128, 130, 134, 158, 159, 352, 354, 356], "It": [2, 8, 11, 16, 28, 36, 74, 75, 76, 78, 79, 80, 81, 126, 129, 130, 131, 133, 285, 347, 352, 353, 354, 356], "initi": [2, 3, 4, 6, 8, 9, 11, 12, 13, 15, 16, 23, 28, 36, 43, 87, 94, 99, 101, 103, 116], "h_pinv": [2, 16, 27, 28, 35, 36, 45], "pseudo": [2, 16, 22, 26, 27, 28, 33, 34, 35, 36, 42, 44, 45, 103, 114, 115, 347, 353, 354], "invers": [2, 16, 22, 26, 27, 28, 33, 34, 35, 36, 42, 44, 45, 103, 114, 115, 117, 125, 126, 128, 129, 130, 131, 133, 321, 322, 323, 324, 325, 326, 347, 353, 354], "dagger": [2, 16, 26, 28, 34, 36, 44, 81, 114], "frac": [2, 16, 65, 67, 69, 71, 74, 75, 76, 77, 78, 79, 80, 81, 83, 85, 349, 353], "1": [2, 16, 17, 18, 19, 25, 26, 28, 29, 30, 34, 37, 38, 39, 44, 57, 58, 60, 61, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 133, 134, 161, 177, 180, 252, 253, 254, 255, 256, 257, 258, 259, 269, 282, 290, 291, 292, 295, 301, 302, 304, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 324, 325, 326, 331, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 346, 347, 349, 350, 351, 352, 353, 354], "2m": [2, 3, 6, 11, 12, 15, 16, 18, 23, 36, 38, 43, 80, 81, 88, 91, 92, 95, 97, 98, 104, 106, 107, 108, 109, 119, 121, 122, 123, 124], "perm": [2, 16, 65, 67, 68, 69, 70, 71, 72, 78, 80, 81, 85, 114, 115, 350, 351, 352, 353, 354], "accord": [2, 16, 125, 126, 130, 131, 133], "descreas": [2, 16], "valu": [2, 3, 4, 11, 12, 13, 16, 18, 27, 28, 35, 36, 38, 45, 93, 99, 101, 204, 231, 281, 282, 283, 284, 285, 349, 350, 351, 352, 353, 354], "ha": [2, 3, 4, 12, 13, 16, 17, 18, 19, 26, 29, 30, 34, 37, 38, 39, 44, 129, 133, 277, 349, 351, 353, 354], "perform": [2, 8, 11, 16, 27, 28, 35, 36, 45, 48, 50, 52, 54, 56, 63, 111, 113, 127, 132, 143, 350, 351, 352, 353, 354, 356], "w": [2, 8, 11, 16, 28, 36, 75, 79, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 103, 104, 105, 106, 107, 108, 109, 119, 120, 121, 122, 123, 124, 131, 133, 340, 349, 350, 351, 352, 353, 354], "width": [2, 8, 11, 16, 28, 36, 75, 79, 103], "e": [2, 3, 4, 8, 9, 11, 12, 13, 16, 28, 36, 92, 98, 108, 115, 123, 126, 131, 286, 316, 317, 346, 349, 353, 356], "For": [2, 8, 11, 347, 349, 350, 353, 354], "each": [2, 8, 11, 17, 18, 19, 26, 29, 30, 34, 37, 38, 39, 44, 82, 126, 130, 133, 277, 347, 352], "call": [2, 8, 11, 28, 36, 48, 50, 52, 54, 56, 63, 81, 111, 113, 125, 126, 127, 132, 143], "exactli": [2, 3, 4, 8, 9, 11, 12, 13], "mani": [2, 3, 4, 8, 9, 11, 12, 13], "ar": [2, 3, 4, 8, 9, 11, 12, 13, 27, 35, 45, 65, 67, 69, 71, 74, 78, 84, 92, 98, 99, 101, 108, 123, 125, 126, 129, 130, 131, 133, 134, 286, 291, 292, 346, 349, 350, 351, 353, 354, 356], "transform": [2, 16, 17, 18, 19, 25, 29, 30, 37, 38, 39, 74, 78, 100, 102, 126, 128, 129, 291, 292, 298, 304, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 332, 333, 334, 335, 337, 338, 340, 341, 343, 345, 346, 349, 350, 351, 352, 353, 354], "fx": [2, 16], "benefit": [2, 16], "fast": [2, 16, 298, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 324, 333, 346], "algorithm": [2, 16], "well": [2, 16, 356], "exampl": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 90, 91, 94, 95, 96, 97, 99, 103, 104, 105, 106, 107, 109, 114, 115, 116, 117, 119, 120, 121, 124, 126, 128, 129, 130, 131, 133, 134, 158, 159, 177, 298, 302, 303, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 324, 325, 326, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 348, 350, 351, 352, 353, 354, 355, 357], "random": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 22, 23, 28, 31, 32, 33, 40, 41, 42, 43, 65, 67, 68, 69, 70, 71, 72, 74, 76, 78, 80, 81, 85, 87, 88, 90, 91, 94, 95, 96, 97, 114, 115, 116, 117, 290, 295, 301, 312, 314, 316, 317, 325, 341, 343], "32": [2, 16, 25, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 81, 84, 85, 114, 115, 116, 117, 302], "meas_op": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 65, 67, 68, 69, 70, 71, 72, 74, 76, 78, 80, 81, 85, 114, 115, 117, 349, 350, 351, 352, 353, 354], "hadamsplitdynam": 2, "400": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 65, 66, 67, 68, 69, 70, 71, 72, 74, 76, 77, 78, 80, 81, 83, 84, 85, 114, 115, 116], "print": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 66, 68, 70, 72, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 87, 88, 90, 91, 94, 95, 96, 97, 99, 103, 104, 105, 106, 107, 109, 114, 115, 119, 120, 121, 124, 128, 129, 130, 131, 133, 311, 312, 313, 314, 315, 316, 317, 321, 322, 324, 325, 326, 329, 330, 331, 334, 335, 338, 342, 344, 345, 346, 349, 350, 351, 352, 353, 354], "1024": [2, 16, 25, 114, 115, 117, 298, 302, 303], "size": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 66, 68, 70, 72, 75, 76, 77, 79, 80, 81, 83, 84, 85, 87, 88, 90, 91, 94, 95, 96, 97, 99, 103, 104, 105, 106, 107, 109, 110, 112, 114, 115, 117, 119, 120, 121, 124, 126, 128, 129, 177, 288, 304, 323, 332, 340, 349, 350, 351, 352, 353, 354], "800": [2, 3, 6, 11, 12, 15, 16, 18, 23, 36, 38, 43, 66, 68, 70, 72], "method": [2, 4, 8, 11, 13, 16, 18, 19, 28, 36, 38, 39, 47, 49, 51, 53, 55, 57, 65, 67, 69, 71, 74, 78, 81, 86, 87, 94, 99, 103, 110, 112, 114, 115, 116, 118, 126, 129, 130, 131, 136, 142, 234, 243, 260, 269, 347, 348, 350, 351, 357], "tensor": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 66, 70, 72, 76, 77, 80, 81, 83, 84, 85, 93, 100, 102, 103, 105, 115, 117, 120, 126, 128, 129, 130, 131, 133, 291, 292, 298, 304, 311, 313, 315, 317, 331, 335, 338, 340, 346, 349, 350, 351, 352, 353, 354], "output": [3, 4, 5, 6, 9, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 25, 26, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 66, 68, 70, 72, 75, 76, 77, 79, 80, 81, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 115, 117, 119, 120, 121, 122, 123, 124, 129, 130, 133, 134, 204, 291, 292, 335, 338], "flatten": [3, 4, 9, 12, 13, 18, 19, 30, 38, 39], "contain": [3, 4, 11, 12, 13, 18, 36, 38, 81, 125, 130, 131, 133, 303, 356], "onli": [3, 11, 12, 18, 28, 36, 38, 291, 292, 349, 350, 351, 352, 353, 354, 356], "given": [3, 4, 6, 11, 12, 13, 15, 18, 23, 27, 28, 35, 38, 43, 45, 126, 130, 131, 133, 134, 148, 160, 231, 349, 353], "can": [3, 4, 12, 13, 115, 125, 126, 134, 305, 347, 349, 350, 351, 352, 353, 354, 355, 356], "user": [3, 4, 12, 13], "There": [3, 4, 9, 12, 13], "denot": [3, 4, 9, 12, 13, 18, 19, 30, 38, 39, 356], "defin": [3, 12, 48, 50, 52, 54, 56, 63, 111, 113, 127, 128, 132, 143, 155, 160, 349, 353, 354], "first": [3, 8, 11, 12, 28, 36, 67, 69, 71, 128, 133, 167, 321, 324, 334, 335, 337, 349, 350, 351, 352, 353, 354], "dimens": [3, 8, 11, 12, 17, 18, 19, 26, 28, 29, 30, 34, 36, 37, 38, 39, 44, 76, 77, 80, 81, 83, 84, 102, 131, 133, 286, 331], "rand": [3, 4, 9, 12, 13, 27, 35, 45, 67, 68, 69, 70, 75, 76, 77, 79, 80, 81, 83, 84, 85, 91, 97, 106, 107, 109, 114, 115, 117, 121, 124, 311, 312, 313, 314, 315, 316, 317, 325, 341, 343, 346], "10": [3, 4, 9, 12, 13, 17, 18, 19, 25, 26, 29, 30, 34, 37, 38, 39, 44, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 87, 88, 90, 91, 94, 95, 96, 97, 103, 104, 105, 106, 107, 109, 119, 120, 121, 124, 126, 128, 129, 306, 311, 312, 313, 314, 315, 316, 317, 338, 346, 349, 350, 351, 352, 353, 354, 356], "1600": [3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], "hx": [4, 8, 9, 13, 19, 28, 30, 39, 74, 114, 116, 349], "thi": [4, 13, 18, 19, 38, 39, 48, 50, 52, 54, 56, 63, 81, 111, 113, 116, 117, 126, 127, 129, 132, 133, 134, 143, 305, 312, 313, 314, 315, 322, 347, 349, 350, 351, 352, 353, 354, 356], "lineardynamicsplit": [4, 6, 13, 15, 23, 43], "return": [5, 6, 10, 14, 15, 20, 21, 22, 23, 31, 32, 33, 40, 41, 42, 43, 81, 100, 102, 106, 121, 125, 126, 128, 129, 130, 133, 134, 158, 159, 204, 231, 277, 281, 282, 283, 284, 285, 286, 293, 298, 306, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 350, 352], "h1": [5, 10, 14, 20, 21, 22, 27, 31, 32, 33, 35, 40, 41, 42, 45, 74, 76, 78, 80, 349], "h2": [5, 10, 14, 20, 21, 22, 27, 31, 32, 33, 35, 40, 41, 42, 45], "construct": [8, 11, 28, 36, 65, 67, 69, 71, 116, 126, 131, 346, 349], "frame": [8, 9, 126, 128, 129, 130, 131, 133, 134], "anim": [8, 126, 128, 129, 130, 131, 133, 134], "learnabl": [8, 11, 28, 36, 99, 116, 354, 356], "second": [8, 11, 28, 36, 130, 134, 311, 312, 313, 314, 315, 316, 317, 346], "text": [8, 11, 28, 36, 99, 101, 134], "floor": [8, 11, 28, 36, 134], "sqrt": [8, 11, 28, 36, 69, 71, 99, 101], "If": [8, 11, 17, 18, 19, 26, 27, 28, 29, 30, 34, 35, 36, 37, 38, 39, 44, 45, 126, 128, 130, 131, 133, 134, 286, 305], "pleas": [8, 11, 28, 36, 347, 356], "assign": [8, 11, 28, 36, 353], "manual": [8, 11, 28, 36, 126, 131], "dynamiclinear": [11, 28], "arrai": [11, 116, 179, 180, 310, 312, 313, 314, 316, 317, 321, 322, 323, 324, 326, 332, 333, 337, 342, 344, 345], "linearsplit": [16, 18, 19, 65, 67, 68, 69, 70, 71, 78, 80, 81, 85], "dynamichadamsplit": 16, "still": [16, 28, 36, 349], "randn": [16, 17, 18, 19, 25, 26, 29, 30, 34, 36, 37, 38, 39, 44, 99, 340], "appli": [17, 18, 19, 26, 29, 30, 34, 37, 38, 39, 44, 67, 74, 78, 100, 102, 349, 352, 353], "more": [17, 18, 19, 26, 29, 30, 34, 37, 38, 39, 44, 80, 83, 126, 131, 305, 349, 350, 353, 354, 355], "than": [17, 18, 19, 26, 29, 30, 34, 37, 38, 39, 44, 126, 131, 312, 313, 314, 315, 322, 349, 353, 355], "total": [18, 19, 30, 38, 39, 348, 352, 357], "transpos": [21, 32, 41], "true": [22, 26, 28, 33, 34, 42, 44, 126, 131, 133, 155, 176, 185, 291, 292, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 333, 350, 351, 352, 354, 356], "domain": [25, 83, 84, 116, 117, 350, 351, 354], "had": [25, 340], "b": [25, 76, 77, 81, 84, 87, 88, 90, 91, 94, 95, 96, 97, 103, 104, 105, 106, 107, 109, 117, 119, 120, 121, 124, 131, 133, 174, 196, 285, 334, 335, 340, 349, 350, 351, 352, 353, 354, 356], "c": [25, 87, 88, 90, 91, 94, 95, 96, 97, 103, 104, 105, 106, 107, 109, 119, 120, 121, 124, 126, 129, 130, 133, 340, 349, 350, 351, 352, 353, 354], "channel": [25, 82, 103, 129, 130, 133], "math": [25, 99, 313, 350, 351, 352], "solut": [26, 28, 34, 36, 44, 117, 347, 348, 353, 357], "reg": [27, 28, 35, 36, 45, 136, 352], "float": [27, 28, 35, 36, 45, 67, 69, 71, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 91, 93, 97, 106, 107, 109, 114, 115, 117, 121, 124, 128, 130, 134, 231], "1e": [27, 28, 35, 36, 45, 110, 112, 118, 352], "15": [27, 28, 35, 36, 45, 198, 203, 322, 341, 343, 351], "pinv": [27, 28, 35, 36, 45, 103, 115, 350, 351, 352], "none": [27, 28, 35, 36, 45, 126, 127, 128, 130, 131, 132, 134, 155, 158, 159, 164, 171, 174, 185, 291, 317, 323, 324, 325, 326, 328, 331, 332, 333, 340, 341, 342, 343, 344, 346, 353], "store": [27, 28, 35, 36, 45, 101, 125, 126, 131, 133, 352], "self": [27, 35, 45, 100, 126, 129, 131, 134], "directli": [27, 35, 45, 130, 133, 355], "valid": [27, 35, 45, 352], "check": [27, 35, 45, 326, 352], "exist": [27, 35, 45, 351, 354], "regular": [27, 28, 35, 36, 45, 116, 117, 122, 346, 354], "option": [27, 28, 35, 36, 45, 87, 94, 103, 126, 128, 130, 131, 133, 158, 159, 305, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 332, 333, 340, 342, 346, 356], "cutoff": [27, 28, 35, 36, 45], "small": [27, 28, 35, 36, 45, 352], "singular": [27, 28, 35, 36, 45], "No": [27, 35, 45, 134, 311, 312, 313, 314, 315, 317, 356], "otherwis": [27, 35, 45, 352], "linalg": [27, 35, 36, 45, 103, 105, 120, 312, 314, 316, 325], "an": [28, 67, 69, 71, 85, 117, 125, 126, 130, 131, 133, 134, 162, 303, 323, 332, 334, 335, 340, 349, 350, 351, 352, 353, 354, 356], "type": [28, 87, 94, 302, 303, 347, 352], "ani": [28, 36, 102, 115, 127, 132, 305, 350, 351, 352, 356], "have": [28, 36, 92, 98, 108, 123, 288, 291, 302, 305, 349, 354], "access": [28, 36], "default": [28, 36, 87, 94, 103, 126, 128, 130, 131, 133, 158, 159, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 333, 352, 354], "initiliaz": [28, 36], "numpi": [28, 126, 128, 179, 180, 310, 312, 313, 314, 316, 317, 322, 324, 325, 333, 346, 349, 350, 351, 352, 353, 354], "linal": 28, "relev": [28, 36, 290, 295, 301, 350], "when": [28, 36, 126, 131, 312, 313, 314, 315, 322, 346, 349, 353, 356], "adjoint": 28, "you": [28, 36, 305, 347, 352], "know": [28, 36], "want": [28, 36, 347], "best": [28, 36, 351, 353, 354], "set": [28, 36, 82, 126, 131, 285, 291, 292, 321, 324, 334, 335, 337, 349, 350, 351, 352, 353, 354, 356], "set_h_pinv": [28, 36], "everi": [48, 50, 52, 54, 56, 63, 111, 113, 127, 132, 143, 352], "should": [48, 50, 52, 54, 56, 63, 76, 80, 81, 111, 113, 126, 127, 131, 132, 143, 298, 305, 310, 311, 312, 313, 314, 315, 321, 322, 324, 325, 326, 333, 341, 342, 343, 344], "overridden": [48, 50, 52, 54, 56, 63, 111, 113, 127, 132, 143], "all": [48, 50, 52, 54, 56, 63, 71, 74, 76, 78, 111, 113, 127, 132, 143, 288, 302, 349, 353, 354, 356, 357], "subclass": [48, 50, 52, 54, 56, 63, 111, 113, 125, 127, 132, 143], "although": [48, 50, 52, 54, 56, 63, 111, 113, 127, 132, 143, 353], "recip": [48, 50, 52, 54, 56, 63, 111, 113, 127, 132, 143], "pass": [48, 50, 52, 54, 56, 63, 111, 113, 127, 130, 131, 132, 133, 143, 352, 356], "need": [48, 50, 52, 54, 56, 63, 111, 113, 127, 132, 143, 291, 302, 347, 352], "within": [48, 50, 52, 54, 56, 63, 111, 113, 127, 132, 143, 349], "function": [48, 50, 52, 54, 56, 63, 111, 113, 125, 126, 127, 128, 130, 131, 132, 133, 135, 143, 170, 175, 194, 198, 203, 217, 233, 280, 287, 305, 349, 350, 351, 353, 354, 356], "one": [48, 50, 52, 54, 56, 63, 80, 83, 111, 113, 126, 127, 130, 131, 132, 133, 143, 349, 352, 353], "instanc": [48, 50, 52, 54, 56, 63, 111, 113, 127, 132, 143, 349], "afterward": [48, 50, 52, 54, 56, 63, 111, 113, 127, 132, 143], "instead": [48, 50, 52, 54, 56, 63, 111, 113, 126, 127, 131, 132, 143, 351], "sinc": [48, 50, 52, 54, 56, 63, 111, 113, 127, 132, 143], "former": [48, 50, 52, 54, 56, 63, 111, 113, 125, 127, 132, 143], "take": [48, 50, 52, 54, 56, 63, 111, 113, 127, 132, 143, 168, 350, 352, 356], "care": [48, 50, 52, 54, 56, 63, 111, 113, 127, 132, 143], "run": [48, 50, 52, 54, 56, 63, 111, 113, 127, 132, 143, 347, 352, 355], "regist": [48, 50, 52, 54, 56, 63, 111, 113, 127, 132, 143], "hook": [48, 50, 52, 54, 56, 63, 111, 113, 127, 132, 143], "while": [48, 50, 52, 54, 56, 63, 81, 111, 113, 127, 132, 143, 349, 353, 356], "latter": [48, 50, 52, 54, 56, 63, 111, 113, 127, 132, 143, 353, 354], "silent": [48, 50, 52, 54, 56, 63, 111, 113, 127, 132, 143], "ignor": [48, 50, 52, 54, 56, 63, 111, 113, 127, 132, 143], "them": [48, 50, 52, 54, 56, 63, 111, 113, 127, 132, 143, 291, 292, 304, 347, 350, 351, 354, 356], "denoi": [55, 87, 94, 103, 116, 118, 158, 159, 350, 351, 352, 353, 354], "n_denoi": 55, "iter": [56, 349, 350, 351, 352, 353, 354], "in_channel": [57, 58, 60, 61, 62], "out_channel": [57, 60, 61, 62], "kernel_s": [58, 60, 61, 62, 188], "3": [58, 60, 61, 62, 67, 68, 69, 70, 126, 128, 129, 130, 133, 134, 161, 179, 189, 190, 305, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 324, 331, 333, 337, 338, 346, 347, 349, 351, 352, 353], "pad": [58, 60, 61], "upsampl": 59, "bypass": 59, "mid_channel": [61, 62], "hadamsplit": [65, 66, 67, 68, 69, 70, 71, 72, 78, 80, 81, 85, 87, 88, 90, 91, 94, 95, 96, 97, 103, 104, 105, 106, 107, 109, 114, 115, 117, 119, 120, 121, 124, 353, 354], "rang": [65, 67, 69, 71, 75, 79, 87, 93, 126, 131, 231, 291, 292, 349], "mea": [65, 67, 69, 71, 74, 78, 87, 88, 90, 91, 94, 95, 96, 97, 99, 103, 104, 105, 106, 107, 109, 117, 119, 120, 121, 124, 283, 284, 285, 286, 349, 350, 351, 352, 353, 354, 356], "linear_op": [65, 67], "linear_acq": [65, 66, 67], "split_op": [65, 67, 78, 79, 80, 81, 82, 83, 84, 85], "split_acq": [65, 66, 67], "floattensor": [66, 68, 70, 72, 88, 90, 94, 95, 96, 103, 104, 105, 119, 120], "uniform_": [66, 68, 70, 72, 88, 90, 94, 95, 96, 103, 104, 105, 119, 120], "alpha": [67, 69, 71, 74, 76, 77, 78, 80, 81, 83, 85, 116, 117, 349, 350, 353, 354], "50": [67, 68, 69, 70, 352], "nonois": [67, 69, 71, 87, 88, 90, 91, 94, 95, 96, 97, 103, 104, 105, 106, 107, 109, 119, 120, 121, 124, 349, 350, 351, 352, 353], "corrupt": [67, 68, 69, 70, 71, 72, 353, 356], "Then": [67, 69, 71, 350, 351, 352], "mathcal": [67, 69, 71, 99, 101, 349, 353, 356], "intens": [67, 69, 71, 74, 78, 81, 92, 98, 108, 123, 349, 353], "control": [67, 69, 71], "level": [67, 69, 71, 87, 89, 93, 351], "photoelectron": [67, 69, 71], "200": [67, 68, 69, 70, 71, 72, 317, 346], "24": [67, 68, 69, 70, 134], "64": [67, 68, 69, 70, 87, 88, 90, 91, 94, 95, 96, 97, 103, 104, 105, 106, 107, 109, 119, 120, 121, 124, 291, 292, 298, 303, 340, 349, 350, 351, 352, 353, 354], "split_row_op": 67, "two": [68, 70, 72, 125, 230, 231, 232, 285, 298, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 326, 329, 330, 332, 333, 334, 335, 336, 339, 341, 342, 343, 344, 345, 349, 353, 356], "noisi": [68, 70, 72, 347, 349, 350, 353, 354, 356], "noise_op": [68, 69, 70, 71, 72, 349, 354], "min": [68, 70, 72, 352, 353], "2f": [68, 70, 72], "2249": 68, "00": [68, 70, 72, 348, 357], "2896": 68, "2237": 68, "2880": 68, "55338": 68, "55077": 68, "92": [68, 70], "48": [68, 70], "500": 68, "1134": 68, "465": 68, "1140": 68, "poisson": [69, 70, 71, 72, 74, 78, 353, 354], "To": [69, 71, 126, 350, 351, 352, 353], "acceler": [69, 71, 350, 352, 353, 354], "we": [69, 71, 117, 126, 131, 291, 292, 349, 350, 351, 352, 353, 354, 355, 356], "consid": [69, 71, 114, 116, 126, 131, 349, 350, 351, 352, 353, 354, 356], "gaussian": [69, 71, 99], "approxim": [69, 71, 116, 117, 349, 353], "distribut": [69, 71, 305, 349, 353], "ad": [69, 71], "cdot": [69, 71], "mu": [69, 71], "sigma": [69, 71, 74, 87, 88, 90, 91, 94, 95, 96, 97, 99, 116, 117], "2255": [70, 72], "57": [70, 72], "2911": [70, 72], "18": [70, 72], "2226": [70, 72], "49": [70, 72], "2934": [70, 72], "42": [70, 72], "55951": [70, 72], "41": [70, 72], "56216": [70, 72], "86": [70, 72], "460": 70, "43": 70, "1216": 70, "94": 70, "441": 70, "85": [70, 114, 115, 117], "1230": 70, "contrari": [71, 81, 126], "poissonapproxgauss": 71, "same": [71, 92, 98, 108, 122, 123, 129, 285, 288, 340], "preprocess": [74, 76, 77, 78, 80, 81, 83, 85, 87, 92, 94, 98, 103, 107, 108, 109, 123, 124, 350, 351, 352, 354, 356], "raw": [74, 78, 82, 91, 92, 97, 98, 106, 107, 108, 109, 121, 122, 123, 124, 350, 351, 354], "data": [74, 78, 82, 87, 88, 92, 94, 95, 98, 100, 102, 104, 119, 206, 208, 212, 298, 302, 303, 347, 349, 350, 351, 352, 353, 354, 356], "acquir": [74, 78, 286, 350, 354], "direct": [74, 356], "nois": [74, 78, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 99, 103, 104, 105, 106, 107, 109, 116, 117, 118, 119, 120, 121, 124, 231, 347, 350, 351, 352, 354, 356], "also": [74, 78, 291, 292, 349, 353, 355], "compens": [74, 76, 78, 80, 81, 84, 349, 350, 353, 356], "affin": [74, 76, 78, 126, 128, 129, 349, 353], "get": [74, 78, 328, 329, 330, 331, 334, 335, 349, 353], "varianc": [74, 77, 78, 83, 84, 85, 92, 98, 99, 102, 117, 289, 353, 354], "4": [74, 77, 83, 85, 87, 91, 128, 129, 134, 310, 311, 312, 313, 314, 316, 317, 321, 324, 333, 334, 335, 336, 338, 347, 350, 351, 352, 353, 354], "ones": [74, 76, 78, 87, 88, 90, 91, 94, 95, 96, 97, 103, 104, 105, 106, 107, 109, 117, 119, 120, 121, 124, 350, 351, 352, 353, 354], "maximun": [74, 78], "count": [74, 78, 82, 92, 98, 108, 123], "prep_op": [74, 75, 76, 77, 349, 353, 354], "beta": [75, 79], "denorm": [75, 79, 92, 98, 108, 123], "normal": [75, 76, 79, 80, 81, 84, 92, 98, 108, 123, 304, 349, 350, 351, 352, 353, 354, 356], "factor": [75, 79, 349, 350, 351, 352, 353], "normalizarion": [75, 79], "dtype": [75, 76, 77, 79, 80, 81, 83, 84, 85, 91, 97, 106, 107, 109, 114, 115, 117, 121, 124, 126, 128, 131, 346], "9": [75, 79, 176, 178, 181], "match": [76, 80, 81], "estim": [77, 81, 83, 84, 85, 92, 98, 108, 114, 116, 123, 354, 356], "v": [77, 83, 84, 85, 125, 126, 128, 129, 130, 131, 133, 317, 346], "y_": [78, 353], "var": [78, 117], "indic": [80, 83, 131, 281, 282, 283, 284, 285, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 329, 333, 350], "tupl": [81, 129, 134], "forward": [81, 356], "pseudoinvers": [81, 103, 347, 348, 353, 357], "unsplit": 81, "typic": [81, 340, 349, 356], "reconstruct": [81, 86, 87, 89, 90, 92, 94, 96, 98, 103, 105, 106, 108, 109, 120, 121, 123, 124, 168, 286, 347, 349, 350, 351, 352, 353, 354], "experiment": [81, 82, 356], "both": [81, 92, 98, 129, 134, 291, 350, 356], "requir": [81, 349, 353], "gain": [82, 84], "mudark": 82, "sigdark": 82, "nbin": 82, "sensor": 82, "electron": 82, "averag": 82, "dark": 82, "current": [82, 356], "standard": [82, 99, 100, 101, 102, 356], "deviat": [82, 99, 100, 101, 102], "bin": [82, 303], "spectral": 82, "input": [82, 83, 84, 87, 94, 99, 100, 102, 103, 126, 127, 131, 132, 168, 204, 286, 298, 311, 312, 313, 314, 315, 316, 317, 328, 331, 335, 338, 346, 349, 350, 351, 352, 353, 354, 356], "result": [82, 158, 159, 347, 351, 352, 353, 354], "sommat": 82, "6": [82, 84, 118, 134, 310, 311, 312, 313, 314, 316, 317, 321, 324, 333, 347], "NOT": 84, "set_exp": 84, "correspond": [85, 102, 103, 126, 128, 131, 133, 347, 350, 351, 353], "through": [85, 352], "network": [86, 87, 90, 91, 92, 94, 96, 97, 98, 103, 105, 108, 120, 122, 123, 347, 349, 355, 356], "prep": [87, 88, 90, 91, 94, 95, 96, 97, 103, 104, 105, 106, 107, 109, 118, 119, 120, 121, 124, 349, 350, 351, 352, 353, 354, 356], "ident": [87, 94, 103, 118, 133, 350, 351, 353, 354], "noise_level": [87, 93], "5": [87, 103, 105, 117, 120, 128, 130, 131, 134, 177, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 324, 331, 333, 337, 338, 346, 347, 349, 350, 351, 352, 353], "dcnet": [87, 88, 90, 347, 348, 357], "denois": [87, 94, 103, 107, 116, 347, 348, 350, 354, 355, 356, 357], "complet": [87, 94, 116, 347, 354, 356], "drunet": [87, 91, 354], "wich": 87, "concaten": [87, 89], "map": [87, 89, 125, 126, 131, 204, 350, 351, 352, 354], "acquisit": [87, 88, 94, 95, 103, 104, 119, 286, 347, 348, 350, 352, 354, 356, 357], "updat": [87, 94, 352], "tikhonov": [87, 94, 116, 117], "tikhonovmeasurementpriordiag": [87, 94], "nnet": [87, 94, 103, 351, 352, 354, 356], "255": [87, 93], "ground": [87, 88, 90, 94, 95, 96, 103, 104, 105, 119, 120, 350, 351, 353, 354], "truth": [87, 88, 90, 94, 95, 96, 103, 104, 105, 119, 120, 350, 351, 353, 354], "acq": [87, 94, 103, 286], "dc_layer": [87, 94], "consist": [87, 94], "layer": [87, 89, 94, 116, 159, 167, 351, 354, 356], "tikho": [87, 94], "architectur": [87, 352], "splitpoisson": [87, 88, 90, 91, 94, 95, 96, 97, 103, 104, 105, 106, 107, 109, 119, 120, 121, 124, 353, 354], "n_channel": [87, 91], "grayscal": [87, 91, 129, 130, 133, 291, 292, 304, 349, 350, 351, 352, 353, 354], "model_drunet_path": [87, 91], "model_zoo": [87, 91], "drunet_grai": [87, 91], "pth": [87, 91, 158, 159, 351, 354], "denoi_drunet": [87, 91], "in_nc": [87, 91], "out_nc": [87, 91], "nc": [87, 91, 200, 201, 202, 206, 207, 214, 216], "128": [87, 91, 99, 129, 302, 311], "256": [87, 91, 302, 317, 340], "512": [87, 91, 117, 291, 292, 313, 315, 317, 346, 352], "nb": [87, 91], "act_mod": [87, 91], "r": [87, 91, 195, 231, 349, 350, 351, 352, 353, 354, 356], "downsample_mod": [87, 91], "strideconv": [87, 91], "upsample_mod": [87, 91], "convtranspos": [87, 91], "recnet": [87, 88, 90, 91, 94, 95, 96, 97, 103, 104, 105, 106, 107, 109, 119, 120, 121, 124], "z": [87, 88, 90, 91, 94, 95, 96, 97, 103, 104, 105, 106, 107, 109, 119, 120, 121, 124, 321, 324], "bc": [88, 89, 91, 92, 95, 97, 98, 104, 106, 107, 108, 109, 119, 121, 122, 123, 124], "8192": [88, 95, 104, 119], "pipelin": [90, 96, 105, 120, 347, 356], "step": [91, 92, 97, 98, 108, 122, 123, 133, 162, 163, 349, 353, 354, 356], "except": [92, 98, 108, 122, 123, 349, 351, 353, 354], "unit": [92, 98, 108, 123, 354], "photon": [92, 98, 108, 123, 349, 350, 352, 353, 354], "reset": [93, 101], "wiener": 99, "filter": [99, 167, 277], "addit": [99, 102, 352], "white": 99, "sigma_": [99, 101, 116, 117], "prior": [99, 100, 101, 102, 116, 117, 349, 356], "2_": [99, 116], "weight": [99, 100, 101, 102, 159, 351, 352, 354], "u": [99, 101, 125], "k": [99, 101], "in_featur": 99, "featur": 99, "equal": [99, 353], "30": [99, 351, 352], "A": [100, 102, 117, 128, 196, 305, 330, 339, 340, 345, 353, 356], "_featur": [100, 102], "thei": [101, 125, 126, 131, 349, 353, 356], "static": 102, "mean": [102, 116, 204, 290, 352, 353, 354], "our": [102, 353], "analyt": 103, "norm": [103, 105, 120, 312, 314, 316, 325], "8912e": [103, 105, 120], "06": [103, 105, 110, 112, 118, 120, 198, 347, 348, 357], "reconstrcut": [105, 120], "val_min": [110, 112], "positiveparamet": 110, "moor": 114, "penros": 114, "hat": [114, 117], "pinv_op": [114, 115], "implement": [115, 356], "applic": [115, 349, 353], "gf": [116, 117], "minim": 116, "gfx": 116, "_": [116, 349, 350, 351, 352, 353, 354, 356], "x_0": [116, 117], "covari": [116, 117, 289, 353, 354], "comp": 116, "sigma_1": [116, 117], "21": [116, 117], "recon_op": [116, 117, 350], "y_1": 117, "y_2": 117, "d_1": 117, "top": [117, 126, 131, 332, 334, 335, 337, 350], "sigma_2": 117, "textrm": [117, 353, 354], "diag": 117, "diagon": 117, "invold": 117, "straigtforward": 117, "exact": 117, "lemma": 117, "phd": 117, "dissert": 117, "lorent": [117, 356], "mur": [117, 356], "2021": [117, 356], "http": [117, 159, 305, 351, 352, 353, 354], "theses": 117, "hal": 117, "scienc": 117, "tel": 117, "03670825v1": 117, "file": [117, 172, 173, 303, 347, 348, 351, 352, 354, 357], "pdf": 117, "provid": [117, 134, 290, 295, 301, 346, 352, 353, 354, 356], "zero": [117, 286, 334, 335, 337, 350, 353], "num_it": 118, "lamb": 118, "05": [118, 347, 348, 357], "lamb_min": 118, "fals": [118, 126, 128, 129, 130, 131, 134, 165, 166, 234, 243, 260, 269, 291, 292, 316, 317, 351, 352, 354], "pinvnet": [118, 119, 120, 121, 124], "trainabl": [122, 347, 354], "deform": [125, 126, 128, 129, 130, 131, 133], "field": [125, 126, 128, 129, 130, 131, 133, 134], "warp": [125, 126, 129, 131, 134], "deformationfield": [125, 126, 129, 130], "affinedeformationfield": [125, 134], "These": [125, 349, 350, 351, 352, 353, 354], "fed": [125, 350, 351], "origin": [125, 126, 131, 349], "note": [125, 321, 324, 334, 335, 337, 338, 346, 349, 350, 353], "relat": 125, "equat": 125, "here": [125, 347, 349, 350, 353, 354, 356], "inverse_field_matrix": 126, "align_corn": [126, 128, 129, 130, 131, 133, 134], "singl": [126, 130, 131, 134, 284, 350, 352, 353], "2d": [126, 298, 310, 311, 321, 323, 324, 332, 333, 334, 335, 336, 337, 338, 339, 340, 350], "homogen": 126, "evalu": [126, 128, 129], "variabl": 126, "desir": [126, 350, 352], "spatial": 126, "resolut": [126, 131], "coordin": [126, 131], "refer": [126, 131, 354, 355], "its": [126, 131, 323, 349, 350, 352, 356], "center": [126, 131, 288], "left": [126, 131, 334, 335, 337, 349, 350, 353, 356], "corner": [126, 131, 350], "That": 126, "bool": [126, 131, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 333], "geometr": [126, 131], "rather": [126, 131], "point": [126, 131], "extrema": [126, 131], "": [126, 129, 130, 131, 182, 298, 310, 311, 312, 313, 314, 315, 321, 322, 324, 325, 326, 333, 334, 335, 336, 337, 338, 341, 342, 343, 344, 352], "make": [126, 131], "agnost": [126, 131], "inverse_grid_fram": [126, 129, 130, 131, 133], "grid": 126, "upon": 126, "save_inv_grid_fram": 126, "float32": [126, 128, 131, 346], "progress": 126, "zoom": 126, "def": [126, 128, 129, 130], "rotat": [126, 129, 130, 131, 133], "counter": [126, 130, 131, 133], "clockwis": [126, 130, 131, 133], "frequenc": [126, 350, 351, 352], "1hz": 126, "import": [126, 298, 302, 303, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 324, 325, 331, 333, 334, 335, 337, 338, 346, 349, 350, 351, 352, 353, 354], "sin": [126, 129, 130], "pi": [126, 129, 130], "co": [126, 129, 130], "t0": [128, 130, 134], "t1": [128, 130, 134], "n_frame": [128, 130, 134], "matric": [128, 129, 353], "_frame": [128, 129, 130, 131], "creat": [128, 170, 198, 203, 304, 349, 350, 351, 352, 353, 354], "linspac": 128, "time_vector": 128, "revers": 128, "give": [128, 356], "backward": [128, 133], "which": [128, 339, 349, 350, 351, 352, 353, 356], "last": [128, 131, 133, 331, 351, 353, 354], "inv_mat_fram": [128, 129], "between": [128, 130, 133, 134, 185, 230, 231, 232, 304, 352, 356], "11": [128, 134], "save": [129, 148, 158, 159, 160], "multipl": [129, 134, 285, 346, 352], "name": [129, 159, 353, 354], "parent": [129, 130, 352], "allow": [129, 350, 352, 356], "nx": [129, 130, 131, 133, 179, 180], "ny": [129, 130, 131, 133, 179, 180], "target": [129, 158, 159], "integ": [129, 334, 335], "along": [129, 130, 131, 133, 305], "axi": [129, 130, 131, 133, 353], "respect": [129, 130, 131, 133, 134], "usual": [129, 130, 133, 134], "color": [129, 130, 133, 149, 167, 168, 176, 178, 180, 183, 184, 185, 187], "follow": [129, 130, 133, 134, 349, 353, 356], "rgb": [129, 291, 292], "128x128": 129, "get_inv_mat_fram": 129, "101": 129, "img": [130, 133, 154, 185, 283, 284, 285], "fp": [130, 134, 179, 180], "mode": [130, 133], "str": [130, 133, 158, 159, 306], "bilinear": [130, 133], "interpol": [130, 133], "similarli": 130, "either": [130, 305], "warn": [130, 133], "rais": [130, 133], "start": [130, 134, 138, 139, 156, 349], "per": [130, 134], "grid_sampl": [130, 131, 133], "nearest": [130, 133], "bicub": [130, 133], "90": [130, 131, 133], "7": [130, 133, 291, 292, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 324, 326, 331, 333, 337, 338, 342, 344, 346, 348, 349, 350, 351, 352, 353, 354, 357], "deformed_imag": [130, 133], "3000": [130, 133], "0000": [130, 133], "7000": [130, 133], "discret": 131, "displai": [131, 167, 185, 350, 351, 352], "2x2": [131, 133], "degre": [131, 133], "n0": [133, 351, 352], "n1": [133, 209], "slice": 133, "includ": [133, 353, 355, 356], "exclud": 133, "inv_grid_fram": 133, "index": [133, 328, 331, 349, 350, 351, 352, 353, 354], "behavior": 133, "list": [133, 306, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 328, 329, 331, 333, 355, 356], "error": [133, 325, 352], "correct": 134, "format": [134, 352], "mutual": 134, "exclus": 134, "truncat": 134, "closest": 134, "lowest": 134, "pattern": [134, 158, 159, 234, 243, 260, 286, 353], "attr": 134, "ye": 134, "valueerror": 134, "conflict": 134, "25": [134, 165, 166], "unabl": 134, "wa": 134, "were": 134, "batch_siz": [136, 291, 292, 298, 302, 303, 349, 350, 351, 352, 353, 354], "learning_r": 136, "img_siz": [136, 195, 197, 234, 243, 260, 269, 288, 291, 292, 298, 302, 303, 304, 349, 350, 351, 352, 353, 354], "train_info": [140, 352], "loss": [142, 163, 356], "net": [143, 155, 352, 354], "old_kei": [144, 145], "old_nam": [144, 145, 158, 159], "new_nam": [145, 159], "model1": [146, 147, 149], "model2": [146, 147, 149], "model3": [146, 147, 149], "criterion": [146, 147, 161, 165, 166, 352], "dataload": [146, 147, 149, 161, 165, 166, 168, 224, 225, 226, 227, 228, 290, 294, 295, 296, 297, 299, 300, 301, 349, 350, 351, 353, 354], "devic": [146, 147, 149, 155, 161, 165, 166, 168, 222, 223, 224, 225, 226, 227, 228, 290, 294, 295, 297, 299, 300, 301, 302, 303, 311, 313, 315, 317, 346, 351, 352, 354], "root": [148, 165, 166, 193, 240, 249, 266, 274, 294, 296, 297, 300, 301, 349, 350, 351, 352, 353, 354], "epoch": [148, 351, 352], "model": [148, 149, 150, 151, 152, 155, 158, 159, 160, 161, 165, 166, 168, 224, 225, 226, 227, 228, 294, 300, 349, 351, 352, 353, 354], "dictionari": [148, 160], "pytorch": [148, 160, 165, 166, 317, 346, 352, 356], "right": [148, 177, 349, 353, 356], "suptitl": [149, 167, 168, 176, 178, 183, 184], "colormap": [149, 167, 168, 176, 178, 180, 185], "matplotlib": [149, 167, 168, 176, 178, 180, 183, 184, 185, 349, 351, 352, 353, 354], "linearsegmentedcolormap": [149, 167, 168, 176, 178, 180, 183, 184, 185], "compar": [149, 354], "three": [149, 349, 353], "titl": [154, 155, 160, 171, 174, 179, 180, 185, 187, 352], "strict": 155, "load": 155, "train_info1": 156, "train_info2": 156, "train_info3": 156, "path": [157, 158, 159, 172, 173, 199, 302, 303, 349, 350, 351, 352, 353, 354], "remov": 158, "some": 158, "reman": [158, 159], "rename_model_attribut": 158, "renam": 159, "destin": 159, "kei": 159, "adapt": 159, "gist": 159, "github": [159, 347, 356], "com": [159, 351, 352, 354], "bass": 159, "0bf8aaa302f9ba0d26798b11e4dd73e3": 159, "place": 160, "path_prof": 161, "optim": [161, 165, 166], "wait": 161, "warmup": 161, "activ": [161, 356], "repeat": [161, 311, 312, 313, 314, 315, 317, 322, 346], "tensorboard": [161, 162, 163, 164, 352], "profil": 161, "code": [161, 349, 350, 351, 352, 353, 354, 355], "execut": [161, 348, 357], "writer": [162, 163], "name_metr": [162, 163], "add": [162, 163], "val_metr": 163, "scalar": [163, 349, 352, 353, 356], "tb_path": [164, 165, 352], "log": [164, 352], "schedul": [165, 166], "num_epoch": [165, 166, 351, 352], "disp": [165, 166, 349, 350, 351, 352, 353, 354], "do_checkpoint": [165, 166, 352], "tb_prof": 165, "tb_freq": [165, 352], "20": [165, 349, 350, 351, 352, 353], "supervis": [166, 356], "wai": [166, 353], "conv_lay": 167, "8": [167, 168, 269, 310, 311, 316, 321, 324, 329, 330, 333, 337, 338, 345], "convolut": 167, "show": [168, 185, 349, 350, 351, 352, 353, 354], "side": [168, 351, 354], "thu": 170, "jan": [170, 198, 203], "16": [170, 176, 178, 181, 185, 203, 354], "08": 170, "56": 170, "13": 170, "2020": [170, 198, 203], "author": [170, 198, 203], "crombez": [170, 198, 203], "im": [171, 177, 340, 349], "fig": [171, 174, 349, 350, 351, 352, 354], "xlabel": [171, 174, 187, 352], "ylabel": [171, 174, 187, 352], "cmap": [171, 177, 185, 349, 351, 353, 354], "viridi": 171, "lx": 174, "ly": 174, "style_color": 174, "img_list": 176, "title_list": [176, 178], "axis_off": 176, "aspect": [176, 178, 181], "savefig": [176, 178], "fontsiz": [176, 178, 351, 352, 353, 354], "14": [176, 178, 314, 315], "mappabl": 177, "ax": [177, 186, 349, 353, 354], "plt": [177, 349, 351, 352, 353, 354], "subplot": [177, 349, 351, 353, 354], "imshow": [177, 349, 351, 353, 354], "img1": [177, 183, 184, 231], "grai": [177, 349, 351, 353, 354], "img2": [177, 183, 184, 231], "vid_list": 178, "nb_disp_fram": 178, "video": [179, 180, 188], "nb_frame": [179, 180], "title1": [183, 184], "title2": [183, 184], "colormap1": [183, 184], "colormap2": [183, 184], "img3": 184, "img4": 184, "title3": 184, "title4": 184, "colormap3": 184, "colormap4": 184, "figsiz": [185, 349, 351, 353, 354], "cbar_po": 185, "title_fonts": [185, 349, 350, 351], "scale": [185, 349, 353], "greyscal": 185, "colorbar": 185, "ttl": 185, "specifi": 185, "choos": [185, 350, 352], "plasma": 185, "jet": 185, "grei": 185, "black": 187, "crop_patch": 188, "tag": [189, 229], "prec": [189, 190], "torch_tensor": 191, "dsp": 192, "img_dim": 193, "start_fram": 193, "end_fram": 193, "x_max": 195, "nb_pixel": 197, "wed": [198, 203], "17": 198, "19": 198, "name_typ": 199, "path_fil": [200, 201, 202], "list_fil": [200, 201, 202], "nh": [200, 201, 202, 206, 207, 214], "nl": [200, 201, 202, 206, 207, 214, 216], "37": 203, "27": 203, "mat": [204, 205, 210, 211, 213, 214, 216, 281, 282, 283, 284, 285], "high": [204, 281, 282, 283, 284, 285], "signific": [204, 281, 282, 283, 284, 285], "n_lin": 205, "n_coll": 205, "vect": 209, "n2": 209, "box_pt": 215, "nd": 216, "torch_batch": [218, 220], "output_batch": [218, 219, 220, 221], "input_batch": [219, 221], "net_list": [222, 223], "testload": [222, 223], "i1": [230, 232], "i2": [230, 232], "psnr": 231, "expect": [231, 303, 349, 350, 351, 352, 353, 354], "peak": 231, "signal": [231, 298, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 324, 325, 333, 334, 335, 337, 338, 341, 343, 346, 349, 353], "ratio": [231, 349, 353], "basi": [234, 260], "binar": [234, 243, 260, 269], "def_matrix": [235, 236, 241, 245, 252, 254, 256, 258, 262, 270, 275], "abstract": [236, 245, 262, 270, 275], "q": [243, 244, 250, 278, 279], "par": [252, 253, 254, 255, 256, 257, 258, 259, 269], "lvl": [252, 253, 254, 255, 256, 257, 258, 259, 269], "m_prim": 261, "dyn": [269, 278, 279], "abc": 269, "convulut": 277, "che": 277, "kernel": 277, "correpond": 277, "line": 277, "been": [277, 349, 351, 353], "reshap": 277, "boolean": 281, "mask": [282, 293, 353], "kept": 282, "discard": 282, "test": [283, 291, 292, 303, 349, 350, 351, 352, 353, 354], "lenth": [283, 285], "length": [284, 312, 313, 314, 315, 316, 317, 328, 331, 346], "essenti": 285, "meas2img": [285, 350, 351], "argument": [285, 346], "dimension": 285, "perm_acq": 286, "perm_rec": 286, "m_": 286, "time": [286, 312, 313, 314, 315, 316, 317, 322, 346, 352], "k_": 286, "rep": 286, "repetit": 286, "wavelength": 286, "n_": [286, 352], "rec": 286, "fill": 286, "crop": [288, 290, 295, 301], "ensur": 288, "cov": [289, 353, 354], "extract": 289, "n_loop": [290, 295, 301, 302], "nloop": [290, 295, 301], "data_loaders_imagenet": [290, 295, 301], "train_root": 291, "val_root": 291, "seed": [291, 292, 352], "shuffl": [291, 292, 352], "subfold": [291, 302, 303], "train": [291, 292, 303, 347, 348, 349, 350, 351, 353, 354, 356, 357], "torchvis": [291, 292, 304, 349, 350, 351, 352, 353, 354], "dataset": [291, 292, 303, 349, 350, 351, 352, 353, 354], "pilimag": [291, 292], "convert": [291, 292, 304, 306], "data_root": [292, 298, 302, 303, 352], "download": [292, 347, 349, 350, 351, 352, 353, 354, 355], "rank": 296, "coeffici": [296, 350, 351, 352, 353, 354], "stat_root": [298, 302, 303], "windowspath": [298, 302, 303], "stat": [298, 302, 303, 353, 354], "walsh": [298, 305, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 326, 329, 332, 333, 336, 339, 340, 341, 342, 343, 344, 345, 346], "st": 298, "model_exp": 299, "ilsvrc2012_img_test_v10102019": 302, "cpu": [302, 303, 317, 346, 349, 350, 351, 352, 353, 354], "pathlib": [302, 352], "ilsvrc2012_v10102019": 302, "stl10_binari": 303, "unlabeled_x": 303, "stl10": [303, 304, 352], "natur": [304, 316, 317, 329, 330, 349, 350, 351, 352, 353, 354], "imagenet": [304, 353, 354], "tranform": 305, "longer": 305, "descript": 305, "program": 305, "free": [305, 356], "softwar": 305, "redistribut": 305, "modifi": [305, 349, 350, 351, 352, 353, 354], "under": 305, "term": 305, "gnu": 305, "gener": [305, 347, 349, 350, 351, 352, 353, 354, 355, 356], "public": [305, 356], "licens": 305, "publish": 305, "foundat": 305, "version": 305, "your": 305, "later": [305, 352, 353], "hope": 305, "without": [305, 347, 351, 354], "warranti": 305, "even": 305, "impli": 305, "merchant": 305, "fit": 305, "FOR": 305, "particular": 305, "purpos": [305, 349, 351], "detail": [305, 350, 354], "receiv": 305, "copi": 305, "www": 305, "org": 305, "l": [306, 318, 327, 356], "base2": 306, "base10": 306, "ind": [310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 328, 331, 333], "sequenc": [310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 328, 329, 330, 331, 333, 346], "wh": [310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 324, 325, 331, 333, 334, 335, 337, 338, 346], "faster": [311, 312, 313, 314, 315, 317, 322, 346], "timeit": [311, 312, 313, 314, 315, 316, 317, 346], "cuda": [311, 313, 315, 317, 346, 351, 352, 354], "lambda": [311, 312, 313, 314, 315, 316, 317, 346], "10x": [311, 312, 313, 314, 315, 316, 317], "3f": [311, 312, 313, 314, 315, 316, 317], "sequency_perm_ind": [311, 312, 313, 314, 315, 316, 317], "With": [311, 312, 313, 314, 315, 317, 354], "multilpl": [312, 313, 314, 315, 322], "12": [312, 313, 314, 316, 317], "len": [312, 314, 316], "comparison": [312, 313, 314, 316, 317, 354, 355], "via": [312, 314, 316, 356], "product": [312, 314, 316, 346, 356], "y1": [312, 314, 316, 349], "y2": [312, 314, 316, 349], "walsh_g": 312, "diff": [312, 314, 316], "y_np": [313, 317], "fwalsh_g": 313, "x_torch": [313, 317], "from_numpi": [313, 317, 335, 346], "y_torch": [313, 317], "walsh_": [314, 325, 341], "walsh_s_matrix": [314, 326], "naiv": [314, 353], "walsh_matrix": [316, 346], "sympi": 316, "sp": 316, "y3": [316, 349], "sequency_perm": 316, "fwht": 317, "200x": [317, 346], "4f": [317, 346], "gpu": [317, 346, 351, 352, 354], "x_cpu": 317, "x_gpu": 317, "100": [317, 349, 353, 354], "100x": 317, "fwalsh2_": 321, "meaning": [321, 324], "arbitrili": [321, 324], "fwalsh_": 322, "1d": [323, 332, 340, 345, 346], "walsh2_": 324, "4095": 325, "err": 325, "fold": [334, 335], "represent": [334, 335, 337, 338], "arbitrarili": [334, 335, 337], "2b": [334, 335], "walsh2_s_matrix": [334, 335], "unfold": [337, 338], "view": [338, 349, 350, 351, 352, 353, 354], "randint": 338, "d": [340, 351, 352, 354], "lead": [346, 353, 354], "much": 346, "fwht_torch": 346, "astyp": 346, "find": 347, "seri": 347, "guid": 347, "throughout": 347, "spyrit": [347, 349, 350, 351, 352, 353, 354, 355], "recommend": 347, "python": [347, 349, 350, 351, 352, 353, 354, 355], "script": [347, 352], "py": [347, 348, 349, 350, 351, 352, 353, 354, 355, 357], "jupyt": [347, 349, 350, 351, 352, 353, 354, 355], "notebook": [347, 349, 350, 351, 352, 353, 354, 355], "ipynb": [347, 349, 350, 351, 352, 353, 354, 355], "page": 347, "below": [347, 352], "diagram": 347, "whole": 347, "process": [347, 349, 352, 353, 356], "focus": 347, "specif": [347, 356], "part": [347, 350, 352, 356], "explain": [347, 353], "possibli": 347, "cnn": [347, 348, 357], "de": 347, "introduc": [347, 353, 356], "new": [347, 352], "improv": [347, 353, 354, 356], "explor": 347, "bonu": [347, 348, 357], "go": [347, 349, 350, 351, 352, 353, 354, 355], "deeper": 347, "understand": 347, "capabl": 347, "01": [347, 348, 357], "02": [347, 348, 357], "03": [347, 348, 357], "04": [347, 348, 357], "advanc": [347, 348, 356, 357], "colab": [347, 348, 357], "galleri": [347, 348, 349, 350, 351, 352, 353, 354, 355, 357], "sphinx": [347, 349, 350, 351, 352, 353, 354, 355], "000": [348, 349, 357], "mem": [348, 357], "mb": [348, 357], "tuto_01_acquisition_oper": [348, 349, 357], "tuto_02_pseudoinverse_linear": [348, 350, 357], "tuto_03_pseudoinverse_cnn_linear": [348, 351, 357], "tuto_04_train_pseudoinverse_cnn_linear": [348, 352, 357], "tuto_05_acquisition_split_measur": [348, 353, 357], "tuto_06_dcnet_split_measur": [348, 354, 357], "tuto_bonus_advanced_methods_colab": [348, 355, 357], "tutori": [349, 350, 351, 352, 353, 354, 355, 357], "how": [349, 350, 351, 352, 353, 354], "core": [349, 350, 351, 352, 353, 354, 356], "neural": [349, 350, 351, 353, 354, 356], "transform_gray_norm": [349, 350, 351, 352, 353, 354], "o": [349, 350, 351, 352, 353, 354], "pyplot": [349, 351, 352, 353, 354], "misc": [349, 350, 351, 352, 353, 354], "imagesc": [349, 350, 351, 352, 353, 354], "statist": [349, 350, 351, 352, 353, 354], "sphinx_gallery_thumbnail_path": [349, 350, 351, 354], "png": [349, 350, 351, 354], "hxh": [349, 350, 351, 352, 353, 354], "chang": [349, 350, 351, 352, 353, 354], "spyritpath": [349, 350, 351, 352, 353, 354], "getcwd": [349, 350, 351, 352, 353, 354], "imgs_path": [349, 350, 351, 352, 353, 354], "join": [349, 350, 351, 352, 353, 354], "loader": [349, 350, 351, 352, 353, 354], "folder": [349, 350, 351, 352, 353, 354], "imagefold": [349, 350, 351, 352, 353, 354], "util": [349, 350, 351, 352, 353, 354], "next": [349, 350, 351, 352, 353, 354], "detach": [349, 350, 351, 352, 353, 354], "clone": [349, 350, 351, 352, 353, 354], "plot": [349, 350, 351, 352, 353, 354], "x_plot": [349, 350, 351, 352, 353, 354], "sequenti": [349, 353, 354], "tild": [349, 353], "sim": [349, 353], "texttt": [349, 353], "useful": 349, "handl": [349, 352, 353, 354], "noiseless": [349, 352, 354], "case": [349, 352, 353, 355, 356], "ey": [349, 353, 354], "visualis": 349, "rememb": 349, "y_ey": 349, "now": [349, 350, 351, 352, 353], "maximum": [349, 350, 352, 353], "larger": [349, 353], "higher": [349, 353], "add_colorbar": [349, 351, 353, 354], "noaxi": [349, 351, 353, 354], "anoth": [349, 350, 353], "1000": 349, "final": 349, "y1_plot": 349, "y2_plot": 349, "y3_plot": 349, "set_titl": [349, 351, 353, 354], "bottom": [349, 351, 353, 354], "As": [349, 350, 351, 352, 353, 354], "Not": 349, "depend": 349, "motiv": [349, 353], "introduct": 349, "appear": [349, 353], "In": [349, 350, 351, 352, 353, 354, 356], "close": [349, 353], "link": [349, 352], "counterpart": 349, "realist": 349, "align": [], "alt": [], "directpoisson": [349, 350, 351, 352], "intend": [349, 353], "undo": [349, 350, 351, 352, 353], "m1": 349, "m2": 349, "third": 349, "m3": 349, "differ": [349, 352, 354, 355], "howev": 349, "lie": 349, "again": [349, 351], "thumbnail": [349, 351], "chosen": [350, 351, 352], "replac": [350, 351, 352], "often": [350, 352], "walsh_hadamard": [350, 351, 352], "walsh2_matrix": [350, 351, 352], "permutation_matrix": [350, 351, 352], "locat": 350, "most": 350, "keep": [350, 352], "low": [350, 351, 352], "elsewher": 350, "und": [350, 351, 352], "undersampl": [350, 351, 352], "sampling_map": [350, 351, 352], "m_xy": [350, 351, 352], "ceil": [350, 351, 352], "after": 350, "instanti": [350, 351, 352], "y_plot": 350, "squeez": [350, 351], "normalis": 350, "achiev": 350, "m_plot": [350, 351, 353, 354], "recon": [350, 351, 352, 353, 354, 356], "x_rec": [350, 351], "altern": [350, 356], "pinv_net": [350, 351], "equival": [350, 351], "One": 350, "togeth": 350, "imagecomp": 350, "x_rec_1": 350, "x_rec_2": 350, "x_plot_1": 350, "hide": 350, "crazi": 350, "collect": 350, "x_plot_2": 350, "shown": [350, 352], "postprocess": 350, "continu": [351, 353], "pinvnet_cnn": 351, "preserv": [351, 353, 354], "explant": 351, "simpl": 351, "convnet": [351, 352], "eg": 351, "unet": [351, 352, 354], "load_net": [351, 354], "pinv_net_cnn": 351, "send": [351, 352], "avail": [351, 352, 354, 356], "is_avail": [351, 352, 354], "els": [351, 352, 354], "pretrain": [351, 352, 354], "stl": [351, 352], "model_path": [351, 354], "pretrained_model_num": 351, "url_cnn": 351, "drive": [351, 352, 354], "googl": [351, 352, 354], "1igjxok06nlb5hsm3caifx0vy2byqd": 351, "zc": 351, "usp": [351, 352, 354], "drive_link": [351, 352, 354], "name_cnn": 351, "net_cnn_stl10_n0_1_n_64_m_1024_epo_1_lr_0": 351, "001_sss_10_sdr_0": [351, 352, 354], "5_bs_512_reg_1": [351, 352, 354], "07": [351, 352, 354], "elif": 351, "1tzzg1lu3axoi8": 351, "evxfgnxdtqqcjpjq9f": 351, "net_cnn_stl10_n0_1_n_64_m_1024_epo_5_lr_0": 351, "5_bs_512": 351, "1izyff1xqxj3ckanobqawyoure6bjkj4k": 351, "net_cnn_stl10_n0_1_n_64_m_1024_epo_30_lr_0": [351, 352], "mkdir": [351, 352, 354], "model_cnn_path": 351, "try": [351, 353, 354], "gdown": [351, 352, 354], "quiet": [351, 352, 354], "fuzzi": [351, 352, 354], "no_grad": [351, 354], "x_rec_cnn": 351, "x_plot2": [351, 354], "x_plot3": [351, 354], "ax1": [351, 353], "ax2": [351, 353], "ax3": [351, 353], "im1": [351, 353, 354], "im2": [351, 353, 354], "im3": [351, 353, 354], "previou": [352, 353, 354], "other": [352, 353, 356], "experi": 352, "track": 352, "visual": 352, "intermedi": 352, "data_loaders_stl10": 352, "alreadi": 352, "pre": 352, "label": 352, "mode_run": 352, "nonlinear": [352, 353], "device_count": 352, "let": 352, "dataparallel": 352, "custom": 352, "mse": 352, "weigh": 352, "decai": 352, "adam": 352, "decreas": 352, "learn": [352, 356], "rate": 352, "gamma": 352, "step_siz": 352, "lr_schedul": 352, "save_net": 352, "weight_decay_loss": 352, "lr": 352, "mseloss": 352, "steplr": 352, "train_model": 352, "feed": 352, "gradient": 352, "metric": 352, "monitor": 352, "launch": 352, "consol": 352, "logdir": 352, "open": 352, "browser": 352, "real": 352, "tab": 352, "around": 352, "40": 352, "everyth": 352, "work": 352, "fine": 352, "datetim": 352, "model_root": 352, "checkpoint_interv": 352, "interv": 352, "checkpoint": 352, "name_run": 352, "stdl10_hadampo": 352, "strftime": 352, "d_": 352, "runs_": 352, "_n": 352, "_m": 352, "train_typ": 352, "n0_": 352, "arch": 352, "suffix": 352, "_m_": 352, "_epo_": 352, "_lr_": 352, "_sss_": 352, "_sdr_": 352, "_bs_": 352, "exist_ok": 352, "pickl": 352, "train_par": 352, "param": 352, "set_loss": 352, "train_path": 352, "train_": 352, "pkl": 352, "wb": 352, "param_fil": 352, "dump": 352, "empty_cach": 352, "train_pinv": 352, "url_train": 352, "13kibseighbz8ub_jxmuqwrdmhklnfz8a": 352, "rb": 352, "train_loss": 352, "val": 352, "val_loss": 352, "sphinx_gallery_thumbnail_numb": [352, 353], "figur": 352, "legend": 352, "googlecolab": 352, "tuto_train_lin_meas_colab": 352, "hyperparamet": 352, "extend": 353, "ii": 353, "discuss": 353, "choic": 353, "strategi": [353, 354], "retain": [353, 354], "largest": [353, 354], "constant": 353, "almost": 353, "less": 353, "inform": 353, "support": 353, "princip": 353, "analysi": 353, "state": 353, "predictor": 353, "done": 353, "intern": 353, "warehous": [353, 354], "2012": 353, "girder_cli": [353, 354], "api": [353, 354], "rest": [353, 354], "url": [353, 354], "pilot": [353, 354], "creati": [353, 354, 356], "insa": [353, 354, 356], "lyon": [353, 354, 356], "fr": [353, 354, 356], "v1": [353, 354], "client": [353, 354], "gc": [353, 354], "girdercli": [353, 354], "apiurl": [353, 354], "data_fold": [353, 354], "dataid_list": [353, 354], "63935b624d15dd536f0484a5": [353, 354], "63935a224d15dd536f048496": [353, 354], "cov_nam": [353, 354], "cov_64x64": [353, 354], "npy": [353, 354], "dataid": [353, 354], "myfil": [353, 354], "getfil": [353, 354], "downloadfil": [353, 354], "found": [353, 354, 356], "increas": 353, "cov2var": [353, 354], "cov_ey": 353, "ord_nai": 353, "ord_var": 353, "further": 353, "insight": 353, "mask_nai": 353, "ma": 353, "idx": 353, "argsort": 353, "ravel": 353, "mask_var": 353, "zeros_lik": 353, "flat": 353, "vmin": 353, "vmax": 353, "chose": 353, "exploit": 353, "futur": 353, "meas_nai_op": 353, "noise_nai_op": 353, "y_nai": 353, "meas_var_op": 353, "noise_var_op": 353, "y_var": 353, "abov": 353, "previous": [353, 354, 356], "mathbb": 353, "prep_nai_op": 353, "m_nai": 353, "prep_var_op": 353, "m_var": 353, "nonoise_nai_op": 353, "y_nai_nonois": 353, "prep_nonoise_op": 353, "m_nai_nonois": 353, "meas2img2": [353, 354], "moveaxi": 353, "m_plot_max": 353, "m_plot_min": 353, "m_plot2": 353, "m_plot3": 353, "pinvnet_nai_nonois": 353, "pinvnet_nai": 353, "pinvnet_var": 353, "z_nai_nonois": 353, "z_nai": 353, "z_var": 353, "z_plot_nai_nonois": 353, "z_plot_nai": 353, "z_plot_var": 353, "im4": [353, 354], "smoother": [353, 354], "similar": 353, "post": 353, "z_invnet": 354, "four": 354, "miss": 354, "involv": 354, "z_dcnet": 354, "dcnet_unet": 354, "url_unet": 354, "15prrzj5oxkpn1ijw78lgwuubttbfco1l": 354, "model_unet_path": 354, "dc": 354, "net_unet_stl10_n0_100_n_64_m_1024_epo_30_lr_0": 354, "load_unet": 354, "z_dcnet_unet": 354, "x_plot4": 354, "tikonov": 354, "present": 355, "main": [355, 356], "repositori": 355, "research": 355, "contribut": [355, 356], "toolbox": 355, "deep": 356, "primarili": 356, "design": 356, "solv": 356, "problem": 356, "separ": 356, "compris": 356, "inherit": 356, "easili": 356, "combin": 356, "physic": 356, "unknown": 356, "compos": 356, "g_": 356, "theta": 356, "qualiti": 356, "linux": 356, "maco": 356, "window": 356, "pip": 356, "guidelin": 356, "aim": 356, "recov": 356, "few": 356, "ll": 356, "circ": 356, "composit": 356, "approach": 356, "dure": 356, "phase": 356, "min_": 356, "sum_i": 356, "x_i": 356, "y_i": 356, "_i": 356, "pair": 356, "written": 356, "learnt": 356, "simpli": 356, "plug": 356, "beforehand": 356, "f_": 356, "databas": 356, "fly": 356, "augment": 356, "avoid": 356, "storag": 356, "six": 356, "definit": 356, "known": 356, "scientif": 356, "paper": 356, "beneti": 356, "martin": 356, "mahieu": 356, "william": 356, "baudier": 356, "ducro": 356, "openspyrit": 356, "ecosystem": 356, "reproduc": 356, "hyperspectr": 356, "optic": 356, "express": 356, "vol": 356, "31": 356, "2023": 356, "doi": 356, "leclerc": 356, "peyrin": 356, "opt": 356, "29": 356, "17097": 356, "17110": 356, "feel": 356, "contact": 356, "mail": 356, "mailto": 356, "nicola": 356, "question": 356, "develop": 356, "thoma": 356, "juan": 356, "abasc": 356, "romain": 356, "phan": 356, "pull": 356, "request": 356, "pr": 356, "welcom": 356, "contributor": 356}, "objects": {"spyrit": [[0, 0, 0, "-", "core"], [169, 0, 0, "-", "misc"]], "spyrit.core": [[1, 0, 0, "-", "meas"], [46, 0, 0, "-", "nnet"], [64, 0, 0, "-", "noise"], [73, 0, 0, "-", "prep"], [86, 0, 0, "-", "recon"], [125, 0, 0, "-", "time"], [135, 0, 0, "-", "train"]], "spyrit.core.meas": [[2, 1, 1, "", "DynamicHadamSplit"], [8, 1, 1, "", "DynamicLinear"], [11, 1, 1, "", "DynamicLinearSplit"], [16, 1, 1, "", "HadamSplit"], [28, 1, 1, "", "Linear"], [36, 1, 1, "", "LinearSplit"]], "spyrit.core.meas.DynamicHadamSplit": [[3, 2, 1, "", "forward"], [4, 2, 1, "", "forward_H"], [5, 2, 1, "", "get_H"], [6, 2, 1, "", "get_P"], [7, 2, 1, "", "get_Perm"]], "spyrit.core.meas.DynamicLinear": [[9, 2, 1, "", "forward"], [10, 2, 1, "", "get_H"]], "spyrit.core.meas.DynamicLinearSplit": [[12, 2, 1, "", "forward"], [13, 2, 1, "", "forward_H"], [14, 2, 1, "", "get_H"], [15, 2, 1, "", "get_P"]], "spyrit.core.meas.HadamSplit": [[17, 2, 1, "", "adjoint"], [18, 2, 1, "", "forward"], [19, 2, 1, "", "forward_H"], [20, 2, 1, "", "get_H"], [21, 2, 1, "", "get_H_T"], [22, 2, 1, "", "get_H_pinv"], [23, 2, 1, "", "get_P"], [24, 2, 1, "", "get_Perm"], [25, 2, 1, "", "inverse"], [26, 2, 1, "", "pinv"], [27, 2, 1, "", "set_H_pinv"]], "spyrit.core.meas.Linear": [[29, 2, 1, "", "adjoint"], [30, 2, 1, "", "forward"], [31, 2, 1, "", "get_H"], [32, 2, 1, "", "get_H_T"], [33, 2, 1, "", "get_H_pinv"], [34, 2, 1, "", "pinv"], [35, 2, 1, "", "set_H_pinv"]], "spyrit.core.meas.LinearSplit": [[37, 2, 1, "", "adjoint"], [38, 2, 1, "", "forward"], [39, 2, 1, "", "forward_H"], [40, 2, 1, "", "get_H"], [41, 2, 1, "", "get_H_T"], [42, 2, 1, "", "get_H_pinv"], [43, 2, 1, "", "get_P"], [44, 2, 1, "", "pinv"], [45, 2, 1, "", "set_H_pinv"]], "spyrit.core.nnet": [[47, 1, 1, "", "ConvNet"], [49, 1, 1, "", "ConvNetBN"], [51, 1, 1, "", "DConvNet"], [53, 1, 1, "", "Identity"], [55, 1, 1, "", "List_denoi"], [57, 1, 1, "", "Unet"]], "spyrit.core.nnet.ConvNet": [[48, 2, 1, "", "forward"]], "spyrit.core.nnet.ConvNetBN": [[50, 2, 1, "", "forward"]], "spyrit.core.nnet.DConvNet": [[52, 2, 1, "", "forward"]], "spyrit.core.nnet.Identity": [[54, 2, 1, "", "forward"]], "spyrit.core.nnet.List_denoi": [[56, 2, 1, "", "forward"]], "spyrit.core.nnet.Unet": [[58, 2, 1, "", "bottle_neck"], [59, 2, 1, "", "concat"], [60, 2, 1, "", "contract"], [61, 2, 1, "", "expans"], [62, 2, 1, "", "final_block"], [63, 2, 1, "", "forward"]], "spyrit.core.noise": [[65, 1, 1, "", "NoNoise"], [67, 1, 1, "", "Poisson"], [69, 1, 1, "", "PoissonApproxGauss"], [71, 1, 1, "", "PoissonApproxGaussSameNoise"]], "spyrit.core.noise.NoNoise": [[66, 2, 1, "", "forward"]], "spyrit.core.noise.Poisson": [[68, 2, 1, "", "forward"]], "spyrit.core.noise.PoissonApproxGauss": [[70, 2, 1, "", "forward"]], "spyrit.core.noise.PoissonApproxGaussSameNoise": [[72, 2, 1, "", "forward"]], "spyrit.core.prep": [[74, 1, 1, "", "DirectPoisson"], [78, 1, 1, "", "SplitPoisson"]], "spyrit.core.prep.DirectPoisson": [[75, 2, 1, "", "denormalize_expe"], [76, 2, 1, "", "forward"], [77, 2, 1, "", "sigma"]], "spyrit.core.prep.SplitPoisson": [[79, 2, 1, "", "denormalize_expe"], [80, 2, 1, "", "forward"], [81, 2, 1, "", "forward_expe"], [82, 2, 1, "", "set_expe"], [83, 2, 1, "", "sigma"], [84, 2, 1, "", "sigma_expe"], [85, 2, 1, "", "sigma_from_image"]], "spyrit.core.recon": [[87, 1, 1, "", "DCDRUNet"], [94, 1, 1, "", "DCNet"], [99, 1, 1, "", "Denoise_layer"], [103, 1, 1, "", "PinvNet"], [110, 1, 1, "", "PositiveMonoIncreaseParameters"], [112, 1, 1, "", "PositiveParameters"], [114, 1, 1, "", "PseudoInverse"], [116, 1, 1, "", "TikhonovMeasurementPriorDiag"], [118, 1, 1, "", "UPGD"]], "spyrit.core.recon.DCDRUNet": [[88, 2, 1, "", "acquire"], [89, 2, 1, "", "concat_noise_map"], [90, 2, 1, "", "forward"], [91, 2, 1, "", "reconstruct"], [92, 2, 1, "", "reconstruct_expe"], [93, 2, 1, "", "set_noise_level"]], "spyrit.core.recon.DCNet": [[95, 2, 1, "", "acquire"], [96, 2, 1, "", "forward"], [97, 2, 1, "", "reconstruct"], [98, 2, 1, "", "reconstruct_expe"]], "spyrit.core.recon.Denoise_layer": [[100, 2, 1, "", "forward"], [101, 2, 1, "", "reset_parameters"], [102, 2, 1, "", "tikho"]], "spyrit.core.recon.PinvNet": [[104, 2, 1, "", "acquire"], [105, 2, 1, "", "forward"], [106, 2, 1, "", "meas2img"], [107, 2, 1, "", "reconstruct"], [108, 2, 1, "", "reconstruct_expe"], [109, 2, 1, "", "reconstruct_pinv"]], "spyrit.core.recon.PositiveMonoIncreaseParameters": [[111, 2, 1, "", "forward"]], "spyrit.core.recon.PositiveParameters": [[113, 2, 1, "", "forward"]], "spyrit.core.recon.PseudoInverse": [[115, 2, 1, "", "forward"]], "spyrit.core.recon.TikhonovMeasurementPriorDiag": [[117, 2, 1, "", "forward"]], "spyrit.core.recon.UPGD": [[119, 2, 1, "", "acquire"], [120, 2, 1, "", "forward"], [121, 2, 1, "", "meas2img"], [122, 2, 1, "", "reconstruct"], [123, 2, 1, "", "reconstruct_expe"], [124, 2, 1, "", "reconstruct_pinv"]], "spyrit.core.time": [[126, 1, 1, "", "AffineDeformationField"], [131, 1, 1, "", "DeformationField"], [134, 3, 1, "", "format_params"]], "spyrit.core.time.AffineDeformationField": [[127, 2, 1, "", "forward"], [128, 2, 1, "", "get_inv_mat_frames"], [129, 2, 1, "", "save_inv_grid_frames"], [130, 2, 1, "", "warp"]], "spyrit.core.time.DeformationField": [[132, 2, 1, "", "forward"], [133, 2, 1, "", "warp"]], "spyrit.core.train": [[136, 1, 1, "", "Train_par"], [142, 1, 1, "", "Weight_Decay_Loss"], [144, 3, 1, "", "attr_removal"], [145, 3, 1, "", "attr_transformation"], [146, 3, 1, "", "boxplot"], [147, 3, 1, "", "boxplotconsist"], [148, 3, 1, "", "checkpoint"], [149, 3, 1, "", "compare_model"], [150, 3, 1, "", "count_memory"], [151, 3, 1, "", "count_param"], [152, 3, 1, "", "count_trainable_param"], [153, 3, 1, "", "images_norm"], [154, 3, 1, "", "imshow"], [155, 3, 1, "", "load_net"], [156, 3, 1, "", "multiplot"], [157, 3, 1, "", "read_param"], [158, 3, 1, "", "remove_model_attributes"], [159, 3, 1, "", "rename_model_attributes"], [160, 3, 1, "", "save_net"], [161, 3, 1, "", "tb_profiler"], [162, 3, 1, "", "tb_writer_add_image"], [163, 3, 1, "", "tb_writer_add_scalar"], [164, 3, 1, "", "tb_writer_init"], [165, 3, 1, "", "train_model"], [166, 3, 1, "", "train_model_supervised"], [167, 3, 1, "", "visualize_conv_layers"], [168, 3, 1, "", "visualize_model"]], "spyrit.core.train.Train_par": [[137, 2, 1, "", "get_loss"], [138, 2, 1, "", "plot"], [139, 2, 1, "", "plot_log"], [140, 2, 1, "", "set_loss"], [141, 2, 1, "", "title"]], "spyrit.core.train.Weight_Decay_Loss": [[143, 2, 1, "", "forward"]], "spyrit.misc": [[170, 0, 0, "-", "data_visualisation"], [175, 0, 0, "-", "disp"], [194, 0, 0, "-", "examples"], [198, 0, 0, "-", "load_data"], [203, 0, 0, "-", "matrix_tools"], [217, 0, 0, "-", "metrics"], [233, 0, 0, "-", "pattern_choice"], [280, 0, 0, "-", "sampling"], [287, 0, 0, "-", "statistics"], [305, 0, 0, "-", "walsh_hadamard"]], "spyrit.misc.data_visualisation": [[171, 3, 1, "", "plot_im2D"], [172, 3, 1, "", "show_image_and_infos"], [173, 3, 1, "", "show_images_infos"], [174, 3, 1, "", "simple_plot_2D"]], "spyrit.misc.disp": [[176, 3, 1, "", "Multi_plots"], [177, 3, 1, "", "add_colorbar"], [178, 3, 1, "", "compare_video_frames"], [179, 3, 1, "", "display_rgb_vid"], [180, 3, 1, "", "display_vid"], [181, 3, 1, "", "fitPlots"], [182, 3, 1, "", "histogram"], [183, 3, 1, "", "imagecomp"], [184, 3, 1, "", "imagepanel"], [185, 3, 1, "", "imagesc"], [186, 3, 1, "", "noaxis"], [187, 3, 1, "", "plot"], [188, 3, 1, "", "pre_process_video"], [189, 3, 1, "", "print_mean_std"], [190, 3, 1, "", "string_mean_std"], [191, 3, 1, "", "torch2numpy"], [192, 3, 1, "", "uint8"], [193, 3, 1, "", "vid2batch"]], "spyrit.misc.examples": [[195, 3, 1, "", "circle"], [196, 3, 1, "", "permutation_matrix"], [197, 3, 1, "", "translation_matrix"]], "spyrit.misc.load_data": [[199, 3, 1, "", "Files_names"], [200, 3, 1, "", "load_data_Comp_1D_new"], [201, 3, 1, "", "load_data_Comp_1D_old"], [202, 3, 1, "", "load_data_recon_3D"]], "spyrit.misc.matrix_tools": [[204, 3, 1, "", "Permutation_Matrix"], [205, 3, 1, "", "Sum_coll"], [206, 3, 1, "", "clean_out"], [207, 3, 1, "", "compression_1D"], [208, 3, 1, "", "data_conv_hadamard"], [209, 3, 1, "", "expend_vect"], [210, 3, 1, "", "normalize_by_median_mat_2D"], [211, 3, 1, "", "normalize_mat_2D"], [212, 3, 1, "", "reject_outliers"], [213, 3, 1, "", "remove_offset_mat_2D"], [214, 3, 1, "", "resize"], [215, 3, 1, "", "smooth"], [216, 3, 1, "", "stack_depth_matrice"]], "spyrit.misc.metrics": [[218, 3, 1, "", "batch_psnr"], [219, 3, 1, "", "batch_psnr_vid"], [220, 3, 1, "", "batch_ssim"], [221, 3, 1, "", "batch_ssim_vid"], [222, 3, 1, "", "compare_nets_unsupervised"], [223, 3, 1, "", "compare_video_nets_supervised"], [224, 3, 1, "", "dataset_meas"], [225, 3, 1, "", "dataset_psnr"], [226, 3, 1, "", "dataset_psnr_ssim"], [227, 3, 1, "", "dataset_psnr_ssim_fcl"], [228, 3, 1, "", "dataset_ssim"], [229, 3, 1, "", "print_mean_std"], [230, 3, 1, "", "psnr"], [231, 3, 1, "", "psnr_"], [232, 3, 1, "", "ssim"]], "spyrit.misc.pattern_choice": [[234, 1, 1, "", "Basis_patterns"], [243, 1, 1, "", "Custom_patterns"], [252, 3, 1, "", "Daubechies"], [253, 3, 1, "", "Daubechies_opt"], [254, 3, 1, "", "Fourier"], [255, 3, 1, "", "Fourier_opt"], [256, 3, 1, "", "Haar"], [257, 3, 1, "", "Haar_opt"], [258, 3, 1, "", "Hadamard"], [259, 3, 1, "", "Hadamard_opt"], [260, 1, 1, "", "Optimized_patterns"], [269, 1, 1, "", "Patterns"], [277, 3, 1, "", "matrix2conv"], [278, 3, 1, "", "shift"], [279, 3, 1, "", "split"]], "spyrit.misc.pattern_choice.Basis_patterns": [[235, 2, 1, "", "add_desired_pattern"], [236, 2, 1, "", "add_desired_patterns"], [237, 2, 1, "", "get_all_desired_pattern"], [238, 2, 1, "", "get_desired_pattern"], [239, 2, 1, "", "get_measurement_matrix"], [240, 2, 1, "", "save_measurement_matrix"], [241, 2, 1, "", "set_desired_pattern"], [242, 2, 1, "", "set_measurement_matrix"]], "spyrit.misc.pattern_choice.Custom_patterns": [[244, 2, 1, "", "add_desired_pattern"], [245, 2, 1, "", "add_desired_patterns"], [246, 2, 1, "", "get_all_desired_pattern"], [247, 2, 1, "", "get_desired_pattern"], [248, 2, 1, "", "get_measurement_matrix"], [249, 2, 1, "", "save_measurement_matrix"], [250, 2, 1, "", "set_desired_pattern"], [251, 2, 1, "", "set_measurement_matrix"]], "spyrit.misc.pattern_choice.Optimized_patterns": [[261, 2, 1, "", "add_desired_pattern"], [262, 2, 1, "", "add_desired_patterns"], [263, 2, 1, "", "get_all_desired_pattern"], [264, 2, 1, "", "get_desired_pattern"], [265, 2, 1, "", "get_measurement_matrix"], [266, 2, 1, "", "save_measurement_matrix"], [267, 2, 1, "", "set_desired_pattern"], [268, 2, 1, "", "set_measurement_matrix"]], "spyrit.misc.pattern_choice.Patterns": [[270, 2, 1, "", "add_desired_patterns"], [271, 2, 1, "", "get_all_desired_pattern"], [272, 2, 1, "", "get_desired_pattern"], [273, 2, 1, "", "get_measurement_matrix"], [274, 2, 1, "", "save_measurement_matrix"], [275, 2, 1, "", "set_desired_pattern"], [276, 2, 1, "", "set_measurement_matrix"]], "spyrit.misc.sampling": [[281, 3, 1, "", "Permutation_Matrix"], [282, 3, 1, "", "img2mask"], [283, 3, 1, "", "img2meas"], [284, 3, 1, "", "meas2img"], [285, 3, 1, "", "meas2img2"], [286, 3, 1, "", "reorder"]], "spyrit.misc.statistics": [[288, 1, 1, "", "CenterCrop"], [289, 3, 1, "", "Cov2Var"], [290, 3, 1, "", "cov_walsh"], [291, 3, 1, "", "data_loaders_ImageNet"], [292, 3, 1, "", "data_loaders_stl10"], [293, 3, 1, "", "img2mask"], [294, 3, 1, "", "mea_abs_model"], [295, 3, 1, "", "mean_walsh"], [296, 3, 1, "", "optim_had"], [297, 3, 1, "", "stat_fwalsh_S"], [298, 3, 1, "", "stat_fwalsh_S_stl10"], [299, 3, 1, "", "stat_mean_coef_from_model"], [300, 3, 1, "", "stat_model"], [301, 3, 1, "", "stat_walsh"], [302, 3, 1, "", "stat_walsh_ImageNet"], [303, 3, 1, "", "stat_walsh_stl10"], [304, 3, 1, "", "transform_gray_norm"]], "spyrit.misc.walsh_hadamard": [[306, 3, 1, "", "b2_to_b10"], [307, 3, 1, "", "bit_reverse_traverse"], [308, 3, 1, "", "bit_reversed_list"], [309, 3, 1, "", "bit_reversed_matrix"], [310, 3, 1, "", "fwalsh2_S"], [311, 3, 1, "", "fwalsh2_S_torch"], [312, 3, 1, "", "fwalsh_G"], [313, 3, 1, "", "fwalsh_G_torch"], [314, 3, 1, "", "fwalsh_S"], [315, 3, 1, "", "fwalsh_S_torch"], [316, 3, 1, "", "fwht"], [317, 3, 1, "", "fwht_torch"], [318, 3, 1, "", "get_bit_reversed_list"], [319, 3, 1, "", "gray_code_list"], [320, 3, 1, "", "gray_code_permutation"], [321, 3, 1, "", "ifwalsh2_S"], [322, 3, 1, "", "ifwalsh_S"], [323, 3, 1, "", "iwalsh2"], [324, 3, 1, "", "iwalsh2_S"], [325, 3, 1, "", "iwalsh_S"], [326, 3, 1, "", "iwalsh_S_matrix"], [327, 3, 1, "", "perm_matrix_from_ind"], [328, 3, 1, "", "sequency_perm"], [329, 3, 1, "", "sequency_perm_ind"], [330, 3, 1, "", "sequency_perm_matrix"], [331, 3, 1, "", "sequency_perm_torch"], [332, 3, 1, "", "walsh2"], [333, 3, 1, "", "walsh2_S"], [334, 3, 1, "", "walsh2_S_fold"], [335, 3, 1, "", "walsh2_S_fold_torch"], [336, 3, 1, "", "walsh2_S_matrix"], [337, 3, 1, "", "walsh2_S_unfold"], [338, 3, 1, "", "walsh2_S_unfold_torch"], [339, 3, 1, "", "walsh2_matrix"], [340, 3, 1, "", "walsh2_torch"], [341, 3, 1, "", "walsh_G"], [342, 3, 1, "", "walsh_G_matrix"], [343, 3, 1, "", "walsh_S"], [344, 3, 1, "", "walsh_S_matrix"], [345, 3, 1, "", "walsh_matrix"], [346, 3, 1, "", "walsh_torch"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"spyrit": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 356], "core": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168], "mea": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], "dynamichadamsplit": [2, 3, 4, 5, 6, 7], "forward": [3, 9, 12, 18, 30, 38, 48, 50, 52, 54, 56, 63, 66, 68, 70, 72, 76, 80, 90, 96, 100, 105, 111, 113, 115, 117, 120, 127, 132, 143, 354], "forward_h": [4, 13, 19, 39], "get_h": [5, 10, 14, 20, 31, 40], "get_p": [6, 15, 23, 43], "get_perm": [7, 24], "dynamiclinear": [8, 9, 10], "dynamiclinearsplit": [11, 12, 13, 14, 15], "hadamsplit": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], "adjoint": [17, 29, 37], "get_h_t": [21, 32, 41], "get_h_pinv": [22, 33, 42], "invers": [25, 350], "pinv": [26, 34, 44], "set_h_pinv": [27, 35, 45], "linear": [28, 29, 30, 31, 32, 33, 34, 35, 350], "linearsplit": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45], "nnet": [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "convnet": [47, 48], "convnetbn": [49, 50], "dconvnet": [51, 52], "ident": [53, 54, 349], "list_denoi": [55, 56], "unet": [57, 58, 59, 60, 61, 62, 63], "bottle_neck": 58, "concat": 59, "contract": 60, "expan": 61, "final_block": 62, "nois": [64, 65, 66, 67, 68, 69, 70, 71, 72, 349, 353], "nonois": [65, 66], "poisson": [67, 68, 349, 350], "poissonapproxgauss": [69, 70], "poissonapproxgausssamenois": [71, 72], "prep": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85], "directpoisson": [74, 75, 76, 77], "denormalize_exp": [75, 79], "sigma": [77, 83], "splitpoisson": [78, 79, 80, 81, 82, 83, 84, 85], "forward_exp": 81, "set_exp": 82, "sigma_exp": 84, "sigma_from_imag": 85, "recon": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], "dcdrunet": [87, 88, 89, 90, 91, 92, 93], "acquir": [88, 95, 104, 119], "concat_noise_map": 89, "reconstruct": [91, 97, 107, 122, 356], "reconstruct_exp": [92, 98, 108, 123], "set_noise_level": 93, "dcnet": [94, 95, 96, 97, 98, 354], "denoise_lay": [99, 100, 101, 102], "reset_paramet": 101, "tikho": 102, "pinvnet": [103, 104, 105, 106, 107, 108, 109, 350, 351, 352, 353, 354], "meas2img": [106, 121, 284], "reconstruct_pinv": [109, 124], "positivemonoincreaseparamet": [110, 111], "positiveparamet": [112, 113], "pseudoinvers": [114, 115, 350, 351, 352], "tikhonovmeasurementpriordiag": [116, 117], "upgd": [118, 119, 120, 121, 122, 123, 124], "time": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 348, 357], "affinedeformationfield": [126, 127, 128, 129, 130], "get_inv_mat_fram": 128, "save_inv_grid_fram": 129, "warp": [130, 133], "deformationfield": [131, 132, 133], "format_param": 134, "train": [135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 352], "train_par": [136, 137, 138, 139, 140, 141], "get_loss": 137, "plot": [138, 187], "plot_log": 139, "set_loss": 140, "titl": 141, "weight_decay_loss": [142, 143], "attr_remov": 144, "attr_transform": 145, "boxplot": 146, "boxplotconsist": 147, "checkpoint": 148, "compare_model": 149, "count_memori": 150, "count_param": 151, "count_trainable_param": 152, "images_norm": 153, "imshow": 154, "load_net": 155, "multiplot": 156, "read_param": 157, "remove_model_attribut": 158, "rename_model_attribut": 159, "save_net": 160, "tb_profil": 161, "tb_writer_add_imag": 162, "tb_writer_add_scalar": 163, "tb_writer_init": 164, "train_model": 165, "train_model_supervis": 166, "visualize_conv_lay": 167, "visualize_model": 168, "misc": [169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346], "data_visualis": [170, 171, 172, 173, 174], "plot_im2d": 171, "show_image_and_info": 172, "show_images_info": 173, "simple_plot_2d": 174, "disp": [175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193], "multi_plot": 176, "add_colorbar": 177, "compare_video_fram": 178, "display_rgb_vid": 179, "display_vid": 180, "fitplot": 181, "histogram": 182, "imagecomp": 183, "imagepanel": 184, "imagesc": 185, "noaxi": 186, "pre_process_video": 188, "print_mean_std": [189, 229], "string_mean_std": 190, "torch2numpi": 191, "uint8": 192, "vid2batch": 193, "exampl": [194, 195, 196, 197, 349], "circl": 195, "permutation_matrix": [196, 204, 281], "translation_matrix": 197, "load_data": [198, 199, 200, 201, 202], "files_nam": 199, "load_data_comp_1d_new": 200, "load_data_comp_1d_old": 201, "load_data_recon_3d": 202, "matrix_tool": [203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216], "sum_col": 205, "clean_out": 206, "compression_1d": 207, "data_conv_hadamard": 208, "expend_vect": 209, "normalize_by_median_mat_2d": 210, "normalize_mat_2d": 211, "reject_outli": 212, "remove_offset_mat_2d": 213, "resiz": 214, "smooth": 215, "stack_depth_matric": 216, "metric": [217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232], "batch_psnr": 218, "batch_psnr_vid": 219, "batch_ssim": 220, "batch_ssim_vid": 221, "compare_nets_unsupervis": 222, "compare_video_nets_supervis": 223, "dataset_mea": 224, "dataset_psnr": 225, "dataset_psnr_ssim": 226, "dataset_psnr_ssim_fcl": 227, "dataset_ssim": 228, "psnr": 230, "psnr_": 231, "ssim": 232, "pattern_choic": [233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279], "basis_pattern": [234, 235, 236, 237, 238, 239, 240, 241, 242], "add_desired_pattern": [235, 236, 244, 245, 261, 262, 270], "get_all_desired_pattern": [237, 246, 263, 271], "get_desired_pattern": [238, 247, 264, 272], "get_measurement_matrix": [239, 248, 265, 273], "save_measurement_matrix": [240, 249, 266, 274], "set_desired_pattern": [241, 250, 267, 275], "set_measurement_matrix": [242, 251, 268, 276], "custom_pattern": [243, 244, 245, 246, 247, 248, 249, 250, 251], "daubechi": 252, "daubechies_opt": 253, "fourier": 254, "fourier_opt": 255, "haar": 256, "haar_opt": 257, "hadamard": 258, "hadamard_opt": 259, "optimized_pattern": [260, 261, 262, 263, 264, 265, 266, 267, 268], "pattern": [269, 270, 271, 272, 273, 274, 275, 276], "matrix2conv": 277, "shift": 278, "split": [279, 353, 354], "sampl": [280, 281, 282, 283, 284, 285, 286], "img2mask": [282, 293], "img2mea": 283, "meas2img2": 285, "reorder": 286, "statist": [287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304], "centercrop": 288, "cov2var": 289, "cov_walsh": 290, "data_loaders_imagenet": 291, "data_loaders_stl10": 292, "mea_abs_model": 294, "mean_walsh": 295, "optim_had": 296, "stat_fwalsh_": 297, "stat_fwalsh_s_stl10": 298, "stat_mean_coef_from_model": 299, "stat_model": 300, "stat_walsh": 301, "stat_walsh_imagenet": 302, "stat_walsh_stl10": 303, "transform_gray_norm": 304, "walsh_hadamard": [305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346], "b2_to_b10": 306, "bit_reverse_travers": 307, "bit_reversed_list": 308, "bit_reversed_matrix": 309, "fwalsh2_": 310, "fwalsh2_s_torch": 311, "fwalsh_g": 312, "fwalsh_g_torch": 313, "fwalsh_": 314, "fwalsh_s_torch": 315, "fwht": 316, "fwht_torch": 317, "get_bit_reversed_list": 318, "gray_code_list": 319, "gray_code_permut": 320, "ifwalsh2_": 321, "ifwalsh_": 322, "iwalsh2": 323, "iwalsh2_": 324, "iwalsh_": 325, "iwalsh_s_matrix": 326, "perm_matrix_from_ind": 327, "sequency_perm": 328, "sequency_perm_ind": 329, "sequency_perm_matrix": 330, "sequency_perm_torch": 331, "walsh2": 332, "walsh2_": 333, "walsh2_s_fold": 334, "walsh2_s_fold_torch": 335, "walsh2_s_matrix": 336, "walsh2_s_unfold": 337, "walsh2_s_unfold_torch": 338, "walsh2_matrix": 339, "walsh2_torch": 340, "walsh_g": 341, "walsh_g_matrix": 342, "walsh_": 343, "walsh_s_matrix": 344, "walsh_matrix": 345, "walsh_torch": 346, "tutori": [347, 356], "comput": [348, 357], "01": 349, "acquisit": [349, 353], "oper": [349, 350, 351, 352, 353, 354], "load": [349, 350, 351, 352, 353, 354], "batch": [349, 350, 351, 352, 353, 354], "imag": [349, 350, 351, 352, 353, 354, 356], "The": [349, 353], "measur": [349, 350, 351, 352, 353, 354, 356], "A": 349, "simpl": 349, "matrix": 349, "same": 349, "preprocess": [349, 353], "02": 350, "solut": [350, 351, 352, 354], "from": 350, "defin": [350, 351, 352], "noiseless": [350, 351, 353], "case": [350, 351], "pseudo": 350, "network": [350, 351, 352, 353, 354], "corrupt": [349, 350], "03": 351, "cnn": [351, 352], "denois": [351, 352], "remov": 351, "artefact": 351, "04": 352, "dataload": 352, "loss": 352, "function": 352, "optim": 352, "schedul": 352, "save": 352, "histori": 352, "05": 353, "advanc": [353, 355], "subsampl": 353, "06": 354, "bonu": 355, "method": 355, "colab": 355, "": 356, "document": 356, "instal": 356, "singl": 356, "pixel": 356, "model": 356, "packag": 356, "structur": 356, "subpackag": 356, "cite": 356, "u": 356, "join": 356, "project": 356}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"spyrit.core": [[0, "module-spyrit.core"]], "spyrit.core.meas": [[1, "module-spyrit.core.meas"]], "spyrit.core.meas.DynamicHadamSplit": [[2, "spyrit-core-meas-dynamichadamsplit"]], "spyrit.core.meas.DynamicHadamSplit.forward": [[3, "spyrit-core-meas-dynamichadamsplit-forward"]], "spyrit.core.meas.DynamicHadamSplit.forward_H": [[4, "spyrit-core-meas-dynamichadamsplit-forward-h"]], "spyrit.core.meas.DynamicHadamSplit.get_H": [[5, "spyrit-core-meas-dynamichadamsplit-get-h"]], "spyrit.core.meas.DynamicHadamSplit.get_P": [[6, "spyrit-core-meas-dynamichadamsplit-get-p"]], "spyrit.core.meas.DynamicHadamSplit.get_Perm": [[7, "spyrit-core-meas-dynamichadamsplit-get-perm"]], "spyrit.core.meas.DynamicLinear": [[8, "spyrit-core-meas-dynamiclinear"]], "spyrit.core.meas.DynamicLinear.forward": [[9, "spyrit-core-meas-dynamiclinear-forward"]], "spyrit.core.meas.DynamicLinear.get_H": [[10, "spyrit-core-meas-dynamiclinear-get-h"]], "spyrit.core.meas.DynamicLinearSplit": [[11, "spyrit-core-meas-dynamiclinearsplit"]], "spyrit.core.meas.DynamicLinearSplit.forward": [[12, "spyrit-core-meas-dynamiclinearsplit-forward"]], "spyrit.core.meas.DynamicLinearSplit.forward_H": [[13, "spyrit-core-meas-dynamiclinearsplit-forward-h"]], "spyrit.core.meas.DynamicLinearSplit.get_H": [[14, "spyrit-core-meas-dynamiclinearsplit-get-h"]], "spyrit.core.meas.DynamicLinearSplit.get_P": [[15, "spyrit-core-meas-dynamiclinearsplit-get-p"]], "spyrit.core.meas.HadamSplit": [[16, "spyrit-core-meas-hadamsplit"]], "spyrit.core.meas.HadamSplit.adjoint": [[17, "spyrit-core-meas-hadamsplit-adjoint"]], "spyrit.core.meas.HadamSplit.forward": [[18, "spyrit-core-meas-hadamsplit-forward"]], "spyrit.core.meas.HadamSplit.forward_H": [[19, "spyrit-core-meas-hadamsplit-forward-h"]], "spyrit.core.meas.HadamSplit.get_H": [[20, "spyrit-core-meas-hadamsplit-get-h"]], "spyrit.core.meas.HadamSplit.get_H_T": [[21, "spyrit-core-meas-hadamsplit-get-h-t"]], "spyrit.core.meas.HadamSplit.get_H_pinv": [[22, "spyrit-core-meas-hadamsplit-get-h-pinv"]], "spyrit.core.meas.HadamSplit.get_P": [[23, "spyrit-core-meas-hadamsplit-get-p"]], "spyrit.core.meas.HadamSplit.get_Perm": [[24, "spyrit-core-meas-hadamsplit-get-perm"]], "spyrit.core.meas.HadamSplit.inverse": [[25, "spyrit-core-meas-hadamsplit-inverse"]], "spyrit.core.meas.HadamSplit.pinv": [[26, "spyrit-core-meas-hadamsplit-pinv"]], "spyrit.core.meas.HadamSplit.set_H_pinv": [[27, "spyrit-core-meas-hadamsplit-set-h-pinv"]], "spyrit.core.meas.Linear": [[28, "spyrit-core-meas-linear"]], "spyrit.core.meas.Linear.adjoint": [[29, "spyrit-core-meas-linear-adjoint"]], "spyrit.core.meas.Linear.forward": [[30, "spyrit-core-meas-linear-forward"]], "spyrit.core.meas.Linear.get_H": [[31, "spyrit-core-meas-linear-get-h"]], "spyrit.core.meas.Linear.get_H_T": [[32, "spyrit-core-meas-linear-get-h-t"]], "spyrit.core.meas.Linear.get_H_pinv": [[33, "spyrit-core-meas-linear-get-h-pinv"]], "spyrit.core.meas.Linear.pinv": [[34, "spyrit-core-meas-linear-pinv"]], "spyrit.core.meas.Linear.set_H_pinv": [[35, "spyrit-core-meas-linear-set-h-pinv"]], "spyrit.core.meas.LinearSplit": [[36, "spyrit-core-meas-linearsplit"]], "spyrit.core.meas.LinearSplit.adjoint": [[37, "spyrit-core-meas-linearsplit-adjoint"]], "spyrit.core.meas.LinearSplit.forward": [[38, "spyrit-core-meas-linearsplit-forward"]], "spyrit.core.meas.LinearSplit.forward_H": [[39, "spyrit-core-meas-linearsplit-forward-h"]], "spyrit.core.meas.LinearSplit.get_H": [[40, "spyrit-core-meas-linearsplit-get-h"]], "spyrit.core.meas.LinearSplit.get_H_T": [[41, "spyrit-core-meas-linearsplit-get-h-t"]], "spyrit.core.meas.LinearSplit.get_H_pinv": [[42, "spyrit-core-meas-linearsplit-get-h-pinv"]], "spyrit.core.meas.LinearSplit.get_P": [[43, "spyrit-core-meas-linearsplit-get-p"]], "spyrit.core.meas.LinearSplit.pinv": [[44, "spyrit-core-meas-linearsplit-pinv"]], "spyrit.core.meas.LinearSplit.set_H_pinv": [[45, "spyrit-core-meas-linearsplit-set-h-pinv"]], "spyrit.core.nnet": [[46, "module-spyrit.core.nnet"]], "spyrit.core.nnet.ConvNet": [[47, "spyrit-core-nnet-convnet"]], "spyrit.core.nnet.ConvNet.forward": [[48, "spyrit-core-nnet-convnet-forward"]], "spyrit.core.nnet.ConvNetBN": [[49, "spyrit-core-nnet-convnetbn"]], "spyrit.core.nnet.ConvNetBN.forward": [[50, "spyrit-core-nnet-convnetbn-forward"]], "spyrit.core.nnet.DConvNet": [[51, "spyrit-core-nnet-dconvnet"]], "spyrit.core.nnet.DConvNet.forward": [[52, "spyrit-core-nnet-dconvnet-forward"]], "spyrit.core.nnet.Identity": [[53, "spyrit-core-nnet-identity"]], "spyrit.core.nnet.Identity.forward": [[54, "spyrit-core-nnet-identity-forward"]], "spyrit.core.nnet.List_denoi": [[55, "spyrit-core-nnet-list-denoi"]], "spyrit.core.nnet.List_denoi.forward": [[56, "spyrit-core-nnet-list-denoi-forward"]], "spyrit.core.nnet.Unet": [[57, "spyrit-core-nnet-unet"]], "spyrit.core.nnet.Unet.bottle_neck": [[58, "spyrit-core-nnet-unet-bottle-neck"]], "spyrit.core.nnet.Unet.concat": [[59, "spyrit-core-nnet-unet-concat"]], "spyrit.core.nnet.Unet.contract": [[60, "spyrit-core-nnet-unet-contract"]], "spyrit.core.nnet.Unet.expans": [[61, "spyrit-core-nnet-unet-expans"]], "spyrit.core.nnet.Unet.final_block": [[62, "spyrit-core-nnet-unet-final-block"]], "spyrit.core.nnet.Unet.forward": [[63, "spyrit-core-nnet-unet-forward"]], "spyrit.core.noise": [[64, "module-spyrit.core.noise"]], "spyrit.core.noise.NoNoise": [[65, "spyrit-core-noise-nonoise"]], "spyrit.core.noise.NoNoise.forward": [[66, "spyrit-core-noise-nonoise-forward"]], "spyrit.core.noise.Poisson": [[67, "spyrit-core-noise-poisson"]], "spyrit.core.noise.Poisson.forward": [[68, "spyrit-core-noise-poisson-forward"]], "spyrit.core.noise.PoissonApproxGauss": [[69, "spyrit-core-noise-poissonapproxgauss"]], "spyrit.core.noise.PoissonApproxGauss.forward": [[70, "spyrit-core-noise-poissonapproxgauss-forward"]], "spyrit.core.noise.PoissonApproxGaussSameNoise": [[71, "spyrit-core-noise-poissonapproxgausssamenoise"]], "spyrit.core.noise.PoissonApproxGaussSameNoise.forward": [[72, "spyrit-core-noise-poissonapproxgausssamenoise-forward"]], "spyrit.core.prep": [[73, "module-spyrit.core.prep"]], "spyrit.core.prep.DirectPoisson": [[74, "spyrit-core-prep-directpoisson"]], "spyrit.core.prep.DirectPoisson.denormalize_expe": [[75, "spyrit-core-prep-directpoisson-denormalize-expe"]], "spyrit.core.prep.DirectPoisson.forward": [[76, "spyrit-core-prep-directpoisson-forward"]], "spyrit.core.prep.DirectPoisson.sigma": [[77, "spyrit-core-prep-directpoisson-sigma"]], "spyrit.core.prep.SplitPoisson": [[78, "spyrit-core-prep-splitpoisson"]], "spyrit.core.prep.SplitPoisson.denormalize_expe": [[79, "spyrit-core-prep-splitpoisson-denormalize-expe"]], "spyrit.core.prep.SplitPoisson.forward": [[80, "spyrit-core-prep-splitpoisson-forward"]], "spyrit.core.prep.SplitPoisson.forward_expe": [[81, "spyrit-core-prep-splitpoisson-forward-expe"]], "spyrit.core.prep.SplitPoisson.set_expe": [[82, "spyrit-core-prep-splitpoisson-set-expe"]], "spyrit.core.prep.SplitPoisson.sigma": [[83, "spyrit-core-prep-splitpoisson-sigma"]], "spyrit.core.prep.SplitPoisson.sigma_expe": [[84, "spyrit-core-prep-splitpoisson-sigma-expe"]], "spyrit.core.prep.SplitPoisson.sigma_from_image": [[85, "spyrit-core-prep-splitpoisson-sigma-from-image"]], "spyrit.core.recon": [[86, "module-spyrit.core.recon"]], "spyrit.core.recon.DCDRUNet": [[87, "spyrit-core-recon-dcdrunet"]], "spyrit.core.recon.DCDRUNet.acquire": [[88, "spyrit-core-recon-dcdrunet-acquire"]], "spyrit.core.recon.DCDRUNet.concat_noise_map": [[89, "spyrit-core-recon-dcdrunet-concat-noise-map"]], "spyrit.core.recon.DCDRUNet.forward": [[90, "spyrit-core-recon-dcdrunet-forward"]], "spyrit.core.recon.DCDRUNet.reconstruct": [[91, "spyrit-core-recon-dcdrunet-reconstruct"]], "spyrit.core.recon.DCDRUNet.reconstruct_expe": [[92, "spyrit-core-recon-dcdrunet-reconstruct-expe"]], "spyrit.core.recon.DCDRUNet.set_noise_level": [[93, "spyrit-core-recon-dcdrunet-set-noise-level"]], "spyrit.core.recon.DCNet": [[94, "spyrit-core-recon-dcnet"]], "spyrit.core.recon.DCNet.acquire": [[95, "spyrit-core-recon-dcnet-acquire"]], "spyrit.core.recon.DCNet.forward": [[96, "spyrit-core-recon-dcnet-forward"]], "spyrit.core.recon.DCNet.reconstruct": [[97, "spyrit-core-recon-dcnet-reconstruct"]], "spyrit.core.recon.DCNet.reconstruct_expe": [[98, "spyrit-core-recon-dcnet-reconstruct-expe"]], "spyrit.core.recon.Denoise_layer": [[99, "spyrit-core-recon-denoise-layer"]], "spyrit.core.recon.Denoise_layer.forward": [[100, "spyrit-core-recon-denoise-layer-forward"]], "spyrit.core.recon.Denoise_layer.reset_parameters": [[101, "spyrit-core-recon-denoise-layer-reset-parameters"]], "spyrit.core.recon.Denoise_layer.tikho": [[102, "spyrit-core-recon-denoise-layer-tikho"]], "spyrit.core.recon.PinvNet": [[103, "spyrit-core-recon-pinvnet"]], "spyrit.core.recon.PinvNet.acquire": [[104, "spyrit-core-recon-pinvnet-acquire"]], "spyrit.core.recon.PinvNet.forward": [[105, "spyrit-core-recon-pinvnet-forward"]], "spyrit.core.recon.PinvNet.meas2img": [[106, "spyrit-core-recon-pinvnet-meas2img"]], "spyrit.core.recon.PinvNet.reconstruct": [[107, "spyrit-core-recon-pinvnet-reconstruct"]], "spyrit.core.recon.PinvNet.reconstruct_expe": [[108, "spyrit-core-recon-pinvnet-reconstruct-expe"]], "spyrit.core.recon.PinvNet.reconstruct_pinv": [[109, "spyrit-core-recon-pinvnet-reconstruct-pinv"]], "spyrit.core.recon.PositiveMonoIncreaseParameters": [[110, "spyrit-core-recon-positivemonoincreaseparameters"]], "spyrit.core.recon.PositiveMonoIncreaseParameters.forward": [[111, "spyrit-core-recon-positivemonoincreaseparameters-forward"]], "spyrit.core.recon.PositiveParameters": [[112, "spyrit-core-recon-positiveparameters"]], "spyrit.core.recon.PositiveParameters.forward": [[113, "spyrit-core-recon-positiveparameters-forward"]], "spyrit.core.recon.PseudoInverse": [[114, "spyrit-core-recon-pseudoinverse"]], "spyrit.core.recon.PseudoInverse.forward": [[115, "spyrit-core-recon-pseudoinverse-forward"]], "spyrit.core.recon.TikhonovMeasurementPriorDiag": [[116, "spyrit-core-recon-tikhonovmeasurementpriordiag"]], "spyrit.core.recon.TikhonovMeasurementPriorDiag.forward": [[117, "spyrit-core-recon-tikhonovmeasurementpriordiag-forward"]], "spyrit.core.recon.UPGD": [[118, "spyrit-core-recon-upgd"]], "spyrit.core.recon.UPGD.acquire": [[119, "spyrit-core-recon-upgd-acquire"]], "spyrit.core.recon.UPGD.forward": [[120, "spyrit-core-recon-upgd-forward"]], "spyrit.core.recon.UPGD.meas2img": [[121, "spyrit-core-recon-upgd-meas2img"]], "spyrit.core.recon.UPGD.reconstruct": [[122, "spyrit-core-recon-upgd-reconstruct"]], "spyrit.core.recon.UPGD.reconstruct_expe": [[123, "spyrit-core-recon-upgd-reconstruct-expe"]], "spyrit.core.recon.UPGD.reconstruct_pinv": [[124, "spyrit-core-recon-upgd-reconstruct-pinv"]], "spyrit.core.time": [[125, "module-spyrit.core.time"]], "spyrit.core.time.AffineDeformationField": [[126, "spyrit-core-time-affinedeformationfield"]], "spyrit.core.time.AffineDeformationField.forward": [[127, "spyrit-core-time-affinedeformationfield-forward"]], "spyrit.core.time.AffineDeformationField.get_inv_mat_frames": [[128, "spyrit-core-time-affinedeformationfield-get-inv-mat-frames"]], "spyrit.core.time.AffineDeformationField.save_inv_grid_frames": [[129, "spyrit-core-time-affinedeformationfield-save-inv-grid-frames"]], "spyrit.core.time.AffineDeformationField.warp": [[130, "spyrit-core-time-affinedeformationfield-warp"]], "spyrit.core.time.DeformationField": [[131, "spyrit-core-time-deformationfield"]], "spyrit.core.time.DeformationField.forward": [[132, "spyrit-core-time-deformationfield-forward"]], "spyrit.core.time.DeformationField.warp": [[133, "spyrit-core-time-deformationfield-warp"]], "spyrit.core.time.format_params": [[134, "spyrit-core-time-format-params"]], "spyrit.core.train": [[135, "module-spyrit.core.train"]], "spyrit.core.train.Train_par": [[136, "spyrit-core-train-train-par"]], "spyrit.core.train.Train_par.get_loss": [[137, "spyrit-core-train-train-par-get-loss"]], "spyrit.core.train.Train_par.plot": [[138, "spyrit-core-train-train-par-plot"]], "spyrit.core.train.Train_par.plot_log": [[139, "spyrit-core-train-train-par-plot-log"]], "spyrit.core.train.Train_par.set_loss": [[140, "spyrit-core-train-train-par-set-loss"]], "spyrit.core.train.Train_par.title": [[141, "spyrit-core-train-train-par-title"]], "spyrit.core.train.Weight_Decay_Loss": [[142, "spyrit-core-train-weight-decay-loss"]], "spyrit.core.train.Weight_Decay_Loss.forward": [[143, "spyrit-core-train-weight-decay-loss-forward"]], "spyrit.core.train.attr_removal": [[144, "spyrit-core-train-attr-removal"]], "spyrit.core.train.attr_transformation": [[145, "spyrit-core-train-attr-transformation"]], "spyrit.core.train.boxplot": [[146, "spyrit-core-train-boxplot"]], "spyrit.core.train.boxplotconsist": [[147, "spyrit-core-train-boxplotconsist"]], "spyrit.core.train.checkpoint": [[148, "spyrit-core-train-checkpoint"]], "spyrit.core.train.compare_model": [[149, "spyrit-core-train-compare-model"]], "spyrit.core.train.count_memory": [[150, "spyrit-core-train-count-memory"]], "spyrit.core.train.count_param": [[151, "spyrit-core-train-count-param"]], "spyrit.core.train.count_trainable_param": [[152, "spyrit-core-train-count-trainable-param"]], "spyrit.core.train.images_norm": [[153, "spyrit-core-train-images-norm"]], "spyrit.core.train.imshow": [[154, "spyrit-core-train-imshow"]], "spyrit.core.train.load_net": [[155, "spyrit-core-train-load-net"]], "spyrit.core.train.multiplot": [[156, "spyrit-core-train-multiplot"]], "spyrit.core.train.read_param": [[157, "spyrit-core-train-read-param"]], "spyrit.core.train.remove_model_attributes": [[158, "spyrit-core-train-remove-model-attributes"]], "spyrit.core.train.rename_model_attributes": [[159, "spyrit-core-train-rename-model-attributes"]], "spyrit.core.train.save_net": [[160, "spyrit-core-train-save-net"]], "spyrit.core.train.tb_profiler": [[161, "spyrit-core-train-tb-profiler"]], "spyrit.core.train.tb_writer_add_image": [[162, "spyrit-core-train-tb-writer-add-image"]], "spyrit.core.train.tb_writer_add_scalar": [[163, "spyrit-core-train-tb-writer-add-scalar"]], "spyrit.core.train.tb_writer_init": [[164, "spyrit-core-train-tb-writer-init"]], "spyrit.core.train.train_model": [[165, "spyrit-core-train-train-model"]], "spyrit.core.train.train_model_supervised": [[166, "spyrit-core-train-train-model-supervised"]], "spyrit.core.train.visualize_conv_layers": [[167, "spyrit-core-train-visualize-conv-layers"]], "spyrit.core.train.visualize_model": [[168, "spyrit-core-train-visualize-model"]], "spyrit.misc": [[169, "module-spyrit.misc"]], "spyrit.misc.data_visualisation": [[170, "module-spyrit.misc.data_visualisation"]], "spyrit.misc.data_visualisation.plot_im2D": [[171, "spyrit-misc-data-visualisation-plot-im2d"]], "spyrit.misc.data_visualisation.show_image_and_infos": [[172, "spyrit-misc-data-visualisation-show-image-and-infos"]], "spyrit.misc.data_visualisation.show_images_infos": [[173, "spyrit-misc-data-visualisation-show-images-infos"]], "spyrit.misc.data_visualisation.simple_plot_2D": [[174, "spyrit-misc-data-visualisation-simple-plot-2d"]], "spyrit.misc.disp": [[175, "module-spyrit.misc.disp"]], "spyrit.misc.disp.Multi_plots": [[176, "spyrit-misc-disp-multi-plots"]], "spyrit.misc.disp.add_colorbar": [[177, "spyrit-misc-disp-add-colorbar"]], "spyrit.misc.disp.compare_video_frames": [[178, "spyrit-misc-disp-compare-video-frames"]], "spyrit.misc.disp.display_rgb_vid": [[179, "spyrit-misc-disp-display-rgb-vid"]], "spyrit.misc.disp.display_vid": [[180, "spyrit-misc-disp-display-vid"]], "spyrit.misc.disp.fitPlots": [[181, "spyrit-misc-disp-fitplots"]], "spyrit.misc.disp.histogram": [[182, "spyrit-misc-disp-histogram"]], "spyrit.misc.disp.imagecomp": [[183, "spyrit-misc-disp-imagecomp"]], "spyrit.misc.disp.imagepanel": [[184, "spyrit-misc-disp-imagepanel"]], "spyrit.misc.disp.imagesc": [[185, "spyrit-misc-disp-imagesc"]], "spyrit.misc.disp.noaxis": [[186, "spyrit-misc-disp-noaxis"]], "spyrit.misc.disp.plot": [[187, "spyrit-misc-disp-plot"]], "spyrit.misc.disp.pre_process_video": [[188, "spyrit-misc-disp-pre-process-video"]], "spyrit.misc.disp.print_mean_std": [[189, "spyrit-misc-disp-print-mean-std"]], "spyrit.misc.disp.string_mean_std": [[190, "spyrit-misc-disp-string-mean-std"]], "spyrit.misc.disp.torch2numpy": [[191, "spyrit-misc-disp-torch2numpy"]], "spyrit.misc.disp.uint8": [[192, "spyrit-misc-disp-uint8"]], "spyrit.misc.disp.vid2batch": [[193, "spyrit-misc-disp-vid2batch"]], "spyrit.misc.examples": [[194, "module-spyrit.misc.examples"]], "spyrit.misc.examples.circle": [[195, "spyrit-misc-examples-circle"]], "spyrit.misc.examples.permutation_matrix": [[196, "spyrit-misc-examples-permutation-matrix"]], "spyrit.misc.examples.translation_matrix": [[197, "spyrit-misc-examples-translation-matrix"]], "spyrit.misc.load_data": [[198, "module-spyrit.misc.load_data"]], "spyrit.misc.load_data.Files_names": [[199, "spyrit-misc-load-data-files-names"]], "spyrit.misc.load_data.load_data_Comp_1D_new": [[200, "spyrit-misc-load-data-load-data-comp-1d-new"]], "spyrit.misc.load_data.load_data_Comp_1D_old": [[201, "spyrit-misc-load-data-load-data-comp-1d-old"]], "spyrit.misc.load_data.load_data_recon_3D": [[202, "spyrit-misc-load-data-load-data-recon-3d"]], "spyrit.misc.matrix_tools": [[203, "module-spyrit.misc.matrix_tools"]], "spyrit.misc.matrix_tools.Permutation_Matrix": [[204, "spyrit-misc-matrix-tools-permutation-matrix"]], "spyrit.misc.matrix_tools.Sum_coll": [[205, "spyrit-misc-matrix-tools-sum-coll"]], "spyrit.misc.matrix_tools.clean_out": [[206, "spyrit-misc-matrix-tools-clean-out"]], "spyrit.misc.matrix_tools.compression_1D": [[207, "spyrit-misc-matrix-tools-compression-1d"]], "spyrit.misc.matrix_tools.data_conv_hadamard": [[208, "spyrit-misc-matrix-tools-data-conv-hadamard"]], "spyrit.misc.matrix_tools.expend_vect": [[209, "spyrit-misc-matrix-tools-expend-vect"]], "spyrit.misc.matrix_tools.normalize_by_median_mat_2D": [[210, "spyrit-misc-matrix-tools-normalize-by-median-mat-2d"]], "spyrit.misc.matrix_tools.normalize_mat_2D": [[211, "spyrit-misc-matrix-tools-normalize-mat-2d"]], "spyrit.misc.matrix_tools.reject_outliers": [[212, "spyrit-misc-matrix-tools-reject-outliers"]], "spyrit.misc.matrix_tools.remove_offset_mat_2D": [[213, "spyrit-misc-matrix-tools-remove-offset-mat-2d"]], "spyrit.misc.matrix_tools.resize": [[214, "spyrit-misc-matrix-tools-resize"]], "spyrit.misc.matrix_tools.smooth": [[215, "spyrit-misc-matrix-tools-smooth"]], "spyrit.misc.matrix_tools.stack_depth_matrice": [[216, "spyrit-misc-matrix-tools-stack-depth-matrice"]], "spyrit.misc.metrics": [[217, "module-spyrit.misc.metrics"]], "spyrit.misc.metrics.batch_psnr": [[218, "spyrit-misc-metrics-batch-psnr"]], "spyrit.misc.metrics.batch_psnr_vid": [[219, "spyrit-misc-metrics-batch-psnr-vid"]], "spyrit.misc.metrics.batch_ssim": [[220, "spyrit-misc-metrics-batch-ssim"]], "spyrit.misc.metrics.batch_ssim_vid": [[221, "spyrit-misc-metrics-batch-ssim-vid"]], "spyrit.misc.metrics.compare_nets_unsupervised": [[222, "spyrit-misc-metrics-compare-nets-unsupervised"]], "spyrit.misc.metrics.compare_video_nets_supervised": [[223, "spyrit-misc-metrics-compare-video-nets-supervised"]], "spyrit.misc.metrics.dataset_meas": [[224, "spyrit-misc-metrics-dataset-meas"]], "spyrit.misc.metrics.dataset_psnr": [[225, "spyrit-misc-metrics-dataset-psnr"]], "spyrit.misc.metrics.dataset_psnr_ssim": [[226, "spyrit-misc-metrics-dataset-psnr-ssim"]], "spyrit.misc.metrics.dataset_psnr_ssim_fcl": [[227, "spyrit-misc-metrics-dataset-psnr-ssim-fcl"]], "spyrit.misc.metrics.dataset_ssim": [[228, "spyrit-misc-metrics-dataset-ssim"]], "spyrit.misc.metrics.print_mean_std": [[229, "spyrit-misc-metrics-print-mean-std"]], "spyrit.misc.metrics.psnr": [[230, "spyrit-misc-metrics-psnr"]], "spyrit.misc.metrics.psnr_": [[231, "spyrit-misc-metrics-psnr"]], "spyrit.misc.metrics.ssim": [[232, "spyrit-misc-metrics-ssim"]], "spyrit.misc.pattern_choice": [[233, "module-spyrit.misc.pattern_choice"]], "spyrit.misc.pattern_choice.Basis_patterns": [[234, "spyrit-misc-pattern-choice-basis-patterns"]], "spyrit.misc.pattern_choice.Basis_patterns.add_desired_pattern": [[235, "spyrit-misc-pattern-choice-basis-patterns-add-desired-pattern"]], "spyrit.misc.pattern_choice.Basis_patterns.add_desired_patterns": [[236, "spyrit-misc-pattern-choice-basis-patterns-add-desired-patterns"]], "spyrit.misc.pattern_choice.Basis_patterns.get_all_desired_pattern": [[237, "spyrit-misc-pattern-choice-basis-patterns-get-all-desired-pattern"]], "spyrit.misc.pattern_choice.Basis_patterns.get_desired_pattern": [[238, "spyrit-misc-pattern-choice-basis-patterns-get-desired-pattern"]], "spyrit.misc.pattern_choice.Basis_patterns.get_measurement_matrix": [[239, "spyrit-misc-pattern-choice-basis-patterns-get-measurement-matrix"]], "spyrit.misc.pattern_choice.Basis_patterns.save_measurement_matrix": [[240, "spyrit-misc-pattern-choice-basis-patterns-save-measurement-matrix"]], "spyrit.misc.pattern_choice.Basis_patterns.set_desired_pattern": [[241, "spyrit-misc-pattern-choice-basis-patterns-set-desired-pattern"]], "spyrit.misc.pattern_choice.Basis_patterns.set_measurement_matrix": [[242, "spyrit-misc-pattern-choice-basis-patterns-set-measurement-matrix"]], "spyrit.misc.pattern_choice.Custom_patterns": [[243, "spyrit-misc-pattern-choice-custom-patterns"]], "spyrit.misc.pattern_choice.Custom_patterns.add_desired_pattern": [[244, "spyrit-misc-pattern-choice-custom-patterns-add-desired-pattern"]], "spyrit.misc.pattern_choice.Custom_patterns.add_desired_patterns": [[245, "spyrit-misc-pattern-choice-custom-patterns-add-desired-patterns"]], "spyrit.misc.pattern_choice.Custom_patterns.get_all_desired_pattern": [[246, "spyrit-misc-pattern-choice-custom-patterns-get-all-desired-pattern"]], "spyrit.misc.pattern_choice.Custom_patterns.get_desired_pattern": [[247, "spyrit-misc-pattern-choice-custom-patterns-get-desired-pattern"]], "spyrit.misc.pattern_choice.Custom_patterns.get_measurement_matrix": [[248, "spyrit-misc-pattern-choice-custom-patterns-get-measurement-matrix"]], "spyrit.misc.pattern_choice.Custom_patterns.save_measurement_matrix": [[249, "spyrit-misc-pattern-choice-custom-patterns-save-measurement-matrix"]], "spyrit.misc.pattern_choice.Custom_patterns.set_desired_pattern": [[250, "spyrit-misc-pattern-choice-custom-patterns-set-desired-pattern"]], "spyrit.misc.pattern_choice.Custom_patterns.set_measurement_matrix": [[251, "spyrit-misc-pattern-choice-custom-patterns-set-measurement-matrix"]], "spyrit.misc.pattern_choice.Daubechies": [[252, "spyrit-misc-pattern-choice-daubechies"]], "spyrit.misc.pattern_choice.Daubechies_opt": [[253, "spyrit-misc-pattern-choice-daubechies-opt"]], "spyrit.misc.pattern_choice.Fourier": [[254, "spyrit-misc-pattern-choice-fourier"]], "spyrit.misc.pattern_choice.Fourier_opt": [[255, "spyrit-misc-pattern-choice-fourier-opt"]], "spyrit.misc.pattern_choice.Haar": [[256, "spyrit-misc-pattern-choice-haar"]], "spyrit.misc.pattern_choice.Haar_opt": [[257, "spyrit-misc-pattern-choice-haar-opt"]], "spyrit.misc.pattern_choice.Hadamard": [[258, "spyrit-misc-pattern-choice-hadamard"]], "spyrit.misc.pattern_choice.Hadamard_opt": [[259, "spyrit-misc-pattern-choice-hadamard-opt"]], "spyrit.misc.pattern_choice.Optimized_patterns": [[260, "spyrit-misc-pattern-choice-optimized-patterns"]], "spyrit.misc.pattern_choice.Optimized_patterns.add_desired_pattern": [[261, "spyrit-misc-pattern-choice-optimized-patterns-add-desired-pattern"]], "spyrit.misc.pattern_choice.Optimized_patterns.add_desired_patterns": [[262, "spyrit-misc-pattern-choice-optimized-patterns-add-desired-patterns"]], "spyrit.misc.pattern_choice.Optimized_patterns.get_all_desired_pattern": [[263, "spyrit-misc-pattern-choice-optimized-patterns-get-all-desired-pattern"]], "spyrit.misc.pattern_choice.Optimized_patterns.get_desired_pattern": [[264, "spyrit-misc-pattern-choice-optimized-patterns-get-desired-pattern"]], "spyrit.misc.pattern_choice.Optimized_patterns.get_measurement_matrix": [[265, "spyrit-misc-pattern-choice-optimized-patterns-get-measurement-matrix"]], "spyrit.misc.pattern_choice.Optimized_patterns.save_measurement_matrix": [[266, "spyrit-misc-pattern-choice-optimized-patterns-save-measurement-matrix"]], "spyrit.misc.pattern_choice.Optimized_patterns.set_desired_pattern": [[267, "spyrit-misc-pattern-choice-optimized-patterns-set-desired-pattern"]], "spyrit.misc.pattern_choice.Optimized_patterns.set_measurement_matrix": [[268, "spyrit-misc-pattern-choice-optimized-patterns-set-measurement-matrix"]], "spyrit.misc.pattern_choice.Patterns": [[269, "spyrit-misc-pattern-choice-patterns"]], "spyrit.misc.pattern_choice.Patterns.add_desired_patterns": [[270, "spyrit-misc-pattern-choice-patterns-add-desired-patterns"]], "spyrit.misc.pattern_choice.Patterns.get_all_desired_pattern": [[271, "spyrit-misc-pattern-choice-patterns-get-all-desired-pattern"]], "spyrit.misc.pattern_choice.Patterns.get_desired_pattern": [[272, "spyrit-misc-pattern-choice-patterns-get-desired-pattern"]], "spyrit.misc.pattern_choice.Patterns.get_measurement_matrix": [[273, "spyrit-misc-pattern-choice-patterns-get-measurement-matrix"]], "spyrit.misc.pattern_choice.Patterns.save_measurement_matrix": [[274, "spyrit-misc-pattern-choice-patterns-save-measurement-matrix"]], "spyrit.misc.pattern_choice.Patterns.set_desired_pattern": [[275, "spyrit-misc-pattern-choice-patterns-set-desired-pattern"]], "spyrit.misc.pattern_choice.Patterns.set_measurement_matrix": [[276, "spyrit-misc-pattern-choice-patterns-set-measurement-matrix"]], "spyrit.misc.pattern_choice.matrix2conv": [[277, "spyrit-misc-pattern-choice-matrix2conv"]], "spyrit.misc.pattern_choice.shift": [[278, "spyrit-misc-pattern-choice-shift"]], "spyrit.misc.pattern_choice.split": [[279, "spyrit-misc-pattern-choice-split"]], "spyrit.misc.sampling": [[280, "module-spyrit.misc.sampling"]], "spyrit.misc.sampling.Permutation_Matrix": [[281, "spyrit-misc-sampling-permutation-matrix"]], "spyrit.misc.sampling.img2mask": [[282, "spyrit-misc-sampling-img2mask"]], "spyrit.misc.sampling.img2meas": [[283, "spyrit-misc-sampling-img2meas"]], "spyrit.misc.sampling.meas2img": [[284, "spyrit-misc-sampling-meas2img"]], "spyrit.misc.sampling.meas2img2": [[285, "spyrit-misc-sampling-meas2img2"]], "spyrit.misc.sampling.reorder": [[286, "spyrit-misc-sampling-reorder"]], "spyrit.misc.statistics": [[287, "module-spyrit.misc.statistics"]], "spyrit.misc.statistics.CenterCrop": [[288, "spyrit-misc-statistics-centercrop"]], "spyrit.misc.statistics.Cov2Var": [[289, "spyrit-misc-statistics-cov2var"]], "spyrit.misc.statistics.cov_walsh": [[290, "spyrit-misc-statistics-cov-walsh"]], "spyrit.misc.statistics.data_loaders_ImageNet": [[291, "spyrit-misc-statistics-data-loaders-imagenet"]], "spyrit.misc.statistics.data_loaders_stl10": [[292, "spyrit-misc-statistics-data-loaders-stl10"]], "spyrit.misc.statistics.img2mask": [[293, "spyrit-misc-statistics-img2mask"]], "spyrit.misc.statistics.mea_abs_model": [[294, "spyrit-misc-statistics-mea-abs-model"]], "spyrit.misc.statistics.mean_walsh": [[295, "spyrit-misc-statistics-mean-walsh"]], "spyrit.misc.statistics.optim_had": [[296, "spyrit-misc-statistics-optim-had"]], "spyrit.misc.statistics.stat_fwalsh_S": [[297, "spyrit-misc-statistics-stat-fwalsh-s"]], "spyrit.misc.statistics.stat_fwalsh_S_stl10": [[298, "spyrit-misc-statistics-stat-fwalsh-s-stl10"]], "spyrit.misc.statistics.stat_mean_coef_from_model": [[299, "spyrit-misc-statistics-stat-mean-coef-from-model"]], "spyrit.misc.statistics.stat_model": [[300, "spyrit-misc-statistics-stat-model"]], "spyrit.misc.statistics.stat_walsh": [[301, "spyrit-misc-statistics-stat-walsh"]], "spyrit.misc.statistics.stat_walsh_ImageNet": [[302, "spyrit-misc-statistics-stat-walsh-imagenet"]], "spyrit.misc.statistics.stat_walsh_stl10": [[303, "spyrit-misc-statistics-stat-walsh-stl10"]], "spyrit.misc.statistics.transform_gray_norm": [[304, "spyrit-misc-statistics-transform-gray-norm"]], "spyrit.misc.walsh_hadamard": [[305, "module-spyrit.misc.walsh_hadamard"]], "spyrit.misc.walsh_hadamard.b2_to_b10": [[306, "spyrit-misc-walsh-hadamard-b2-to-b10"]], "spyrit.misc.walsh_hadamard.bit_reverse_traverse": [[307, "spyrit-misc-walsh-hadamard-bit-reverse-traverse"]], "spyrit.misc.walsh_hadamard.bit_reversed_list": [[308, "spyrit-misc-walsh-hadamard-bit-reversed-list"]], "spyrit.misc.walsh_hadamard.bit_reversed_matrix": [[309, "spyrit-misc-walsh-hadamard-bit-reversed-matrix"]], "spyrit.misc.walsh_hadamard.fwalsh2_S": [[310, "spyrit-misc-walsh-hadamard-fwalsh2-s"]], "spyrit.misc.walsh_hadamard.fwalsh2_S_torch": [[311, "spyrit-misc-walsh-hadamard-fwalsh2-s-torch"]], "spyrit.misc.walsh_hadamard.fwalsh_G": [[312, "spyrit-misc-walsh-hadamard-fwalsh-g"]], "spyrit.misc.walsh_hadamard.fwalsh_G_torch": [[313, "spyrit-misc-walsh-hadamard-fwalsh-g-torch"]], "spyrit.misc.walsh_hadamard.fwalsh_S": [[314, "spyrit-misc-walsh-hadamard-fwalsh-s"]], "spyrit.misc.walsh_hadamard.fwalsh_S_torch": [[315, "spyrit-misc-walsh-hadamard-fwalsh-s-torch"]], "spyrit.misc.walsh_hadamard.fwht": [[316, "spyrit-misc-walsh-hadamard-fwht"]], "spyrit.misc.walsh_hadamard.fwht_torch": [[317, "spyrit-misc-walsh-hadamard-fwht-torch"]], "spyrit.misc.walsh_hadamard.get_bit_reversed_list": [[318, "spyrit-misc-walsh-hadamard-get-bit-reversed-list"]], "spyrit.misc.walsh_hadamard.gray_code_list": [[319, "spyrit-misc-walsh-hadamard-gray-code-list"]], "spyrit.misc.walsh_hadamard.gray_code_permutation": [[320, "spyrit-misc-walsh-hadamard-gray-code-permutation"]], "spyrit.misc.walsh_hadamard.ifwalsh2_S": [[321, "spyrit-misc-walsh-hadamard-ifwalsh2-s"]], "spyrit.misc.walsh_hadamard.ifwalsh_S": [[322, "spyrit-misc-walsh-hadamard-ifwalsh-s"]], "spyrit.misc.walsh_hadamard.iwalsh2": [[323, "spyrit-misc-walsh-hadamard-iwalsh2"]], "spyrit.misc.walsh_hadamard.iwalsh2_S": [[324, "spyrit-misc-walsh-hadamard-iwalsh2-s"]], "spyrit.misc.walsh_hadamard.iwalsh_S": [[325, "spyrit-misc-walsh-hadamard-iwalsh-s"]], "spyrit.misc.walsh_hadamard.iwalsh_S_matrix": [[326, "spyrit-misc-walsh-hadamard-iwalsh-s-matrix"]], "spyrit.misc.walsh_hadamard.perm_matrix_from_ind": [[327, "spyrit-misc-walsh-hadamard-perm-matrix-from-ind"]], "spyrit.misc.walsh_hadamard.sequency_perm": [[328, "spyrit-misc-walsh-hadamard-sequency-perm"]], "spyrit.misc.walsh_hadamard.sequency_perm_ind": [[329, "spyrit-misc-walsh-hadamard-sequency-perm-ind"]], "spyrit.misc.walsh_hadamard.sequency_perm_matrix": [[330, "spyrit-misc-walsh-hadamard-sequency-perm-matrix"]], "spyrit.misc.walsh_hadamard.sequency_perm_torch": [[331, "spyrit-misc-walsh-hadamard-sequency-perm-torch"]], "spyrit.misc.walsh_hadamard.walsh2": [[332, "spyrit-misc-walsh-hadamard-walsh2"]], "spyrit.misc.walsh_hadamard.walsh2_S": [[333, "spyrit-misc-walsh-hadamard-walsh2-s"]], "spyrit.misc.walsh_hadamard.walsh2_S_fold": [[334, "spyrit-misc-walsh-hadamard-walsh2-s-fold"]], "spyrit.misc.walsh_hadamard.walsh2_S_fold_torch": [[335, "spyrit-misc-walsh-hadamard-walsh2-s-fold-torch"]], "spyrit.misc.walsh_hadamard.walsh2_S_matrix": [[336, "spyrit-misc-walsh-hadamard-walsh2-s-matrix"]], "spyrit.misc.walsh_hadamard.walsh2_S_unfold": [[337, "spyrit-misc-walsh-hadamard-walsh2-s-unfold"]], "spyrit.misc.walsh_hadamard.walsh2_S_unfold_torch": [[338, "spyrit-misc-walsh-hadamard-walsh2-s-unfold-torch"]], "spyrit.misc.walsh_hadamard.walsh2_matrix": [[339, "spyrit-misc-walsh-hadamard-walsh2-matrix"]], "spyrit.misc.walsh_hadamard.walsh2_torch": [[340, "spyrit-misc-walsh-hadamard-walsh2-torch"]], "spyrit.misc.walsh_hadamard.walsh_G": [[341, "spyrit-misc-walsh-hadamard-walsh-g"]], "spyrit.misc.walsh_hadamard.walsh_G_matrix": [[342, "spyrit-misc-walsh-hadamard-walsh-g-matrix"]], "spyrit.misc.walsh_hadamard.walsh_S": [[343, "spyrit-misc-walsh-hadamard-walsh-s"]], "spyrit.misc.walsh_hadamard.walsh_S_matrix": [[344, "spyrit-misc-walsh-hadamard-walsh-s-matrix"]], "spyrit.misc.walsh_hadamard.walsh_matrix": [[345, "spyrit-misc-walsh-hadamard-walsh-matrix"]], "spyrit.misc.walsh_hadamard.walsh_torch": [[346, "spyrit-misc-walsh-hadamard-walsh-torch"]], "Tutorials": [[347, "tutorials"], [356, null]], "Computation times": [[348, "computation-times"], [357, "computation-times"]], "01. Acquisition operators": [[349, "acquisition-operators"]], "Load a batch of images": [[349, "load-a-batch-of-images"], [350, "load-a-batch-of-images"], [351, "load-a-batch-of-images"], [352, "load-a-batch-of-images"], [353, "load-a-batch-of-images"], [354, "load-a-batch-of-images"]], "The measurement and noise operators": [[349, "the-measurement-and-noise-operators"], [353, "the-measurement-and-noise-operators"]], "A simple example: identity measurement matrix and no noise": [[349, "a-simple-example-identity-measurement-matrix-and-no-noise"]], "Same example with Poisson noise": [[349, "same-example-with-poisson-noise"]], "The preprocessing operator": [[349, "the-preprocessing-operator"]], "Preprocessing measurements corrupted by Poisson noise": [[349, "preprocessing-measurements-corrupted-by-poisson-noise"]], "02. Pseudoinverse solution from linear measurements": [[350, "pseudoinverse-solution-from-linear-measurements"]], "Define a measurement operator": [[350, "define-a-measurement-operator"], [351, "define-a-measurement-operator"], [352, "define-a-measurement-operator"]], "Noiseless case": [[350, "noiseless-case"], [351, "noiseless-case"]], "Pseudo inverse": [[350, "pseudo-inverse"]], "PinvNet Network": [[350, "pinvnet-network"], [351, "pinvnet-network"], [352, "pinvnet-network"]], "Poisson-corrupted measurement": [[350, "poisson-corrupted-measurement"]], "03. Pseudoinverse solution + CNN denoising": [[351, "pseudoinverse-solution-cnn-denoising"]], "Removing artefacts with a CNN": [[351, "removing-artefacts-with-a-cnn"]], "04. Train pseudoinverse solution + CNN denoising": [[352, "train-pseudoinverse-solution-cnn-denoising"]], "Define a dataloader": [[352, "define-a-dataloader"]], "Define a Loss function optimizer and scheduler": [[352, "define-a-loss-function-optimizer-and-scheduler"]], "Train the network": [[352, "train-the-network"]], "Save the network and training history": [[352, "save-the-network-and-training-history"]], "05. Acquisition operators (advanced) - Split measurements and subsampling": [[353, "acquisition-operators-advanced-split-measurements-and-subsampling"]], "Split measurement operator and no noise": [[353, "split-measurement-operator-and-no-noise"]], "Subsampling": [[353, "subsampling"]], "Measurement and noise operators": [[353, "measurement-and-noise-operators"]], "The preprocessing operator measurements for split measurements": [[353, "the-preprocessing-operator-measurements-for-split-measurements"]], "Noiseless measurements": [[353, "noiseless-measurements"]], "PinvNet network": [[353, "pinvnet-network"], [354, "pinvnet-network"]], "06. DCNet solution for split measurements": [[354, "dcnet-solution-for-split-measurements"]], "Forward operators for split measurements": [[354, "forward-operators-for-split-measurements"]], "DCNet network": [[354, "dcnet-network"]], "Bonus. Advanced methods - Colab": [[355, "bonus-advanced-methods-colab"]], "SPyRiT\u2019s documentation": [[356, "spyrit-s-documentation"]], "Installation": [[356, "installation"]], "Single-pixel imaging": [[356, "single-pixel-imaging"]], "Modelling of the measurements": [[356, "modelling-of-the-measurements"]], "Image reconstruction": [[356, "image-reconstruction"]], "Package structure": [[356, "package-structure"]], "Subpackages": [[356, "subpackages"]], "Cite us": [[356, "cite-us"]], "Join the project": [[356, "join-the-project"]]}, "indexentries": {"module": [[0, "module-spyrit.core"], [1, "module-spyrit.core.meas"], [46, "module-spyrit.core.nnet"], [64, "module-spyrit.core.noise"], [73, "module-spyrit.core.prep"], [86, "module-spyrit.core.recon"], [125, "module-spyrit.core.time"], [135, "module-spyrit.core.train"], [169, "module-spyrit.misc"], [170, "module-spyrit.misc.data_visualisation"], [175, "module-spyrit.misc.disp"], [194, "module-spyrit.misc.examples"], [198, "module-spyrit.misc.load_data"], [203, "module-spyrit.misc.matrix_tools"], [217, "module-spyrit.misc.metrics"], [233, "module-spyrit.misc.pattern_choice"], [280, "module-spyrit.misc.sampling"], [287, "module-spyrit.misc.statistics"], [305, "module-spyrit.misc.walsh_hadamard"]], "spyrit.core": [[0, "module-spyrit.core"]], "spyrit.core.meas": [[1, "module-spyrit.core.meas"]], "dynamichadamsplit (class in spyrit.core.meas)": [[2, "spyrit.core.meas.DynamicHadamSplit"]], "forward() (spyrit.core.meas.dynamichadamsplit method)": [[3, "spyrit.core.meas.DynamicHadamSplit.forward"]], "forward_h() (spyrit.core.meas.dynamichadamsplit method)": [[4, "spyrit.core.meas.DynamicHadamSplit.forward_H"]], "get_h() (spyrit.core.meas.dynamichadamsplit method)": [[5, "spyrit.core.meas.DynamicHadamSplit.get_H"]], "get_p() (spyrit.core.meas.dynamichadamsplit method)": [[6, "spyrit.core.meas.DynamicHadamSplit.get_P"]], "get_perm() (spyrit.core.meas.dynamichadamsplit method)": [[7, "spyrit.core.meas.DynamicHadamSplit.get_Perm"]], "dynamiclinear (class in spyrit.core.meas)": [[8, "spyrit.core.meas.DynamicLinear"]], "forward() (spyrit.core.meas.dynamiclinear method)": [[9, "spyrit.core.meas.DynamicLinear.forward"]], "get_h() (spyrit.core.meas.dynamiclinear method)": [[10, "spyrit.core.meas.DynamicLinear.get_H"]], "dynamiclinearsplit (class in spyrit.core.meas)": [[11, "spyrit.core.meas.DynamicLinearSplit"]], "forward() (spyrit.core.meas.dynamiclinearsplit method)": [[12, "spyrit.core.meas.DynamicLinearSplit.forward"]], "forward_h() (spyrit.core.meas.dynamiclinearsplit method)": [[13, "spyrit.core.meas.DynamicLinearSplit.forward_H"]], "get_h() (spyrit.core.meas.dynamiclinearsplit method)": [[14, "spyrit.core.meas.DynamicLinearSplit.get_H"]], "get_p() (spyrit.core.meas.dynamiclinearsplit method)": [[15, "spyrit.core.meas.DynamicLinearSplit.get_P"]], "hadamsplit (class in spyrit.core.meas)": [[16, "spyrit.core.meas.HadamSplit"]], "adjoint() (spyrit.core.meas.hadamsplit method)": [[17, "spyrit.core.meas.HadamSplit.adjoint"]], "forward() (spyrit.core.meas.hadamsplit method)": [[18, "spyrit.core.meas.HadamSplit.forward"]], "forward_h() (spyrit.core.meas.hadamsplit method)": [[19, "spyrit.core.meas.HadamSplit.forward_H"]], "get_h() (spyrit.core.meas.hadamsplit method)": [[20, "spyrit.core.meas.HadamSplit.get_H"]], "get_h_t() (spyrit.core.meas.hadamsplit method)": [[21, "spyrit.core.meas.HadamSplit.get_H_T"]], "get_h_pinv() (spyrit.core.meas.hadamsplit method)": [[22, "spyrit.core.meas.HadamSplit.get_H_pinv"]], "get_p() (spyrit.core.meas.hadamsplit method)": [[23, "spyrit.core.meas.HadamSplit.get_P"]], "get_perm() (spyrit.core.meas.hadamsplit method)": [[24, "spyrit.core.meas.HadamSplit.get_Perm"]], "inverse() (spyrit.core.meas.hadamsplit method)": [[25, "spyrit.core.meas.HadamSplit.inverse"]], "pinv() (spyrit.core.meas.hadamsplit method)": [[26, "spyrit.core.meas.HadamSplit.pinv"]], "set_h_pinv() (spyrit.core.meas.hadamsplit method)": [[27, "spyrit.core.meas.HadamSplit.set_H_pinv"]], "linear (class in spyrit.core.meas)": [[28, "spyrit.core.meas.Linear"]], "adjoint() (spyrit.core.meas.linear method)": [[29, "spyrit.core.meas.Linear.adjoint"]], "forward() (spyrit.core.meas.linear method)": [[30, "spyrit.core.meas.Linear.forward"]], "get_h() (spyrit.core.meas.linear method)": [[31, "spyrit.core.meas.Linear.get_H"]], "get_h_t() (spyrit.core.meas.linear method)": [[32, "spyrit.core.meas.Linear.get_H_T"]], "get_h_pinv() (spyrit.core.meas.linear method)": [[33, "spyrit.core.meas.Linear.get_H_pinv"]], "pinv() (spyrit.core.meas.linear method)": [[34, "spyrit.core.meas.Linear.pinv"]], "set_h_pinv() (spyrit.core.meas.linear method)": [[35, "spyrit.core.meas.Linear.set_H_pinv"]], "linearsplit (class in spyrit.core.meas)": [[36, "spyrit.core.meas.LinearSplit"]], "adjoint() (spyrit.core.meas.linearsplit method)": [[37, "spyrit.core.meas.LinearSplit.adjoint"]], "forward() (spyrit.core.meas.linearsplit method)": [[38, "spyrit.core.meas.LinearSplit.forward"]], "forward_h() (spyrit.core.meas.linearsplit method)": [[39, "spyrit.core.meas.LinearSplit.forward_H"]], "get_h() (spyrit.core.meas.linearsplit method)": [[40, "spyrit.core.meas.LinearSplit.get_H"]], "get_h_t() (spyrit.core.meas.linearsplit method)": [[41, "spyrit.core.meas.LinearSplit.get_H_T"]], "get_h_pinv() (spyrit.core.meas.linearsplit method)": [[42, "spyrit.core.meas.LinearSplit.get_H_pinv"]], "get_p() (spyrit.core.meas.linearsplit method)": [[43, "spyrit.core.meas.LinearSplit.get_P"]], "pinv() (spyrit.core.meas.linearsplit method)": [[44, "spyrit.core.meas.LinearSplit.pinv"]], "set_h_pinv() (spyrit.core.meas.linearsplit method)": [[45, "spyrit.core.meas.LinearSplit.set_H_pinv"]], "spyrit.core.nnet": [[46, "module-spyrit.core.nnet"]], "convnet (class in spyrit.core.nnet)": [[47, "spyrit.core.nnet.ConvNet"]], "forward() (spyrit.core.nnet.convnet method)": [[48, "spyrit.core.nnet.ConvNet.forward"]], "convnetbn (class in spyrit.core.nnet)": [[49, "spyrit.core.nnet.ConvNetBN"]], "forward() (spyrit.core.nnet.convnetbn method)": [[50, "spyrit.core.nnet.ConvNetBN.forward"]], "dconvnet (class in spyrit.core.nnet)": [[51, "spyrit.core.nnet.DConvNet"]], "forward() (spyrit.core.nnet.dconvnet method)": [[52, "spyrit.core.nnet.DConvNet.forward"]], "identity (class in spyrit.core.nnet)": [[53, "spyrit.core.nnet.Identity"]], "forward() (spyrit.core.nnet.identity method)": [[54, "spyrit.core.nnet.Identity.forward"]], "list_denoi (class in spyrit.core.nnet)": [[55, "spyrit.core.nnet.List_denoi"]], "forward() (spyrit.core.nnet.list_denoi method)": [[56, "spyrit.core.nnet.List_denoi.forward"]], "unet (class in spyrit.core.nnet)": [[57, "spyrit.core.nnet.Unet"]], "bottle_neck() (spyrit.core.nnet.unet method)": [[58, "spyrit.core.nnet.Unet.bottle_neck"]], "concat() (spyrit.core.nnet.unet method)": [[59, "spyrit.core.nnet.Unet.concat"]], "contract() (spyrit.core.nnet.unet method)": [[60, "spyrit.core.nnet.Unet.contract"]], "expans() (spyrit.core.nnet.unet method)": [[61, "spyrit.core.nnet.Unet.expans"]], "final_block() (spyrit.core.nnet.unet method)": [[62, "spyrit.core.nnet.Unet.final_block"]], "forward() (spyrit.core.nnet.unet method)": [[63, "spyrit.core.nnet.Unet.forward"]], "spyrit.core.noise": [[64, "module-spyrit.core.noise"]], "nonoise (class in spyrit.core.noise)": [[65, "spyrit.core.noise.NoNoise"]], "forward() (spyrit.core.noise.nonoise method)": [[66, "spyrit.core.noise.NoNoise.forward"]], "poisson (class in spyrit.core.noise)": [[67, "spyrit.core.noise.Poisson"]], "forward() (spyrit.core.noise.poisson method)": [[68, "spyrit.core.noise.Poisson.forward"]], "poissonapproxgauss (class in spyrit.core.noise)": [[69, "spyrit.core.noise.PoissonApproxGauss"]], "forward() (spyrit.core.noise.poissonapproxgauss method)": [[70, "spyrit.core.noise.PoissonApproxGauss.forward"]], "poissonapproxgausssamenoise (class in spyrit.core.noise)": [[71, "spyrit.core.noise.PoissonApproxGaussSameNoise"]], "forward() (spyrit.core.noise.poissonapproxgausssamenoise method)": [[72, "spyrit.core.noise.PoissonApproxGaussSameNoise.forward"]], "spyrit.core.prep": [[73, "module-spyrit.core.prep"]], "directpoisson (class in spyrit.core.prep)": [[74, "spyrit.core.prep.DirectPoisson"]], "denormalize_expe() (spyrit.core.prep.directpoisson method)": [[75, "spyrit.core.prep.DirectPoisson.denormalize_expe"]], "forward() (spyrit.core.prep.directpoisson method)": [[76, "spyrit.core.prep.DirectPoisson.forward"]], "sigma() (spyrit.core.prep.directpoisson method)": [[77, "spyrit.core.prep.DirectPoisson.sigma"]], "splitpoisson (class in spyrit.core.prep)": [[78, "spyrit.core.prep.SplitPoisson"]], "denormalize_expe() (spyrit.core.prep.splitpoisson method)": [[79, "spyrit.core.prep.SplitPoisson.denormalize_expe"]], "forward() (spyrit.core.prep.splitpoisson method)": [[80, "spyrit.core.prep.SplitPoisson.forward"]], "forward_expe() (spyrit.core.prep.splitpoisson method)": [[81, "spyrit.core.prep.SplitPoisson.forward_expe"]], "set_expe() (spyrit.core.prep.splitpoisson method)": [[82, "spyrit.core.prep.SplitPoisson.set_expe"]], "sigma() (spyrit.core.prep.splitpoisson method)": [[83, "spyrit.core.prep.SplitPoisson.sigma"]], "sigma_expe() (spyrit.core.prep.splitpoisson method)": [[84, "spyrit.core.prep.SplitPoisson.sigma_expe"]], "sigma_from_image() (spyrit.core.prep.splitpoisson method)": [[85, "spyrit.core.prep.SplitPoisson.sigma_from_image"]], "spyrit.core.recon": [[86, "module-spyrit.core.recon"]], "dcdrunet (class in spyrit.core.recon)": [[87, "spyrit.core.recon.DCDRUNet"]], "acquire() (spyrit.core.recon.dcdrunet method)": [[88, "spyrit.core.recon.DCDRUNet.acquire"]], "concat_noise_map() (spyrit.core.recon.dcdrunet method)": [[89, "spyrit.core.recon.DCDRUNet.concat_noise_map"]], "forward() (spyrit.core.recon.dcdrunet method)": [[90, "spyrit.core.recon.DCDRUNet.forward"]], "reconstruct() (spyrit.core.recon.dcdrunet method)": [[91, "spyrit.core.recon.DCDRUNet.reconstruct"]], "reconstruct_expe() (spyrit.core.recon.dcdrunet method)": [[92, "spyrit.core.recon.DCDRUNet.reconstruct_expe"]], "set_noise_level() (spyrit.core.recon.dcdrunet method)": [[93, "spyrit.core.recon.DCDRUNet.set_noise_level"]], "dcnet (class in spyrit.core.recon)": [[94, "spyrit.core.recon.DCNet"]], "acquire() (spyrit.core.recon.dcnet method)": [[95, "spyrit.core.recon.DCNet.acquire"]], "forward() (spyrit.core.recon.dcnet method)": [[96, "spyrit.core.recon.DCNet.forward"]], "reconstruct() (spyrit.core.recon.dcnet method)": [[97, "spyrit.core.recon.DCNet.reconstruct"]], "reconstruct_expe() (spyrit.core.recon.dcnet method)": [[98, "spyrit.core.recon.DCNet.reconstruct_expe"]], "denoise_layer (class in spyrit.core.recon)": [[99, "spyrit.core.recon.Denoise_layer"]], "forward() (spyrit.core.recon.denoise_layer method)": [[100, "spyrit.core.recon.Denoise_layer.forward"]], "reset_parameters() (spyrit.core.recon.denoise_layer method)": [[101, "spyrit.core.recon.Denoise_layer.reset_parameters"]], "tikho() (spyrit.core.recon.denoise_layer static method)": [[102, "spyrit.core.recon.Denoise_layer.tikho"]], "pinvnet (class in spyrit.core.recon)": [[103, "spyrit.core.recon.PinvNet"]], "acquire() (spyrit.core.recon.pinvnet method)": [[104, "spyrit.core.recon.PinvNet.acquire"]], "forward() (spyrit.core.recon.pinvnet method)": [[105, "spyrit.core.recon.PinvNet.forward"]], "meas2img() (spyrit.core.recon.pinvnet method)": [[106, "spyrit.core.recon.PinvNet.meas2img"]], "reconstruct() (spyrit.core.recon.pinvnet method)": [[107, "spyrit.core.recon.PinvNet.reconstruct"]], "reconstruct_expe() (spyrit.core.recon.pinvnet method)": [[108, "spyrit.core.recon.PinvNet.reconstruct_expe"]], "reconstruct_pinv() (spyrit.core.recon.pinvnet method)": [[109, "spyrit.core.recon.PinvNet.reconstruct_pinv"]], "positivemonoincreaseparameters (class in spyrit.core.recon)": [[110, "spyrit.core.recon.PositiveMonoIncreaseParameters"]], "forward() (spyrit.core.recon.positivemonoincreaseparameters method)": [[111, "spyrit.core.recon.PositiveMonoIncreaseParameters.forward"]], "positiveparameters (class in spyrit.core.recon)": [[112, "spyrit.core.recon.PositiveParameters"]], "forward() (spyrit.core.recon.positiveparameters method)": [[113, "spyrit.core.recon.PositiveParameters.forward"]], "pseudoinverse (class in spyrit.core.recon)": [[114, "spyrit.core.recon.PseudoInverse"]], "forward() (spyrit.core.recon.pseudoinverse method)": [[115, "spyrit.core.recon.PseudoInverse.forward"]], "tikhonovmeasurementpriordiag (class in spyrit.core.recon)": [[116, "spyrit.core.recon.TikhonovMeasurementPriorDiag"]], "forward() (spyrit.core.recon.tikhonovmeasurementpriordiag method)": [[117, "spyrit.core.recon.TikhonovMeasurementPriorDiag.forward"]], "upgd (class in spyrit.core.recon)": [[118, "spyrit.core.recon.UPGD"]], "acquire() (spyrit.core.recon.upgd method)": [[119, "spyrit.core.recon.UPGD.acquire"]], "forward() (spyrit.core.recon.upgd method)": [[120, "spyrit.core.recon.UPGD.forward"]], "meas2img() (spyrit.core.recon.upgd method)": [[121, "spyrit.core.recon.UPGD.meas2img"]], "reconstruct() (spyrit.core.recon.upgd method)": [[122, "spyrit.core.recon.UPGD.reconstruct"]], "reconstruct_expe() (spyrit.core.recon.upgd method)": [[123, "spyrit.core.recon.UPGD.reconstruct_expe"]], "reconstruct_pinv() (spyrit.core.recon.upgd method)": [[124, "spyrit.core.recon.UPGD.reconstruct_pinv"]], "spyrit.core.time": [[125, "module-spyrit.core.time"]], "affinedeformationfield (class in spyrit.core.time)": [[126, "spyrit.core.time.AffineDeformationField"]], "forward() (spyrit.core.time.affinedeformationfield method)": [[127, "spyrit.core.time.AffineDeformationField.forward"]], "get_inv_mat_frames() (spyrit.core.time.affinedeformationfield method)": [[128, "spyrit.core.time.AffineDeformationField.get_inv_mat_frames"]], "save_inv_grid_frames() (spyrit.core.time.affinedeformationfield method)": [[129, "spyrit.core.time.AffineDeformationField.save_inv_grid_frames"]], "warp() (spyrit.core.time.affinedeformationfield method)": [[130, "spyrit.core.time.AffineDeformationField.warp"]], "deformationfield (class in spyrit.core.time)": [[131, "spyrit.core.time.DeformationField"]], "forward() (spyrit.core.time.deformationfield method)": [[132, "spyrit.core.time.DeformationField.forward"]], "warp() (spyrit.core.time.deformationfield method)": [[133, "spyrit.core.time.DeformationField.warp"]], "format_params() (in module spyrit.core.time)": [[134, "spyrit.core.time.format_params"]], "spyrit.core.train": [[135, "module-spyrit.core.train"]], "train_par (class in spyrit.core.train)": [[136, "spyrit.core.train.Train_par"]], "get_loss() (spyrit.core.train.train_par method)": [[137, "spyrit.core.train.Train_par.get_loss"]], "plot() (spyrit.core.train.train_par method)": [[138, "spyrit.core.train.Train_par.plot"]], "plot_log() (spyrit.core.train.train_par method)": [[139, "spyrit.core.train.Train_par.plot_log"]], "set_loss() (spyrit.core.train.train_par method)": [[140, "spyrit.core.train.Train_par.set_loss"]], "title() (spyrit.core.train.train_par method)": [[141, "spyrit.core.train.Train_par.title"]], "weight_decay_loss (class in spyrit.core.train)": [[142, "spyrit.core.train.Weight_Decay_Loss"]], "forward() (spyrit.core.train.weight_decay_loss method)": [[143, "spyrit.core.train.Weight_Decay_Loss.forward"]], "attr_removal() (in module spyrit.core.train)": [[144, "spyrit.core.train.attr_removal"]], "attr_transformation() (in module spyrit.core.train)": [[145, "spyrit.core.train.attr_transformation"]], "boxplot() (in module spyrit.core.train)": [[146, "spyrit.core.train.boxplot"]], "boxplotconsist() (in module spyrit.core.train)": [[147, "spyrit.core.train.boxplotconsist"]], "checkpoint() (in module spyrit.core.train)": [[148, "spyrit.core.train.checkpoint"]], "compare_model() (in module spyrit.core.train)": [[149, "spyrit.core.train.compare_model"]], "count_memory() (in module spyrit.core.train)": [[150, "spyrit.core.train.count_memory"]], "count_param() (in module spyrit.core.train)": [[151, "spyrit.core.train.count_param"]], "count_trainable_param() (in module spyrit.core.train)": [[152, "spyrit.core.train.count_trainable_param"]], "images_norm() (in module spyrit.core.train)": [[153, "spyrit.core.train.images_norm"]], "imshow() (in module spyrit.core.train)": [[154, "spyrit.core.train.imshow"]], "load_net() (in module spyrit.core.train)": [[155, "spyrit.core.train.load_net"]], "multiplot() (in module spyrit.core.train)": [[156, "spyrit.core.train.multiplot"]], "read_param() (in module spyrit.core.train)": [[157, "spyrit.core.train.read_param"]], "remove_model_attributes() (in module spyrit.core.train)": [[158, "spyrit.core.train.remove_model_attributes"]], "rename_model_attributes() (in module spyrit.core.train)": [[159, "spyrit.core.train.rename_model_attributes"]], "save_net() (in module spyrit.core.train)": [[160, "spyrit.core.train.save_net"]], "tb_profiler() (in module spyrit.core.train)": [[161, "spyrit.core.train.tb_profiler"]], "tb_writer_add_image() (in module spyrit.core.train)": [[162, "spyrit.core.train.tb_writer_add_image"]], "tb_writer_add_scalar() (in module spyrit.core.train)": [[163, "spyrit.core.train.tb_writer_add_scalar"]], "tb_writer_init() (in module spyrit.core.train)": [[164, "spyrit.core.train.tb_writer_init"]], "train_model() (in module spyrit.core.train)": [[165, "spyrit.core.train.train_model"]], "train_model_supervised() (in module spyrit.core.train)": [[166, "spyrit.core.train.train_model_supervised"]], "visualize_conv_layers() (in module spyrit.core.train)": [[167, "spyrit.core.train.visualize_conv_layers"]], "visualize_model() (in module spyrit.core.train)": [[168, "spyrit.core.train.visualize_model"]], "spyrit.misc": [[169, "module-spyrit.misc"]], "spyrit.misc.data_visualisation": [[170, "module-spyrit.misc.data_visualisation"]], "plot_im2d() (in module spyrit.misc.data_visualisation)": [[171, "spyrit.misc.data_visualisation.plot_im2D"]], "show_image_and_infos() (in module spyrit.misc.data_visualisation)": [[172, "spyrit.misc.data_visualisation.show_image_and_infos"]], "show_images_infos() (in module spyrit.misc.data_visualisation)": [[173, "spyrit.misc.data_visualisation.show_images_infos"]], "simple_plot_2d() (in module spyrit.misc.data_visualisation)": [[174, "spyrit.misc.data_visualisation.simple_plot_2D"]], "spyrit.misc.disp": [[175, "module-spyrit.misc.disp"]], "multi_plots() (in module spyrit.misc.disp)": [[176, "spyrit.misc.disp.Multi_plots"]], "add_colorbar() (in module spyrit.misc.disp)": [[177, "spyrit.misc.disp.add_colorbar"]], "compare_video_frames() (in module spyrit.misc.disp)": [[178, "spyrit.misc.disp.compare_video_frames"]], "display_rgb_vid() (in module spyrit.misc.disp)": [[179, "spyrit.misc.disp.display_rgb_vid"]], "display_vid() (in module spyrit.misc.disp)": [[180, "spyrit.misc.disp.display_vid"]], "fitplots() (in module spyrit.misc.disp)": [[181, "spyrit.misc.disp.fitPlots"]], "histogram() (in module spyrit.misc.disp)": [[182, "spyrit.misc.disp.histogram"]], "imagecomp() (in module spyrit.misc.disp)": [[183, "spyrit.misc.disp.imagecomp"]], "imagepanel() (in module spyrit.misc.disp)": [[184, "spyrit.misc.disp.imagepanel"]], "imagesc() (in module spyrit.misc.disp)": [[185, "spyrit.misc.disp.imagesc"]], "noaxis() (in module spyrit.misc.disp)": [[186, "spyrit.misc.disp.noaxis"]], "plot() (in module spyrit.misc.disp)": [[187, "spyrit.misc.disp.plot"]], "pre_process_video() (in module spyrit.misc.disp)": [[188, "spyrit.misc.disp.pre_process_video"]], "print_mean_std() (in module spyrit.misc.disp)": [[189, "spyrit.misc.disp.print_mean_std"]], "string_mean_std() (in module spyrit.misc.disp)": [[190, "spyrit.misc.disp.string_mean_std"]], "torch2numpy() (in module spyrit.misc.disp)": [[191, "spyrit.misc.disp.torch2numpy"]], "uint8() (in module spyrit.misc.disp)": [[192, "spyrit.misc.disp.uint8"]], "vid2batch() (in module spyrit.misc.disp)": [[193, "spyrit.misc.disp.vid2batch"]], "spyrit.misc.examples": [[194, "module-spyrit.misc.examples"]], "circle() (in module spyrit.misc.examples)": [[195, "spyrit.misc.examples.circle"]], "permutation_matrix() (in module spyrit.misc.examples)": [[196, "spyrit.misc.examples.permutation_matrix"]], "translation_matrix() (in module spyrit.misc.examples)": [[197, "spyrit.misc.examples.translation_matrix"]], "spyrit.misc.load_data": [[198, "module-spyrit.misc.load_data"]], "files_names() (in module spyrit.misc.load_data)": [[199, "spyrit.misc.load_data.Files_names"]], "load_data_comp_1d_new() (in module spyrit.misc.load_data)": [[200, "spyrit.misc.load_data.load_data_Comp_1D_new"]], "load_data_comp_1d_old() (in module spyrit.misc.load_data)": [[201, "spyrit.misc.load_data.load_data_Comp_1D_old"]], "load_data_recon_3d() (in module spyrit.misc.load_data)": [[202, "spyrit.misc.load_data.load_data_recon_3D"]], "spyrit.misc.matrix_tools": [[203, "module-spyrit.misc.matrix_tools"]], "permutation_matrix() (in module spyrit.misc.matrix_tools)": [[204, "spyrit.misc.matrix_tools.Permutation_Matrix"]], "sum_coll() (in module spyrit.misc.matrix_tools)": [[205, "spyrit.misc.matrix_tools.Sum_coll"]], "clean_out() (in module spyrit.misc.matrix_tools)": [[206, "spyrit.misc.matrix_tools.clean_out"]], "compression_1d() (in module spyrit.misc.matrix_tools)": [[207, "spyrit.misc.matrix_tools.compression_1D"]], "data_conv_hadamard() (in module spyrit.misc.matrix_tools)": [[208, "spyrit.misc.matrix_tools.data_conv_hadamard"]], "expend_vect() (in module spyrit.misc.matrix_tools)": [[209, "spyrit.misc.matrix_tools.expend_vect"]], "normalize_by_median_mat_2d() (in module spyrit.misc.matrix_tools)": [[210, "spyrit.misc.matrix_tools.normalize_by_median_mat_2D"]], "normalize_mat_2d() (in module spyrit.misc.matrix_tools)": [[211, "spyrit.misc.matrix_tools.normalize_mat_2D"]], "reject_outliers() (in module spyrit.misc.matrix_tools)": [[212, "spyrit.misc.matrix_tools.reject_outliers"]], "remove_offset_mat_2d() (in module spyrit.misc.matrix_tools)": [[213, "spyrit.misc.matrix_tools.remove_offset_mat_2D"]], "resize() (in module spyrit.misc.matrix_tools)": [[214, "spyrit.misc.matrix_tools.resize"]], "smooth() (in module spyrit.misc.matrix_tools)": [[215, "spyrit.misc.matrix_tools.smooth"]], "stack_depth_matrice() (in module spyrit.misc.matrix_tools)": [[216, "spyrit.misc.matrix_tools.stack_depth_matrice"]], "spyrit.misc.metrics": [[217, "module-spyrit.misc.metrics"]], "batch_psnr() (in module spyrit.misc.metrics)": [[218, "spyrit.misc.metrics.batch_psnr"]], "batch_psnr_vid() (in module spyrit.misc.metrics)": [[219, "spyrit.misc.metrics.batch_psnr_vid"]], "batch_ssim() (in module spyrit.misc.metrics)": [[220, "spyrit.misc.metrics.batch_ssim"]], "batch_ssim_vid() (in module spyrit.misc.metrics)": [[221, "spyrit.misc.metrics.batch_ssim_vid"]], "compare_nets_unsupervised() (in module spyrit.misc.metrics)": [[222, "spyrit.misc.metrics.compare_nets_unsupervised"]], "compare_video_nets_supervised() (in module spyrit.misc.metrics)": [[223, "spyrit.misc.metrics.compare_video_nets_supervised"]], "dataset_meas() (in module spyrit.misc.metrics)": [[224, "spyrit.misc.metrics.dataset_meas"]], "dataset_psnr() (in module spyrit.misc.metrics)": [[225, "spyrit.misc.metrics.dataset_psnr"]], "dataset_psnr_ssim() (in module spyrit.misc.metrics)": [[226, "spyrit.misc.metrics.dataset_psnr_ssim"]], "dataset_psnr_ssim_fcl() (in module spyrit.misc.metrics)": [[227, "spyrit.misc.metrics.dataset_psnr_ssim_fcl"]], "dataset_ssim() (in module spyrit.misc.metrics)": [[228, "spyrit.misc.metrics.dataset_ssim"]], "print_mean_std() (in module spyrit.misc.metrics)": [[229, "spyrit.misc.metrics.print_mean_std"]], "psnr() (in module spyrit.misc.metrics)": [[230, "spyrit.misc.metrics.psnr"]], "psnr_() (in module spyrit.misc.metrics)": [[231, "spyrit.misc.metrics.psnr_"]], "ssim() (in module spyrit.misc.metrics)": [[232, "spyrit.misc.metrics.ssim"]], "spyrit.misc.pattern_choice": [[233, "module-spyrit.misc.pattern_choice"]], "basis_patterns (class in spyrit.misc.pattern_choice)": [[234, "spyrit.misc.pattern_choice.Basis_patterns"]], "add_desired_pattern() (spyrit.misc.pattern_choice.basis_patterns method)": [[235, "spyrit.misc.pattern_choice.Basis_patterns.add_desired_pattern"]], "add_desired_patterns() (spyrit.misc.pattern_choice.basis_patterns method)": [[236, "spyrit.misc.pattern_choice.Basis_patterns.add_desired_patterns"]], "get_all_desired_pattern() (spyrit.misc.pattern_choice.basis_patterns method)": [[237, "spyrit.misc.pattern_choice.Basis_patterns.get_all_desired_pattern"]], "get_desired_pattern() (spyrit.misc.pattern_choice.basis_patterns method)": [[238, "spyrit.misc.pattern_choice.Basis_patterns.get_desired_pattern"]], "get_measurement_matrix() (spyrit.misc.pattern_choice.basis_patterns method)": [[239, "spyrit.misc.pattern_choice.Basis_patterns.get_measurement_matrix"]], "save_measurement_matrix() (spyrit.misc.pattern_choice.basis_patterns method)": [[240, "spyrit.misc.pattern_choice.Basis_patterns.save_measurement_matrix"]], "set_desired_pattern() (spyrit.misc.pattern_choice.basis_patterns method)": [[241, "spyrit.misc.pattern_choice.Basis_patterns.set_desired_pattern"]], "set_measurement_matrix() (spyrit.misc.pattern_choice.basis_patterns method)": [[242, "spyrit.misc.pattern_choice.Basis_patterns.set_measurement_matrix"]], "custom_patterns (class in spyrit.misc.pattern_choice)": [[243, "spyrit.misc.pattern_choice.Custom_patterns"]], "add_desired_pattern() (spyrit.misc.pattern_choice.custom_patterns method)": [[244, "spyrit.misc.pattern_choice.Custom_patterns.add_desired_pattern"]], "add_desired_patterns() (spyrit.misc.pattern_choice.custom_patterns method)": [[245, "spyrit.misc.pattern_choice.Custom_patterns.add_desired_patterns"]], "get_all_desired_pattern() (spyrit.misc.pattern_choice.custom_patterns method)": [[246, "spyrit.misc.pattern_choice.Custom_patterns.get_all_desired_pattern"]], "get_desired_pattern() (spyrit.misc.pattern_choice.custom_patterns method)": [[247, "spyrit.misc.pattern_choice.Custom_patterns.get_desired_pattern"]], "get_measurement_matrix() (spyrit.misc.pattern_choice.custom_patterns method)": [[248, "spyrit.misc.pattern_choice.Custom_patterns.get_measurement_matrix"]], "save_measurement_matrix() (spyrit.misc.pattern_choice.custom_patterns method)": [[249, "spyrit.misc.pattern_choice.Custom_patterns.save_measurement_matrix"]], "set_desired_pattern() (spyrit.misc.pattern_choice.custom_patterns method)": [[250, "spyrit.misc.pattern_choice.Custom_patterns.set_desired_pattern"]], "set_measurement_matrix() (spyrit.misc.pattern_choice.custom_patterns method)": [[251, "spyrit.misc.pattern_choice.Custom_patterns.set_measurement_matrix"]], "daubechies() (in module spyrit.misc.pattern_choice)": [[252, "spyrit.misc.pattern_choice.Daubechies"]], "daubechies_opt() (in module spyrit.misc.pattern_choice)": [[253, "spyrit.misc.pattern_choice.Daubechies_opt"]], "fourier() (in module spyrit.misc.pattern_choice)": [[254, "spyrit.misc.pattern_choice.Fourier"]], "fourier_opt() (in module spyrit.misc.pattern_choice)": [[255, "spyrit.misc.pattern_choice.Fourier_opt"]], "haar() (in module spyrit.misc.pattern_choice)": [[256, "spyrit.misc.pattern_choice.Haar"]], "haar_opt() (in module spyrit.misc.pattern_choice)": [[257, "spyrit.misc.pattern_choice.Haar_opt"]], "hadamard() (in module spyrit.misc.pattern_choice)": [[258, "spyrit.misc.pattern_choice.Hadamard"]], "hadamard_opt() (in module spyrit.misc.pattern_choice)": [[259, "spyrit.misc.pattern_choice.Hadamard_opt"]], "optimized_patterns (class in spyrit.misc.pattern_choice)": [[260, "spyrit.misc.pattern_choice.Optimized_patterns"]], "add_desired_pattern() (spyrit.misc.pattern_choice.optimized_patterns method)": [[261, "spyrit.misc.pattern_choice.Optimized_patterns.add_desired_pattern"]], "add_desired_patterns() (spyrit.misc.pattern_choice.optimized_patterns method)": [[262, "spyrit.misc.pattern_choice.Optimized_patterns.add_desired_patterns"]], "get_all_desired_pattern() (spyrit.misc.pattern_choice.optimized_patterns method)": [[263, "spyrit.misc.pattern_choice.Optimized_patterns.get_all_desired_pattern"]], "get_desired_pattern() (spyrit.misc.pattern_choice.optimized_patterns method)": [[264, "spyrit.misc.pattern_choice.Optimized_patterns.get_desired_pattern"]], "get_measurement_matrix() (spyrit.misc.pattern_choice.optimized_patterns method)": [[265, "spyrit.misc.pattern_choice.Optimized_patterns.get_measurement_matrix"]], "save_measurement_matrix() (spyrit.misc.pattern_choice.optimized_patterns method)": [[266, "spyrit.misc.pattern_choice.Optimized_patterns.save_measurement_matrix"]], "set_desired_pattern() (spyrit.misc.pattern_choice.optimized_patterns method)": [[267, "spyrit.misc.pattern_choice.Optimized_patterns.set_desired_pattern"]], "set_measurement_matrix() (spyrit.misc.pattern_choice.optimized_patterns method)": [[268, "spyrit.misc.pattern_choice.Optimized_patterns.set_measurement_matrix"]], "patterns (class in spyrit.misc.pattern_choice)": [[269, "spyrit.misc.pattern_choice.Patterns"]], "add_desired_patterns() (spyrit.misc.pattern_choice.patterns method)": [[270, "spyrit.misc.pattern_choice.Patterns.add_desired_patterns"]], "get_all_desired_pattern() (spyrit.misc.pattern_choice.patterns method)": [[271, "spyrit.misc.pattern_choice.Patterns.get_all_desired_pattern"]], "get_desired_pattern() (spyrit.misc.pattern_choice.patterns method)": [[272, "spyrit.misc.pattern_choice.Patterns.get_desired_pattern"]], "get_measurement_matrix() (spyrit.misc.pattern_choice.patterns method)": [[273, "spyrit.misc.pattern_choice.Patterns.get_measurement_matrix"]], "save_measurement_matrix() (spyrit.misc.pattern_choice.patterns method)": [[274, "spyrit.misc.pattern_choice.Patterns.save_measurement_matrix"]], "set_desired_pattern() (spyrit.misc.pattern_choice.patterns method)": [[275, "spyrit.misc.pattern_choice.Patterns.set_desired_pattern"]], "set_measurement_matrix() (spyrit.misc.pattern_choice.patterns method)": [[276, "spyrit.misc.pattern_choice.Patterns.set_measurement_matrix"]], "matrix2conv() (in module spyrit.misc.pattern_choice)": [[277, "spyrit.misc.pattern_choice.matrix2conv"]], "shift() (in module spyrit.misc.pattern_choice)": [[278, "spyrit.misc.pattern_choice.shift"]], "split() (in module spyrit.misc.pattern_choice)": [[279, "spyrit.misc.pattern_choice.split"]], "spyrit.misc.sampling": [[280, "module-spyrit.misc.sampling"]], "permutation_matrix() (in module spyrit.misc.sampling)": [[281, "spyrit.misc.sampling.Permutation_Matrix"]], "img2mask() (in module spyrit.misc.sampling)": [[282, "spyrit.misc.sampling.img2mask"]], "img2meas() (in module spyrit.misc.sampling)": [[283, "spyrit.misc.sampling.img2meas"]], "meas2img() (in module spyrit.misc.sampling)": [[284, "spyrit.misc.sampling.meas2img"]], "meas2img2() (in module spyrit.misc.sampling)": [[285, "spyrit.misc.sampling.meas2img2"]], "reorder() (in module spyrit.misc.sampling)": [[286, "spyrit.misc.sampling.reorder"]], "spyrit.misc.statistics": [[287, "module-spyrit.misc.statistics"]], "centercrop (class in spyrit.misc.statistics)": [[288, "spyrit.misc.statistics.CenterCrop"]], "cov2var() (in module spyrit.misc.statistics)": [[289, "spyrit.misc.statistics.Cov2Var"]], "cov_walsh() (in module spyrit.misc.statistics)": [[290, "spyrit.misc.statistics.cov_walsh"]], "data_loaders_imagenet() (in module spyrit.misc.statistics)": [[291, "spyrit.misc.statistics.data_loaders_ImageNet"]], "data_loaders_stl10() (in module spyrit.misc.statistics)": [[292, "spyrit.misc.statistics.data_loaders_stl10"]], "img2mask() (in module spyrit.misc.statistics)": [[293, "spyrit.misc.statistics.img2mask"]], "mea_abs_model() (in module spyrit.misc.statistics)": [[294, "spyrit.misc.statistics.mea_abs_model"]], "mean_walsh() (in module spyrit.misc.statistics)": [[295, "spyrit.misc.statistics.mean_walsh"]], "optim_had() (in module spyrit.misc.statistics)": [[296, "spyrit.misc.statistics.optim_had"]], "stat_fwalsh_s() (in module spyrit.misc.statistics)": [[297, "spyrit.misc.statistics.stat_fwalsh_S"]], "stat_fwalsh_s_stl10() (in module spyrit.misc.statistics)": [[298, "spyrit.misc.statistics.stat_fwalsh_S_stl10"]], "stat_mean_coef_from_model() (in module spyrit.misc.statistics)": [[299, "spyrit.misc.statistics.stat_mean_coef_from_model"]], "stat_model() (in module spyrit.misc.statistics)": [[300, "spyrit.misc.statistics.stat_model"]], "stat_walsh() (in module spyrit.misc.statistics)": [[301, "spyrit.misc.statistics.stat_walsh"]], "stat_walsh_imagenet() (in module spyrit.misc.statistics)": [[302, "spyrit.misc.statistics.stat_walsh_ImageNet"]], "stat_walsh_stl10() (in module spyrit.misc.statistics)": [[303, "spyrit.misc.statistics.stat_walsh_stl10"]], "transform_gray_norm() (in module spyrit.misc.statistics)": [[304, "spyrit.misc.statistics.transform_gray_norm"]], "spyrit.misc.walsh_hadamard": [[305, "module-spyrit.misc.walsh_hadamard"]], "b2_to_b10() (in module spyrit.misc.walsh_hadamard)": [[306, "spyrit.misc.walsh_hadamard.b2_to_b10"]], "bit_reverse_traverse() (in module spyrit.misc.walsh_hadamard)": [[307, "spyrit.misc.walsh_hadamard.bit_reverse_traverse"]], "bit_reversed_list() (in module spyrit.misc.walsh_hadamard)": [[308, "spyrit.misc.walsh_hadamard.bit_reversed_list"]], "bit_reversed_matrix() (in module spyrit.misc.walsh_hadamard)": [[309, "spyrit.misc.walsh_hadamard.bit_reversed_matrix"]], "fwalsh2_s() (in module spyrit.misc.walsh_hadamard)": [[310, "spyrit.misc.walsh_hadamard.fwalsh2_S"]], "fwalsh2_s_torch() (in module spyrit.misc.walsh_hadamard)": [[311, "spyrit.misc.walsh_hadamard.fwalsh2_S_torch"]], "fwalsh_g() (in module spyrit.misc.walsh_hadamard)": [[312, "spyrit.misc.walsh_hadamard.fwalsh_G"]], "fwalsh_g_torch() (in module spyrit.misc.walsh_hadamard)": [[313, "spyrit.misc.walsh_hadamard.fwalsh_G_torch"]], "fwalsh_s() (in module spyrit.misc.walsh_hadamard)": [[314, "spyrit.misc.walsh_hadamard.fwalsh_S"]], "fwalsh_s_torch() (in module spyrit.misc.walsh_hadamard)": [[315, "spyrit.misc.walsh_hadamard.fwalsh_S_torch"]], "fwht() (in module spyrit.misc.walsh_hadamard)": [[316, "spyrit.misc.walsh_hadamard.fwht"]], "fwht_torch() (in module spyrit.misc.walsh_hadamard)": [[317, "spyrit.misc.walsh_hadamard.fwht_torch"]], "get_bit_reversed_list() (in module spyrit.misc.walsh_hadamard)": [[318, "spyrit.misc.walsh_hadamard.get_bit_reversed_list"]], "gray_code_list() (in module spyrit.misc.walsh_hadamard)": [[319, "spyrit.misc.walsh_hadamard.gray_code_list"]], "gray_code_permutation() (in module spyrit.misc.walsh_hadamard)": [[320, "spyrit.misc.walsh_hadamard.gray_code_permutation"]], "ifwalsh2_s() (in module spyrit.misc.walsh_hadamard)": [[321, "spyrit.misc.walsh_hadamard.ifwalsh2_S"]], "ifwalsh_s() (in module spyrit.misc.walsh_hadamard)": [[322, "spyrit.misc.walsh_hadamard.ifwalsh_S"]], "iwalsh2() (in module spyrit.misc.walsh_hadamard)": [[323, "spyrit.misc.walsh_hadamard.iwalsh2"]], "iwalsh2_s() (in module spyrit.misc.walsh_hadamard)": [[324, "spyrit.misc.walsh_hadamard.iwalsh2_S"]], "iwalsh_s() (in module spyrit.misc.walsh_hadamard)": [[325, "spyrit.misc.walsh_hadamard.iwalsh_S"]], "iwalsh_s_matrix() (in module spyrit.misc.walsh_hadamard)": [[326, "spyrit.misc.walsh_hadamard.iwalsh_S_matrix"]], "perm_matrix_from_ind() (in module spyrit.misc.walsh_hadamard)": [[327, "spyrit.misc.walsh_hadamard.perm_matrix_from_ind"]], "sequency_perm() (in module spyrit.misc.walsh_hadamard)": [[328, "spyrit.misc.walsh_hadamard.sequency_perm"]], "sequency_perm_ind() (in module spyrit.misc.walsh_hadamard)": [[329, "spyrit.misc.walsh_hadamard.sequency_perm_ind"]], "sequency_perm_matrix() (in module spyrit.misc.walsh_hadamard)": [[330, "spyrit.misc.walsh_hadamard.sequency_perm_matrix"]], "sequency_perm_torch() (in module spyrit.misc.walsh_hadamard)": [[331, "spyrit.misc.walsh_hadamard.sequency_perm_torch"]], "walsh2() (in module spyrit.misc.walsh_hadamard)": [[332, "spyrit.misc.walsh_hadamard.walsh2"]], "walsh2_s() (in module spyrit.misc.walsh_hadamard)": [[333, "spyrit.misc.walsh_hadamard.walsh2_S"]], "walsh2_s_fold() (in module spyrit.misc.walsh_hadamard)": [[334, "spyrit.misc.walsh_hadamard.walsh2_S_fold"]], "walsh2_s_fold_torch() (in module spyrit.misc.walsh_hadamard)": [[335, "spyrit.misc.walsh_hadamard.walsh2_S_fold_torch"]], "walsh2_s_matrix() (in module spyrit.misc.walsh_hadamard)": [[336, "spyrit.misc.walsh_hadamard.walsh2_S_matrix"]], "walsh2_s_unfold() (in module spyrit.misc.walsh_hadamard)": [[337, "spyrit.misc.walsh_hadamard.walsh2_S_unfold"]], "walsh2_s_unfold_torch() (in module spyrit.misc.walsh_hadamard)": [[338, "spyrit.misc.walsh_hadamard.walsh2_S_unfold_torch"]], "walsh2_matrix() (in module spyrit.misc.walsh_hadamard)": [[339, "spyrit.misc.walsh_hadamard.walsh2_matrix"]], "walsh2_torch() (in module spyrit.misc.walsh_hadamard)": [[340, "spyrit.misc.walsh_hadamard.walsh2_torch"]], "walsh_g() (in module spyrit.misc.walsh_hadamard)": [[341, "spyrit.misc.walsh_hadamard.walsh_G"]], "walsh_g_matrix() (in module spyrit.misc.walsh_hadamard)": [[342, "spyrit.misc.walsh_hadamard.walsh_G_matrix"]], "walsh_s() (in module spyrit.misc.walsh_hadamard)": [[343, "spyrit.misc.walsh_hadamard.walsh_S"]], "walsh_s_matrix() (in module spyrit.misc.walsh_hadamard)": [[344, "spyrit.misc.walsh_hadamard.walsh_S_matrix"]], "walsh_matrix() (in module spyrit.misc.walsh_hadamard)": [[345, "spyrit.misc.walsh_hadamard.walsh_matrix"]], "walsh_torch() (in module spyrit.misc.walsh_hadamard)": [[346, "spyrit.misc.walsh_hadamard.walsh_torch"]]}})